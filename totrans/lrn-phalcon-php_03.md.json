["```php\n$ mysql -u YOURUSERNAME -p -e 'create database learning_phalcon;'\n\n```", "```php\n    'database' => array(\n        'adapter'  => 'Mysql',\n        'host'     => 'localhost',\n        'username' => 'Input your username here',\n        'password' => 'Input your password here',\n        'dbname'   => 'learning_phalcon',\n    ),\n```", "```php\n$di['db'] = function () use ($config) {\n\n    return new \\Phalcon\\Db\\Adapter\\Pdo\\Mysql(array(\n        \"host\" => $config->database->host,\n        \"username\" => $config->database->username,\n        \"password\" => $config->database->password,\n        \"dbname\" => $config->database->dbname,\n        \"options\" => array(\n            \\PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES 'UTF8'\",\n            \\PDO::ATTR_CASE => \\PDO::CASE_LOWER,\n            \\PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true,\n            \\PDO::ATTR_PERSISTENT => true\n        )\n    ));\n};\n```", "```php\nUSE learning_phalcon;\n\nCREATE TABLE IF NOT EXISTS `article` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`article_short_title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n`article_long_title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n`article_slug` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n`article_description` text COLLATE utf8_unicode_ci NOT NULL,\nPRIMARY KEY (`id`),\nKEY `id` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;\n\nINSERT INTO `learning_phalcon`.`article` (\n`id` ,\n`article_short_title` ,\n`article_long_title` ,\n`article_slug` ,\n`article_description`\n)\nVALUES (\nNULL ,  'Test article short title',  'Test article long title',  'test-article-short-title',  'Test article description'\n);\n\n```", "```php\n$ cd modules/Core\n$ mkdir Models\n\n```", "```php\n    <?php\n    namespace App\\Core\\Models;\n\n    class Base extends \\Phalcon\\Mvc\\Model\n    {\n\n    }\n    ```", "```php\n    <?php\n    namespace App\\Core\\Models;\n\n    class Article extends \\Phalcon\\Mvc\\Model\n    {\n        protected $id;\n        protected $article_short_title;\n        protected $article_long_title;\n        protected $article_slug;\n        protected $article_description;\n\n        public function setId($id)\n        {\n            $this->id = $id;\n            return $this;\n        }\n\n        public function setArticleShortTitle($article_short_title)\n        {\n            $this->article_short_title = $article_short_title;\n            return $this;\n        }\n\n        public function setArticleLongTitle($article_long_title)\n        {\n            $this->article_long_title = $article_long_title;\n            return $this;\n        }\n\n        public function setArticleSlug($article_slug)\n        {\n            $this->article_slug = $article_slug;\n            return $this;\n        }\n\n        public function setArticleDescription($article_description)\n        {\n            $this->article_description = $article_description;\n            return $this;\n        }\n\n        public function getId()\n        {\n            return $this->id;\n        }\n\n        public function getArticleShortTitle()\n        {\n            return $this->article_short_title;\n        }\n\n        public function getArticleLongTitle()\n        {\n            return $this->article_long_title;\n        }\n\n        public function getArticleSlug()\n        {\n            return $this->article_slug;\n        }\n\n        public function getArticleDescription()\n        {\n            return $this->article_description;\n        }\n    }\n    ```", "```php\n    $ cd modules/Core/\n    $ mkdir Managers\n\n    ```", "```php\n        <?php\n        namespace App\\Core\\Managers;\n\n        class BaseManager extends \\Phalcon\\Mvc\\User\\Module\n        {\n        }\n        ```", "```php\n        <?php\n        namespace App\\Core\\Managers;\n\n        use App\\Core\\Models\\Article;\n\n        class Article extends Base\n        {\n            public function find($parameters = null)\n            {\n                return Article::find($parameters);\n            }\n        }\n        ```", "```php\n    $di['core_article_manager'] = function() {\n        return new App\\Core\\Managers\\ArticleManager();\n    };\n    ```", "```php\n    $router->add('#^/articles[/]{0,1}$#', array(\n        'module' => 'frontend',\n        'controller' => 'article',\n        'action' => 'list'\n    ));\n\n    $router->add('#^/articles/([a-zA-Z0-9\\-]+)[/]{0,1}$#', array(\n        'module' => 'frontend',\n        'controller' => 'article',\n        'action' => 'read',\n        'slug' => 1\n    ));\n    ```", "```php\n    <?php\n    namespace App\\Frontend\\Controllers;\n\n    class ArticleController extends BaseController\n    {\n        public function listAction()\n        {\n            $article_manager = $this->getDI()->get('core_article_manager');\n            $this->view->articles = $article_manager->find();\n        }\n    }\n    ```", "```php\n    $ cd modules/Frontend/Views/Default\n    $ mkdir article\n\n    ```", "```php\n    {% extends 'layout.volt' %}\n    {% block body %}\n     <ul>\n     {% for article in articles %}\n     <li><a href=\"{{ url('article/' ~ article.getArticleSlug()) }}\">{{ article.getArticleShortTitle() }}</a></li>\n     {% endfor %}\n     </ul>\n    {% endblock %}\n\n    ```", "```php\nALTER TABLE `article` ADD `is_published` BOOLEAN NOT NULL DEFAULT FALSE ,\nADD `created_at` DATETIME NOT NULL ,\nADD `updated_at` DATETIME NULL DEFAULT NULL ;\n\n```", "```php\n    protected $is_published;\n    protected $created_at;\n    protected $updated_at;\n\n    public function setIsPublished($is_published)\n    {\n        $this->is_published = $is_published;\n        return $this;\n    }\n\n    public function setCreatedAt($created_at)\n    {\n        $this->created_at = $created_at;\n        return $this;\n    }\n\n    public function setUpdatedAt($updated_at)\n    {\n        $this->updated_at = $updated_at;\n        return $this;\n    }\n\n    public function getIsPublished()\n    {\n        return $this->is_published;\n    }\n\n    public function getCreatedAt()\n    {\n        return $this->created_at;\n    }\n\n    public function getUpdatedAt()\n    {\n        return $this->created_at;\n    }\n```", "```php\nforeach ($modules as $moduleName => $module){\n    if ($default_module == $moduleName) {\n    continue;\n}\n\n$moduleRouting = __DIR__.'/../modules/'.ucfirst($moduleName).'/Config/routing.php';\n    include $moduleRouting;\n}\n```", "```php\n<?php\n\n$router->add('#^/backoffice(|/)$#', array(\n    'module' => 'backoffice',\n    'controller' => 'index',\n    'action' => 'index',\n));\n\n$router->add('#^/backoffice/([a-zA-Z0-9\\_]+)[/]{0,1}$#', array(\n    'module' => 'backoffice',\n    'controller' => 1,\n));\n\n$router->add('#^/backoffice[/]{0,1}([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#', array(\n    'module' => 'backoffice',\n    'controller' => 1,\n    'action' => 2,\n    'params' => 3,\n));\n```", "```php\n<?php\nnamespace App\\Backoffice\\Controllers;\n\nclass ArticleController extends BaseController\n{\n    public function indexAction()\n    {\n      return $this->dispatcher->forward(['action' => 'list']);\n    }\n\n    public function listAction()\n    {\n        $article_manager      = $this->getDI()->get('core_article_manager');\n        $this->view->articles = $article_manager->find();\n    }\n}\n```", "```php\n$ cd modules/Backoffice\n$ cp -r ../Frontend/Views .\n\n```", "```php\n<title>{% block pageTitle %}Learning Phalcon{% endblock %}</title>\n```", "```php\n<title>{% block pageTitle %}Backoffice - Learning Phalcon{% endblock %}</title>\n```", "```php\nbody              { padding-top: 50px; }\n.sub-header       { padding-bottom: 10px; border-bottom: 1px solid #eee; }\n.navbar-fixed-top { border: 0; }\n.sidebar          { display: none; }\n\n@media (min-width: 768px) {\n  .sidebar {position: fixed;top: 51px;bottom: 0;left: 0;z-index: 1000;display: block;padding: 20px;overflow-x: hidden;overflow-y: auto;background-color: #f5f5f5;border-right: 1px solid #eee;}\n}\n\n.nav-sidebar          { margin-right: -21px; margin-bottom: 20px; margin-left: -20px; }\n.nav-sidebar > li > a { padding-right: 20px; padding-left: 20px; }\n.nav-sidebar > .active > a,\n.nav-sidebar > .active > a:hover,\n.nav-sidebar > .active > a:focus { color: #fff; background-color: #428bca; }\n\n.main { padding: 20px; }\n@media (min-width: 768px) {\n  .main { padding-right: 40px; padding-left: 40px; }\n}\n.main .page-header { margin-top: 0; }\n```", "```php\n{{ stylesheetLink('../assets/default/css/lp.css') }}\n```", "```php\n{{ stylesheetLink('../assets/default/css/lp.backoffice.css') }}\n```", "```php\n{% block body %}\n<h1>I did it !</h1>\n{% endblock %}\n```", "```php\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n          <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n          <a class=\"navbar-brand\" href=\"#\">Learning Phalcon</a>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse\">\n          <ul class=\"nav navbar-nav navbar-right\">\n            <li><a href=\"#\">Sign out</a></li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-sm-3 col-md-2 sidebar\">\n          <ul class=\"nav nav-sidebar\">\n            <li class=\"active\"><a href=\"{{ url('article/list') }}\">Articles <span class=\"sr-only\">(current)</span></a></li>\n            <li><a href=\"#\">Other menu item</a></li>\n          </ul>\n        </div>\n        <div class=\"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main\">\n          {% block body %}\n          <h1 class=\"page-header\">Dashboard</h1>\n          <h2 class=\"sub-header\">Section title</h2>\n          <div class=\"table-responsive\">\n\n          </div>\n          {% endblock %}\n        </div>\n      </div>\n    </div>\n```", "```php\n{% extends 'layout.volt' %} {% block body %}\n<h1 class=\"page-header\">Articles</h1>\n<h2 class=\"sub-header\">List</h2>\n<div class=\"table-responsive\">\n\n    <table class=\"table table-striped\">\n        <thead>\n            <tr>\n                <th>#</th>\n                <th>Title</th>\n                <th>Is published</th>\n                <th>Created at</th>\n                <th>Updated at</th>\n                <th>Options</th>\n            </tr>\n        </thead>\n        <tbody>\n        {% for article in articles %}\n            <tr>\n                <td>{{ article.getId() }}</td>\n                <td>{{ article.getArticleShortTitle() }}</td>\n                <td>{{ article.getIsPublished() }}</td>\n                <td>{{ article.getCreatedAt() }}</td>\n                <td>{{ article.getUpdatedAt() }}</td>\n                <td>\n                    <a href=\"{{ url('article/edit/' ~ article.getId()) }}\">Edit</a> |\n                    <a href=\"{{ url('article/delete/' ~ article.getId()) }}\">Delete</a> |\n                </td>\n            </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n\n</div>\n{% endblock %}\n```", "```php\n$result = mysql_query(\"SELECT * FROM article\");\n```", "```php\n$article_slug = \"test-article-short-title\";\n\n$result = Article::find(\n    [\n        \"article_slug = :article_slug:\",\n        \"bind\" => [\"article_slug\" => $article_slug]\n        \"order\" => \"created_at DESC\",\n        \"limit\" => 1\n    ]\n);\n```", "```php\nforeach ($result as $article) {\n    echo $article->getTitle();\n}\n```", "```php\nINSERT INTO  `learning_phalcon`.`article` (`id` ,`article_short_title` ,`article_long_title` ,`article_slug` ,`article_description` ,`is_published` ,`created_at` ,`updated_at`)\nVALUES (NULL ,  'Test article short title 2',  'Test article long title 2',  'test-article-short-title-2',  'Test article description 2',  '0',  '2014-12-14 05:13:26', NULL);\n\nINSERT INTO  `learning_phalcon`.`article` (`id` ,`article_short_title` ,`article_long_title` ,`article_slug` ,`article_description` ,`is_published` ,`created_at` ,`updated_at`)\nVALUES (NULL ,  'Test article short title 3',  'Test article long title 3',  'test-article-short-title-3',  'Test article description 3',  '0',  '2014-12-14 05:13:26', NULL);\n```", "```php\n$this->view->articles = $article_manager->find();\n```", "```php\n$articles = $article_manager->find([\n   'order' => 'created_at DESC'\n]);\n$this->view->articles = $articles;\n```", "```php\n$article = Article::findFirst();\necho $article->getTitle();\n```", "```php\n$articles = Article::findByArticleSlug('test-article-short-title');\nforeach ($articles as $article) {\n    echo $article->getId();\n}\n\n$article = Article:;findFirstByArticleSlug('test-article-short-title');\necho $article->getId();\n```", "```php\n    public function create($data)\n    {\n        $article = new Article();\n        $article->setArticleShortTitle($data['article_short_title']);\n        $article->setArticleLongTitle($data['article_long_title']);\n        $article->setArticleDescription($data['article_description']);\n        $article->setArticleSlug($data['article_slug']);\n        $article->setIsPublished(0);\n        $article->setCreatedAt(new \\Phalcon\\Db\\RawValue('NOW()'));\n\n        if (false === $article->create()) {\n            foreach ($article->getMessages() as $message) {\n                $error[] = (string) $message;\n            }\n            throw new \\Exception(json_encode($error));\n        }\n        return $article;\n    }\n```", "```php\n    public function createAction()\n{\n  $this->view->disable();\n  $article_manager = $this->getDI()->get('core_article_manager');\n\n        try {\n            $article = $article_manager->create([]);\n            echo $article->getArticleShortTitle(), \" was created.\";\n        } catch (\\Exception $e) {\n            echo $e->getMessage();\n        }\n    }\n```", "```php\n$article = $article_manager->create([\n    'article_short_title' => 'Test article short title 5',\n    'article_long_title' => 'Test article long title 5',\n    'article_description' => 'Test article description 5',\n    'article_slug' => 'test-article-short-title-5'\n]);\n```", "```php\n$article = $article_manager->create([\n    'article_short_title' => 'Test article short title 5',\n    'article_long_title' => 'Test article long title 5',\n    'article_description' => 'Test article description 5',\n    'article_slug' => 'test-article-short-title-5'\n]);\n\n// create() method from manager:\n\n$article = new Article();\n$article->assign($data);\n$article->create();\n```", "```php\n    public function update($id, $data)\n    {\n        $article = Article::findFirstById($id);\n\n        if (!$article) {\n            throw new \\Exception('Article not found', 404);\n        }\n\n        $article->setArticleShortTitle($data['article_short_title']);\n        $article->setUpdatedAt(new \\Phalcon\\Db\\RawValue('NOW()'));\n\n        if (false === $article->update()) {\n            foreach ($article->getMessages() as $message) {\n                $error[] = (string) $message;\n            }\n            throw new \\Exception(json_encode($error));\n        }\n        return $article;\n    }\n```", "```php\n    public function updateAction($id)\n    {\n        $this->view->disable();\n\n        $article_manager = $this->getDI()->get('core_article_manager');\n\n        try {\n            $article = $article_manager->update($id, [\n                'article_short_title' => 'Modified article 1'\n            ]);\n            echo $article->getId(), \" was updated.\";\n        } catch (\\Exception $e) {\n            echo $e->getMessage();\n        }\n    }\n```", "```php\n    public function delete($id)\n    {\n        $article = Article::findFirstById($id);\n\n        if (!$article) {\n            throw new \\Exception('Article not found', 404);\n        }\n\n        if (false === $article->delete()) {\n            foreach ($article->getMessages() as $message) {\n                $error[] = (string) $message;\n            }\n            throw new \\Exception(json_encode($error));\n        }\n\n        return true;\n    }\n```", "```php\n    public function deleteAction($id)\n{\n  $this->view->disable();\n  $article_manager = $this->getDI()->get('core_article_manager');\n\n        try {\n            $article_manager->delete($id);\n            echo \"Article was deleted.\";\n        } catch (\\Exception $e) {\n            echo $e->getMessage();\n        }\n    }\n```", "```php\npublic function find()\n{\n    $query = new \\Phalcon\\Mvc\\Model\\Query(\"SELECT * FROM App\\Core\\Models\\Article\", $this->getDI());\n    $articles = $query->execute();\nreturn $articles;\n}\n```", "```php\n$di['modelsManager'] = function () {\n    return new \\Phalcon\\Mvc\\Model\\Manager();\n};\n```", "```php\npublic function find()\n{\n    $query = $this->modelsManager->createQuery(\"SELECT * FROM App\\Core\\Models\\Article\");\n    $articles = $query->execute();\n\n    return $articles;\n}\n```", "```php\npublic function find()\n{\n    $query = $this->modelsManager->createQuery(\"SELECT * FROM App\\Core\\Models\\Article WHERE id = :id:\");\n    $articles = $query->execute(array(\n        'id' => 2\n    ));\n    return $articles;\n}\n```", "```php\n<?php\n\nuse Phalcon\\Mvc\\Model\\Resultset\\Simple as Resultset;\n\nclass Article extends Base\n{\n    public static function rawFind()\n    {\n\n        $sql     = \"SELECT * FROM robots WHERE id > 0\";\n        $article = new self();\n\n        return new Resultset(null, $article, $article->getReadConnection()->query($sql));\n    }\n\n    public static function rawUpdate()\n    {\n        $sql = \"UPDATE article SET is_published = 1\";\n        $this->getReadConnection()->execute($sql);\n    }\n}\n```", "```php\n<?php\nclass Article extends Base\n{\n    public function initialize()\n    {\n        $this->setReadConnectionService('a_slave_db_connection_service'); // By default is 'db'\n        $this->setWriteConnectionService('db');\n    }\n}\n```", "```php\n<?php\nclass UserController extends Phalcon\\Mvc\\Controller\n{\n    public function saveAction()\n    {\n        $this->db->begin();\n\n        $user = new User();\n        $user->name = \"John Doe\";\n\n        if (false === $user->save() {\n            $this->db->rollback();\n            return;\n        }\n\n        $wallet = new Wallet();\n        $wallet->user_id = $user->id;\n        $wallet->balance = 0;\n\n        if (false === $wallet->save()) {\n            $this->db->rollback();\n            return;\n        }\n\n        $walletTransaction = new WalletTransaction();\n        $walletTransaction->wallet_id = $wallet->id;\n        $walletTransaction->amount = 5000;\n        $walletTransaction->description = 'Bonus credit';\n\n        if (false === $walletTransaction1->save()) {\n            $this->db->rollback();\n            return;\n        }\n\n        $walletTransaction1 = new WalletTransaction();\n        $walletTransaction1->wallet_id = $wallet->id;\n        $walletTransaction1->amount = -1800;\n        $walletTransaction1->description = 'Apple store';\n\n        if (false === $walletTransaction1->save()) {\n            $this->db->rollback();\n            return;\n        }\n\n        $this->db->commit();\n    }\n}\n```", "```php\n<?php\nclass UserController extends Phalcon\\Mvc\\Controller\n{\n    public function saveAction()\n    {\n        $walletTransactions[0] = new WalletTransaction();\n        $walletTransactions[0]->wallet_id = $wallet->id;\n        $walletTransactions[0]->amount = 5000;\n        $walletTransactions[0]->description = 'Bonus credit';\n\n        $walletTransactions[1] = new WalletTransaction();\n        $walletTransactions[1]->wallet_id = $wallet->id;\n        $walletTransactions[1]->amount = -1800;\n        $walletTransactions[1]->description = 'Apple store';\n\n        $wallet = new Wallet();\n        $wallet->user_id = $user->id;\n        $wallet->balance = 0;\n        $wallet->transactions = $walletTransactions;\n\n        $user = new User();\n        $user->name = \"John Doe\";\n        $user->wallet = $wallet;\n    }\n}\n```", "```php\n<?php\n\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager,\n    Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\n\nclass UserController extends Phalcon\\Mvc\\Controller\n{\n    public function saveAction()\n    {\n      try {\n    $manager     = new TxManager();\n    $transaction = $manager->get();\n\n    $user = new User();\n    $user->setTransaction($transaction);\n    $user->name = \"John Doe\";\n\n    if ($user->save() == false) {\n        $transaction->rollback(\"Cannot save user\");\n    }\n\n    $wallet = new Wallet();\n    $wallet->setTransaction($transaction);\n    $wallet->user_id = $user->id;\n    $wallet->balance = 0;\n\n    if ($wallet->save() == false) {\n        $transaction->rollback(\"Cannot save wallet\");\n    }\n\n    $walletTransaction = new WalletTransaction();\n    $walletTransaction->setTransaction($transaction);;\n    $walletTransaction->wallet_id = $wallet->id;\n    $walletTransaction->amount = 5000;\n    $walletTransaction->description = 'Bonus credit';\n\n    if ($walletTransaction1->save() == false) {\n        $transaction->rollback(\"Cannot create transaction\");\n    }\n\n    $walletTransaction1 = new WalletTransaction();\n    $walletTransaction1->setTransaction($transaction);\n    $walletTransaction1->wallet_id = $wallet->id;\n    $walletTransaction1->amount = -1800;\n    $walletTransaction1->description = 'Apple store';\n\n    if ($walletTransaction1->save() == false) {\n        $transaction->rollback(\"Cannot create transaction\");\n    }\n\n    $transaction->commit();\n\n      } catch(TxFailed $e) {\n    echo \"Error: \", $e->getMessage();\n      }\n}\n```", "```php\nArticle::find([\n    'article_slug' => 'test-article-title'\n]);\n```", "```php\nArticle::find([\n    [\n        'article_slug' => 'test-article-title'\n    ]\n]);\n```", "```php\n$di['mongo'] = function() {\n    $mongo = new MongoClient();\n    return $mongo->selectDB(\"bitpress\");\n};\n\n$di['collectionManager'] = function(){\n    return new Phalcon\\Mvc\\Collection\\Manager();\n};\n```", "```php\n141214 23:35:53    572 Connect  root@localhost on\n      572 Query  select @@version_comment limit 1\n      572 Query  SELECT DATABASE()\n      572 Init DB  learning_phalcon\n      572 Query  SELECT * FROM article\n      572 Quit\n```", "```php\n141214 23:37:26    490 Query  SELECT IF(COUNT(*)>0, 1 , 0) FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_NAME`='article'\n      490 Query  DESCRIBE `article`\n      490 Query  SELECT `article`.`id`, `article`.`article_short_title`, `article`.`article_long_title`, `article`.`article_slug`, `article`.`article_description`, `article`.`is_published`, `article`.`created_at`, `article`.`updated_at` FROM `article` ORDER BY `article`.`created_at` DESC\n```", "```php\n$di['modelsCache'] = $di['cache'];\n```", "```php\npublic function listAction() {\n    $article_manager = $this->getDI()->get('core_article_manager');\n\n    $articles = $article_manager->find([\n        'order' => 'created_at DESC',\n        'cache' => [\n            'key' => 'articles',\n            'lifetime' => 3600\n        ]\n    ]);\n\n    $this->view->articles = $articles;\n}\n```"]