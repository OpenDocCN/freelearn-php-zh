- en: Chapter 9. Code Quality Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Mess detector and PhpStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code sniffer and PhpStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locating code duplicates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code formatting and arrangement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Engineering is beautiful. The beauty of engineering lies in the fact that it
    leaves no stone unturned and no path uncovered while carrying out even the simplest
    of tasks. Tasks that might appear too trivial for the lay person—even they are
    taken care of by engineering; software engineering, contextual.
  prefs: []
  type: TYPE_NORMAL
- en: You will agree that time matures you. Do you remember what your attitude used
    to be when you were a novice software engineer and when you were presented with
    a (programming) problem to solve? You started making plans using your infant knowledge
    about what the actual *code* would be like. So childish, right? As time progressed
    and you started gaining experience, you started using a scratchpad-like thing
    to first plan using primitive sketching techniques to visualize the flow of the
    algorithm. This was where you started feeling the need for engineering diagrams.
    You started learning UML—the mother of all modeling languages and the very basis
    of software engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Time kept on taking you through the tough lessons of life. In due course, you
    realized that without following engineering principles, it was easy to start moving
    forward, but the way was one-sided and one-directional. Once you are required
    to go back and fix mistakes that you, as a human, have committed, the action can
    take you into a state of limbo where no one obeys the law of gravity. So, you
    and software engineering became friends, and life became much easier.
  prefs: []
  type: TYPE_NORMAL
- en: So far, so good.
  prefs: []
  type: TYPE_NORMAL
- en: If it is said that you can know a lot more about your close friend—software
    engineering—it is not incorrect or inappropriate. Software engineering not only
    helps you in maintaining ethics while designing a system but also keeps a track
    of the code you write. The number of lines of code you write, for example, can
    be one metric to determine the cost of software (considering that a line of code
    costs a fixed amount of money). The variable names in your code need to follow
    a strict standard. Why? It has to be a human being only who will be required to
    go through the code once some modification becomes the need of the hour. Since
    change is inevitable, the odds in favor of this event happening are high.
  prefs: []
  type: TYPE_NORMAL
- en: To sum it up, software engineering provides you with systems to perform analysis
    on this aspect of your software application as well. This process is known as
    **code quality assurance** since you are able to create code that is readable
    and hence maintainable. The systems available for you to achieve this milestone
    are known as **PHP Mess Detector** (**PHPMD**) and **PHP Code Sniffer** (**PHPCS**).
    PHPMD literally identifies and inspects the mess that a team member has done in
    the code base and provides warnings, error messages, and indications to not only
    clean up the messy code but also attempts to keep the code base clean. Code Sniffer
    acts as a sniffer dog and barks whenever it detects potential bugs in the code
    base. It is not that the combination of your eye and brain would be unable to
    detect simple errors in the code, but there are plural incidents in the development
    phase where you, as a tired software engineer, might commit very simple mistakes.
    With the passage of time, such mistakes grow to become a mysterious bug probably
    extremely hard to crack. PHPCS proves helpful in curbing such mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: 'A question that is very obvious to ask: where is PhpStorm in the scene? The
    answer to this is that PhpStorm is always at your disposal. How? The two systems
    mentioned are used in conjunction with PhpStorm to wreak havoc on the bugs that
    attempt to creep into the development phase and keep on bugging you for long and
    sometimes extended periods of time. A waste of your bandwidth and thus decrease
    in morale—your manager will not let you go that easily till you are able to debug
    your application.'
  prefs: []
  type: TYPE_NORMAL
- en: Mess detector and PhpStorm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PhpStorm is an obedient and diligent slave of yours. It ensures that none of
    your efforts get classified as scratchy or unengineered. How? It provides you
    with facilities to integrate systems, which in turn help you in letting your efforts
    achieve engineering maturity. You must be getting anxious as to which system is
    being talked about here. So, you can put your hands together for the mess detector
    known as PHPMD. A simple acronym, indeed. It is not that PhpStorm takes away all
    the due credit of removing the mess from your code, but yes, PhpStorm makes a
    provision for you to find out the appropriate version, download, integrate, and
    then start planning what to do. And then? Then what? Just sit back and let PhpStorm
    and mess detector collaborate and perform the tasks for you.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have information about the latest (and stable) release of PHPMD.
    You can simply search it on the Internet via any popular search engine. The official
    website ([http://phpmd.org/](http://phpmd.org/)) provides you with information
    about the downloading methods available. Since you have a good taste for PHP archives,
    you can get phar from the URL [http://static.phpmd.org/php/1.4.1/phpmd.phar](http://static.phpmd.org/php/1.4.1/phpmd.phar)
    (this was the latest phar available at the time of writing). Just like other archives,
    you need not take any other action—only this download will suffice with the executable.
  prefs: []
  type: TYPE_NORMAL
- en: When you talk about executables, since `*nix` systems treat all files that have
    been downloaded from external sources as read-only, it is your duty to check the
    access permissions on phar. In most cases, a downloaded file reads permissions
    only for the sake of security. You need to be wise enough to downgrade the permissions
    to allow appropriate access to this archive. On `*nix` systems, there is this
    command available, `chmod`, using which you can play around with the access permissions
    on a specified file or a folder. Thus (using `chmod`), you can probably set `766`
    as the permission string for this archive.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now comes the important part—you need to tell PhpStorm about PHPMD. This is
    one configuration that you really need to ensure is in place. The reason for this
    being the beginning of PhpStorm is for PhpStorm to know that it has got a new
    member and thus needs to take the appropriate action accordingly. Perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to select **File** | **Settings** | **PHP** | **Mess Detector** and
    set the path of phar you just downloaded (or maybe borrowed from a friend), as
    shown in the following screenshot:![How to do it…](img/3878OT_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validate the work you did. Don't worry. PhpStorm will help you as there is a
    provision to check for the configuration to be proper via the **Validate** button.
    If you have done everything correctly, you will get a green signal from PhpStorm,
    indicating the name of the software (**PHPMD**), its author, and the version number,
    as shown in the following screenshot:![How to do it…](img/3878OT_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to configure the options available for PHPMD in PhpStorm. The settings
    are available at **File** | **Settings** | **Inspections**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on inspections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure inspections by opening the settings wizards at **File** | **Settings**
    | **Inspections** and selecting the checkbox next to the **PHP Mess Detector**
    validation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a certain predefined set of rules; you need to select some or all of
    them depending on your requirement. So, you can select one or all of the code-validation
    rules and proceed with writing the code. That is it. The following screenshot
    shows the **Inspections** page:![How to do it…](img/3878OT_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHPMD will continue doing its work in the background and will keep on showing
    you errors and warnings as you keep on writing code. The notifications are classified
    according to the way you configured it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To configure the notifications, you need to select the individual rule and make
    changes in the color, font, and so on, as required. The following screenshot shows
    how the Edit Settings\Colors & Fonts tab looks on the Severities Editor page:![How
    to do it…](img/3878OT_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getting PHPMD to work is no difficult task. All you need to do is make a few
    settings and resume doing your favorite work—writing code. However, since you
    are an engineer, you should be keen to know exactly what goes on under the hood
    that keeps you going.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, PHPMD follows some rules. These rules were made while keeping in
    mind the principles of software engineering. There are rules to keep a check on:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code size rules**: From time to time events occur which need you to keep
    a check on the size of the code. It is important to say that you write not only
    to write, but also to read it later and maintain it. One very important factor
    is the size of the code and the complexity associated with it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cyclomatic complexity**: Theoretically, a flow graph needs to be drawn to
    denote the algorithm in question, then the edges, the nodes, and the exit points
    are counted, and then the resulting number is obtained by edge count—node count
    plus the exit point count in the flow graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHPMD abstracts these details in its implementation. It takes into account the
    number of decision points, such as the loop constructs—if, for, while, case—and
    calculates the complexity as the number of decision points in the code plus 1
    (one) for the entry point of the method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Npath complexity**: Then, there is Npath complexity, which PHPMD takes care
    of. Npath is the number of possible outcomes in your code. It can be the cases
    under which the code produces output. So, PHPMD decides that a limit of 200 is
    OK for a code to be healthy. This means that your code (method) can have a maximum
    of 200 outcomes if your method is quality code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Excessive method length rule**: PHPMD puts a restriction on the length of
    the method by counting the number of lines of code in it. This one is known as
    the excessive method length rule. So, if a method''s lines of code count exceeds
    100, that method violates this restriction, and PHPMD indicates to you in the
    form of a warning or whatever you configured it to be:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the number of lines of code in your class exceeds 1,000, you need to refactor
    the class you have written. Who said this? The PHPMD excessive class length restriction.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the number of parameters declared exceed 10, PHPMD will notify you to reduce
    the number of arguments to less than 10\. You can then try passing an object containing
    the like arguments in one single object. This rule is known as the excessive parameter
    list restriction.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are too many public members inside a class, PHPMD treats it as bad
    quality and reports it to you via PhpStorm. The too-many factor is set to a default
    value of 45, exceeding which PHPMD starts treating your code as bad code.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Having too many private or protected members is not treated as good, either.
    If there are more than 15 such members, or fields, to be more technical, PHPMD
    notifies you. You need to restructure your class to have fewer fields. Why not
    try using composition? The *has-a* relationship... Remember?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have a little too many methods in a class that you wrote, beware. PHPMD
    will treat it as bad-quality code and will indicate that you need to refactor
    the class to have fewer methods in the class. The threshold is 10.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controversial rules**: PHPMD treats code as bad-quality code when:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have access to a *super global array* directly without encapsulating in
    some object.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You do not use the camel case to name classes, class members, and whatever variables
    you use in your code.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Design rules**: Code written in PHP will be a candidate for bad code when:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have exit points in your code within regular code, such as exit points without
    exception / error handling lines.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You love using `eval` in your code.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You find using `goto` in your code enjoyable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You have created a few too many children of a class. Fifteen is the threshold
    for PHPMD.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You have created a class hierarchy in which a class inherits more than six parent
    classes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Naming rules**: PHPMD will also frown and thus indicate that the code is
    bad when:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A variable name is too long or too short. A name is too long when it is greater
    than 20 characters in length and too short when it is less than three characters
    in length. Really short!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A method name is too short to be understood. A name is too short when it is
    less than three characters in length.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The constructor uses the name of the enclosing class.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The constants in the class are written in lower case with words separated by
    an underscore (`_`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unused code rules**: Leaving the code unused is not looked upon by PHPMD
    with high regard. According to PHPMD, code is bad when:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have declared, and/or assigned a value to a local variable or a private
    field.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You have declared and/or defined a method but have not used it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You have declared a formal parameter to a method but haven't used it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is PHPMD in action. You can see how PHPMD provides errors and warnings
    as you keep on writing the code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_09_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are convinced that the predefined rulesets are not sufficient to support
    your cause, you can have your own version of the ruleset file added to PhpStorm.
    All you need to do is create a new XML file, name it reasonably, and ask PhpStorm
    to incorporate the file, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3878OT_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Your ruleset file looks somewhat like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual detection is done when you write `<rule ref="rulesets/codesize.xml/TooManyFields"/>`
    because it is this line that selects which option should be turned on for PHPMD.
    The other lines written at the beginning—you need not boggle your mind—just comprise
    the basic skeleton part. The best part of the story is that you need not remember
    the lines: you can just copy the lines from here and paste it to any `ruleset.xml`
    that you wish. The only thing you need to remember is the exact name of the rule
    that you wish to apply.'
  prefs: []
  type: TYPE_NORMAL
- en: Code sniffer and PhpStorm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Have you noticed why defense personnel keep sniffer dogs? No? The purpose of
    the sniffer dogs is to sniff items around and detect for any illegal items present
    in those items. You might wonder how a dog decides which one is illegal and which
    one is legal, and even if it does that, how can it inform the humans about the
    validity of the item. A dog just knows how to bark: it barks at both times, happy
    or sad. Everything said and done, the question still remains. How does a dog know
    about an illegal object?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is straight, abrupt, and terse: a dog is *configured* or trained
    to do that.'
  prefs: []
  type: TYPE_NORMAL
- en: You have PhpStorm, right? You have been using it for all your programming needs,
    right? You can similarly use PhpStorm to sniff your code and inform you if the
    code contains some coding standard violation. The system that provides this functionality
    to PhpStorm is PHPCS or PHP Code Sniffer.
  prefs: []
  type: TYPE_NORMAL
- en: PHP Code Sniffer is a PHP5 script that tokenizes PHP, JavaScript, and CSS files
    to detect violations of a defined coding standard. It is an essential development
    tool that ensures that your code remains clean and consistent. It can also help
    prevent common semantic errors made by developers.
  prefs: []
  type: TYPE_NORMAL
- en: PHPCS is an application written in PHP that can be configured with a predefined
    or custom set of coding rules. It detects possible inconsistency and unclean code
    and thus does not allow common semantic errors to pass through in the production
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you even plan to start code-sniffing, you need to download PHPCS as
    `.tgz` so that you have the installation file ready in your local system. The
    file can be downloaded from [http://download.pear.php.net/package/PHP_CodeSniffer-2.0.0a2.tgz](http://download.pear.php.net/package/PHP_CodeSniffer-2.0.0a2.tgz).
    After this, comes the installation. The PHPCS installation is quite simple in
    PhpStorm (just as easy as the other actions are). You need to perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract the contents of the tgz file you downloaded to a convenient location
    on your development machine—usually the computer where you play around with PhpStorm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the extracted directory, locate the `phpcs` file, which is a script written
    in PHP. This would most probably be inside the scripts directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check whether the permissions set on the executable are sufficient to allow
    PhpStorm to use it. If you find something doubtful, set the permission to `755`
    on this PHPCS file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Carry out the most important step. You need to tell PhpStorm that there is PHPCS
    available. For that, you need to select **File** | **Settings** | **Code Sniffer**
    and set the path to this PHPCS, as shown in the following screenshot:![Getting
    ready](img/3878OT_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validate that the settings have been made properly and that everything is OK
    in there, as shown in the following screenshot:![Getting ready](img/3878OT_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having configured the code sniffer system with PhpStorm, you don''t have to
    bother about how to make PHPCS work. It just works in the background with the
    default inspection system provided. However, you need to turn it on. The code
    sniffing process can be started by selecting the inspection option available for
    PHPCS:'
  prefs: []
  type: TYPE_NORMAL
- en: In the bottom-right corner, there is this inspection icon available. You need
    to click on it and click on the **Configure inspection** option available, or
    the same option can be availed of by selecting **File** | **Settings** | **Inspections**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to select the PHP inspection tree, and inside it, the **PHP Code Sniffer
    Validation** option has to be selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next to the coding standard, there is a dropdown. You need to select one of
    the available values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you add more values to PHPCS, you need to refresh the list of available standards.
    The refresh is confirmed by a message, as shown in the following screenshot:![How
    to do it…](img/3878OT_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Having done that, you can now focus on writing business logic for the organization
    you work for. PHPCS will continue in the background and will keep on showing errors
    as you proceed. One of the errors is shown in the following screenshot:![How to
    do it…](img/3878OT_09_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The working of PHPCS is not very difficult to understand—especially for people
    such as you, who are (already) familiar with systems like PHPMD (it's another
    code quality assurance tool, just in case you were not familiar with it. Pun intended!).
    PHPCS also understands XML, and PHPCS also has inbuilt or precooked rules. This
    is clearly visible when you integrate PHPCS with PhpStorm. There are coding standards
    available to you via a dropdown containing these default values. This dropdown
    is available with the label **Coding Standard:** The PHPCS system obeys the standards
    and checks your code as you open it.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, so good. The actual nuts and bolts are located in the `ruleset.xml`
    file. No, no, it is not a typographical error as a result of engineered copy-pasting!
    The `ruleset.xml` file follows certain standards during creation. The rules that
    drive PHPCS are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to its being an XML, the most important line to be added is the XML version:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parent node of all the nodes in the ruleset is the `ruleset` node. The
    name attribute makes the node known by a name to PhpStorm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There can be a description node that contains the description of the standard
    under construction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then comes the actual rule. PHPCS can accept external references to a rule
    that someone else might have created:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There can be a directory that contains code standards in the form of the PHP
    class hierarchy:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or, there might be a reference to a well-known coding standard, such as PEAR
    or Zend:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Some of the default standards are included as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, it can have the following code too:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the standards are defined in the form of the PHP class hierarchy, the
    inclusion also respects the hierarchical pattern in the `ref` attribute. So, the
    actual class that is referenced is the `Generic_Sniffs_Files_LineEndingsSniff`
    class defined inside the directory `/path/to/PHP_CodeSniffer/CodeSniffer/Standards/Generic/Sniffs/FilesLineEndingsSniff.php`
    under Version 2.0.0a2\. The property being tried to be set in the class is the
    `eolChar`, which happens to be a public and string type member of the class.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a sample ruleset file at [http://pear.php.net/manual/en/package.php.php-codesniffer.annotated-ruleset.php](http://pear.php.net/manual/en/package.php.php-codesniffer.annotated-ruleset.php).
  prefs: []
  type: TYPE_NORMAL
- en: Locating code duplicates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business needs money, money needs engineering, engineering needs a plan, and
    the plan needs time. Since business needs money, and time is money, business does
    not want to waste time. Spending time means spending money, and all (software)
    businesses assume that money spent is money lost. Since business spends money
    sparingly, engineering resorts to code reuse. But then, the customer needs quality—after
    all, the customer has paid a (huge) sum of money to get the work done. This is
    a vicious circle.
  prefs: []
  type: TYPE_NORMAL
- en: When the engineering team is short of time, the challenge ahead is always to
    ensure that the copy-paste tasks are under control without side effects. Under
    control means that the software is able to do the expected work. The side effects
    are duplicate sections in the software, which can potentially lead to increases
    in the lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: The situation seems grim!
  prefs: []
  type: TYPE_NORMAL
- en: You must remember PhpStorm at all times in your coding lifespan—whether you
    are having leisure or trouble. PhpStorm always has something or other for you.
    This time, PhpStorm will take you out of this vicious circle. There is a feature
    available that allows you to scan through your code and locate the duplicate code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To effectively locate duplicates in the code, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to select **Code** | **Locate Duplicates** from the main menu. You
    will get a pop up that is the selection-making point for you, as shown in the
    following screenshot:![How to do it…](img/3878OT_09_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default selection is **Whole project**. You have the option to find code
    duplicates in the whole project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also set the criteria to work on the type or category of files according
    to the development cycle phase. You can choose **Uncommitted files** to locate
    duplicates in the code that you have not committed yet. This can be a good idea
    to improve code quality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can select the currently open file in the editor to work on locating the
    duplicate. PhpStorm also provides you with the option to set a custom scope of
    locating duplicates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Project test files**: This is used when you want to locate the duplicate
    code fragments in the test files that you created for the project. This can be
    handy when you have a large number of test cases (PHPUnit test cases, to be precise).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open files**: When you need to select the open files in the editor, PhpStorm
    will set the scope of duplicate search as the open files only.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Module**: When you want to analyze the non-project files, such as the libraries
    or the software development kits (SDKs), PhpStorm provides you with a facility
    by allowing this option.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Current file**: When you are quite sure that you want only the file that
    is currently open and is being actively viewed, PhpStorm provides you with this
    feature.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selected files**: When you need to select a few files from the Project view,
    PhpStorm will set the scope of duplicate search as the selected files only.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed files**: Being an experienced professional, you might need to review
    the code written by fellow developers. This option comes in handy for files that
    are changed and are yet to be committed to the code repository.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default**: This is used when you want to look for possible duplicates in
    the default change list for the changes to be put into the code repository.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can separately include or exclude the test sources for the duplicate analysis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code duplication analysis settings define the sensitivity of the search and
    set limitations that help avoid reporting about every similar code construct.
    The following screenshot shows the code duplicate analysis settings:![How to do
    it…](img/3878OT_09_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can anonymize the functions, variables, and literals to save the memory
    heap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PhpStorm can be told to limit the duplication analysis settings to dig only
    that block of code that is bigger than a particular size. The default size is
    10.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The answer to this question is honestly! Code duplication works honestly and
    finds out the duplications in code. So, after you invoke the duplicate code finder,
    it finds the occurrences in the file that have duplicate code. The duplicate code
    block is found out on the basis of the filtering that you specified in the settings
    (see the *How to do it…* section), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The concept of duplication in code needs to be understood quite clearly to
    have an insight into the working of the duplication analysis. When is a block
    of code eligible to be termed as duplicate? The answer: when there are plural
    instances of the same lines of code rewritten for different purposes. Due to the
    pressure from the business end, you might get a feeling that your task will be
    completed in time if you copy and paste the same code for various tasks, but PhpStorm
    frowns on this attitude. Whenever code gets repeated, the *DRY* principle gets
    violated. Whenever the DRY principle gets violated, software engineering demands
    you to ensure code reusability. The most common way is to write classes and methods
    appropriately. Since PhpStorm is a great soldier fighting to keep the principles
    of software engineering upright, to ensure this cause, the duplication analysis
    lists all such occurrences in a dedicated code duplication window.'
  prefs: []
  type: TYPE_NORMAL
- en: Code formatting and arrangement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A PhpStorm cookbook author says, "Merely writing code does not make you a software
    engineering warrior—an engineer becomes a Ninja when the code works and the person
    on the adjacent seat can make some sense out of it."
  prefs: []
  type: TYPE_NORMAL
- en: People might argue over this statement's validity. But since there is a general
    trend among engineers to develop dissatisfaction from their jobs, it becomes quite
    important for you, the senior software developer in the team, to have control
    over the way the code is written. Of course, it is your responsibility!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have got the determination to ensure that the written code has to be
    properly formatted, you need to select **Code** | **Reformat Code** from the main
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like always, there will be a pop-up window for you to make selections. Quite
    happily, you can do wonders with this pop-up window, which is shown in the following
    screenshot:![How to do it…](img/3878OT_09_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The default selection will format the currently selected file. Perform the
    following steps to obtain the required results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you select text, PhpStorm will format the selected text only if the **Selected
    text** option is provided.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can select all files in a particular folder when you select all files in
    the **...** option. You can select the subdirectories inside the selected directory
    by selecting the checkbox adjacent to **Include subdirectories**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can **Optimize imports** by removing the imports that are not required by
    the code.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can rearrange the import entries in the target code by selecting the **Rearrange
    entries** option. **Rearrange entries** will rearrange the order in which the
    elements in the code will appear.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also reformat only the text that has been changed from Subversion by
    selecting **Only VCS changed text**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On selecting the **Run** button, the code formatting process does its work.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The formatting system works by respecting the settings you have specified in
    **Code style** | **PHP**. You can control **Tabs and Indents** by selecting the
    tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The spaces to be given in the code are controlled by the **Spaces** tab in
    the **Settings** panel, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The wrappings and braces in the code are controlled by the **Wrapping and Braces**
    tab, as shown in the following screenshot. This tab specifies where the text will
    be wrapped in the code and where the braces will be formatted in the target code.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The blank lines are inserted at appropriate places in the code when the specifications
    are made in the **Blank Lines** tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The PHPDoc can be formatted as well.. Remember this setting?
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_09_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Code formatting involves miscellaneous settings available under the **Other**
    tab. This provides the general settings that are not categorized under other categories.
    The settings behind the code formatting found under the **Other** tab are shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The arrangement of class members gets driven by the settings available under
    the **Arrangement** tab. The order in which the elements in the code are to be
    arranged is available under this tab. You can save the settings with the **Manage**
    button and can use it in other projects as well. If you already are in that "other"
    project, you need to select the text in blue **Set from...** to select the already-set
    formatting rule, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_09_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All done. Happy code formatting!
  prefs: []
  type: TYPE_NORMAL
- en: As a last word before leaving the kitchen, we, the authors, want to state that
    since knowledge is something that always keeps evolving, you, the (senior) software
    developer should not limit yourself to a limited set of knowledge resources. As
    an implementation of this rule, we plan to work on adding many more recipes that
    definitely were skipped due to deadline limitations. You can continue to follow
    the updates in the PhpStorm community; in the meantime, the authors will continue
    to work on PhpStorm to bring out more interesting and tasty dishes for you.
  prefs: []
  type: TYPE_NORMAL
- en: This is not the end, but the beginning of something more and something that
    is of the type *NeverBefore*. PhpStorm rocks!
  prefs: []
  type: TYPE_NORMAL
