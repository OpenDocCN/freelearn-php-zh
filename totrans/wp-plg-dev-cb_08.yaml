- en: Creating Custom MySQL Database Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics around the creation of
    custom database tables:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating new database tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting custom tables on plugin removal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating custom table structure on plugin upgrade
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom table data on an admin page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting and updating records in custom tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting records from custom tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom database table data in shortcodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a search function to retrieve custom table data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing data from a user file into custom tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As seen in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power
    of Custom Post Types*, custom post types provide a very powerful and easy way
    to create and manage custom content in a WordPress installation. That being said,
    if the new items that you wish to create do not benefit from having access to
    the built-in text editor and have a large amount of data fields that need to be
    stored in the system, storing them using custom post types can actually become
    cumbersome. More specifically, each custom field requires a separate function
    call to be associated with a custom post. Also, custom fields have limited functionality,
    since they store all their information in simple text fields, making it difficult
    to perform ordered queries based on special data types, such as dates.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative solution to manage custom content is to create new tables in
    the website's database and offer a custom interface to manage these new items.
  prefs: []
  type: TYPE_NORMAL
- en: While working directly with the website database might sound like a tall order,
    and should really only be done if custom post types don't work as desired, WordPress
    actually offers a utility class that makes it very easy to create new database
    tables, store information in these new structures, and perform data retrieval
    queries. While having a basic level of **Structured Query Language** (**SQL**)
    knowledge will help understand all of the recipes in this chapter while we create
    a bug tracking system, each recipe thoroughly explains how each command works
    to produce the end result.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new database tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in the creation of custom data elements to be stored in a custom
    database table is to create the table itself. This is done by preparing a standard
    SQL command that specifies the name of the table and its desired structure and
    then getting WordPress to execute it on the website's database.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to prepare and execute a query that creates a table to
    hold bug reports.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment, either on your
    local computer or on a remote server, where you will be able to load your new
    plugin files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch8-bug-tracker`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory and create a text file called `ch8-bug-tracker.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 8 - Bug Tracker`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called on plugin
    activation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to provide an implementation for the `ch8bt_activation`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code to provide an implementation for the `ch8bt_create_table`
    function responsible for the actual table creation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the `Chapter 8 - Bug Tracker`
    plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using `phpMyAdmin`, connect to your MySQL database to see that a new table
    was created when the plugin was activated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3f91e48-7f30-472a-8994-50ac88cf7c4c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the creation of configuration options that we covered back in the
    *Creating default user settings on plugin initialization* recipe from [Chapter
    3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and Administration
    Pages*, custom database tables are typically created when a plugin is activated
    in a WordPress installation. By using the activation hook, we register code to
    be executed when the plugin is first activated and when upgrades are performed.
    When the callback is executed, we will have our first encounter with the global
    `wpdb` class. This utility class is instantiated by WordPress and gives us access
    to a number of methods that can be used to interact with the underlying MySQL
    website database, as well as to help prevent data-related security risks. These
    methods vary in complexity, ranging from simple calls that will quickly insert
    or update records to more complex member functions that require knowledge of SQL
    commands to produce the expected results.
  prefs: []
  type: TYPE_NORMAL
- en: Before making the call to create the actual table, the activation function makes
    a call to the `get_blog_prefix` method of the `wpdb` class to retrieve the table
    prefix associated with the website (set to `wp_` in a default installation). On
    retrieval, this prefix is immediately sent to the `ch8bt_create_table` function
    to build an SQL command designed to create a new table.
  prefs: []
  type: TYPE_NORMAL
- en: While the SQL command has multiple lines, we can see that it is actually quite
    simple if we break it down into small sections. The first line of the command
    specifies that a new table named `<prefix>ch8_bug_data` should be created if it
    does not exist already on the server. If the creation takes place, the following
    five lines specify the name and data type for each field, along with information
    indicating whether the field can contain a `NULL` value and what the default value
    should be in some cases. There is also a special command associated with the `bug_id`
    field, called the `AUTO_INCREMENT` command, which tells the system to automatically
    populate this field with auto-incrementing values when new records are added to
    the table. Last, but not least, the last line of the code indicates that the primary
    key for the table is the `bug_id` field.
  prefs: []
  type: TYPE_NORMAL
- en: Once the query is ready, it is stored in a variable and executed by calling
    the `query` method of the `wpdb` object. This method executes any SQL command
    on the website database and returns a numeric value indicating how many rows were
    affected by the query.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the previous code is relatively manageable, things might get a bit more
    complicated when dealing with a larger number of fields or with network WordPress
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: Using phpMyAdmin to simplify code creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of writing the table creation code from scratch, the `phpMyAdmin` database
    management tool can come in handy to prepare this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88164da6-fbd1-4306-a578-df51fbdae148.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, to create the table that was used in this recipe, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `wordpressdev` database in `phpMyAdmin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Create table section, enter `wpdev_ch8_bug_data` in the Name field
    and the number `5` as Number of fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Go button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the table creation grid that is displayed, set the name of each Field based
    on the Column names listed in the previous screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Type of each Field based on the Type column in the previous screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For items that have a value in parentheses next to their Type, use the numeric
    value to indicate the Length/Values of these items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the Default value for each field based on the previous screenshot. You
    can select NULL from the drop-down list for the items that have a NULL default.
    For items that have a specific value, select As defined: in the drop-down and
    indicate the value in the adjacent field.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For items that are allowed to have a NULL value (shown with a Yes in the previous
    screenshot), make sure that the Null box is checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select PRIMARY under the Index drop-down list for the `bug_id` field to indicate
    that it will be the primary key for the table. Then, click on Go in the index
    creation pop-up dialog that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the A_I box for the bug_id field to indicate that it should auto-increment
    when new values are inserted in the table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Save button to complete the table creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this time, phpMyAdmin will create the table on the server. To access the
    SQL command used to create the table, click on the Export tab and click on Go
    to download a text file containing the SQL code. While the export file will contain
    some extra information, the important section is the actual CREATE TABLE segment
    that, as you will see, looks very similar to the code written in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Create tables in network installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of WordPress's many strengths is the ability to create and manage multiple
    websites from a single installation. In these situations, each site has its own
    set of tables in the MySQL database. Therefore, when preparing a plugin that creates
    custom tables and may be used in network installations, extra code must be put
    in place to create the new tables under each site's structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first changes are done in the `ch8bt_activation` function, where we check
    whether we are dealing with a multisite installation. If that is the case, we
    will cycle through each existing site and make a call to create the new table,
    as we saw in the main recipe code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'While this will handle creating custom tables in all the existing network sites
    when the plugin is activated, additional code needs to be put in place to create
    the additional table when new sites are created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `ch8bt_create_table` function itself does not require any modifications,
    since it was already designed to receive a table prefix from other functions and
    use it to build a query.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting custom tables on plugin removal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is always a good practice for plugins to provide an uninstallation procedure
    to remove content that they added to a website's database or filesystem. When
    dealing with custom database tables, all records should be dropped along with
    the table itself when a website administrator decides to delete a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to implement a data removal script to delete the bug storage
    table that was created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Creating new database tables* recipe to
    have an existing table to remove. Alternatively, you can get the resulting code
    (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v1-1.php`) from the code bundle and
    rename the file as `ch8-bug-tracker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a text file called `uninstall.php` in the `ch8-bug-tracker` directory
    and open it in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the new script with the standard `<?php` opening tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement a new function called `ch8bt_drop_table` by adding this code to the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to perform the deletion of tables created to store bugs
    from a single or network WordPress installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the code file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Deactivate the Chapter 8 - Bug Tracker
    plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a copy of the entire plugin directory before performing the next step,
    to avoid deleting all of your work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plugin's Delete link and then click OK in the dialog that asks
    for confirmation before deleting the plugin and its data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `phpMyAdmin`, connect to your MySQL database to verify that the bug data
    table has been deleted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin
    Framework Basics*, all of the code contained in a file called `uninstall.php`
    gets executed when a plugin is deleted. In this case, our code's main purpose
    is to run a query against the website database to remove the bug table.
  prefs: []
  type: TYPE_NORMAL
- en: Before doing so, the first few lines of the file check for the presence of a
    variable (`WP_UNINSTALL_PLUGIN`) to confirm that the code has been called as part
    of the plugin deletion process and not by an external user.
  prefs: []
  type: TYPE_NORMAL
- en: Once the legitimacy of the execution has been confirmed, the code that runs
    is similar to the table creation code, where we first get access to the WordPress
    database management class, followed by a check to see whether the WordPress installation
    is a single site or a network installation. In the first case, we make a single
    call to the `ch8bt_drop_table` function to drop the bug table, while we make multiple
    calls to that function for every existing site under a network environment.
  prefs: []
  type: TYPE_NORMAL
- en: The query to remove the table is actually quite simple, making a call to the
    `query` method of the `wpdb` class to execute a `DROP TABLE` SQL command.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating new database tables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating custom table structure on plugin upgrade
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the lifetime of a plugin, as it gets expanded to provide additional functionality,
    there may be a need to store more data than was originally intended in custom
    database tables. As you may know, WordPress itself makes regular changes to its
    own database structure during the upgrade process to store new information. To
    do this, it uses a simple function called `dbDelta`, which we can also access
    from our plugin's code.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to alter the previous table creation code to load the
    WordPress upgrade API and use the database upgrade function to add an extra field
    to the existing bug storage table.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Creating new database tables* recipe to
    have the creation code to modify. Alternatively, you can get the resulting code
    (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v1-1.php`) from the code bundle and
    rename the file `ch8-bug-tracker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `ch8bt_create_table` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `IF NOT EXISTS` text on the first line of the table creation query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an extra line to the table creation code to add a field to hold the bug
    title, shown as follows in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'They should be replaced with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deactivate and re-Activate the Chapter 8 - Bug Tracker plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using phpMyAdmin, connect to your MySQL database to see that the new `bug_title`
    field has been added to the bug storage table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b836d06e-3b12-4a3c-b790-99d7c992bc8c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dbDelta` function is part of the utility functions that WordPress calls
    when performing version upgrades. When called, it parses the table creation SQL
    command that it receives and figures out the difference between the table structure
    that it describes and the current table, if the table exists. Once that difference
    has been established, it performs the necessary changes to align the two structures.
  prefs: []
  type: TYPE_NORMAL
- en: If both the structures are identical, it leaves the table as it is. With this
    approach in place, any changes to the structure can simply be implemented by altering
    the table creation query. As such, the `dbDelta` function can actually be used
    from the first version of a plugin to ensure an easy upgrade path.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating new database tables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom table data on an admin page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating one or more custom database tables to store data, the next step
    in the creation of a custom item management system is to build an interface to
    populate them. While custom post types have a very organized structure to edit
    entries, creating an interface for custom tables is much more similar to creating
    plugin configuration panels, as we saw in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to create an interface that will display a list of bugs
    stored in the system, provide a link to create new entries, and offer a way to
    edit existing entries.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Updating custom table structure on plugin
    upgrade* recipe to have a custom table in place with the required structure. Alternatively,
    you can get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v2.php`)
    from the code bundle and rename the file `ch8-bug-tracker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following line of code to register a function to be called when
    the administration menu is being built:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to provide an implementation for the `ch8bt_settings_menu`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following block of code to provide an implementation for the `ch8bt_config_page`
    function responsible to render the configuration page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the new Bug Tracker item under the administration page''s Settings
    menu to see the newly created page, showing that there are currently no bugs stored
    in the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/09494f30-ba92-4fb9-9e7c-a6ddb17b5012.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first few steps of the recipe use functions that were previously covered
    in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and
    Administration Pages*, to register a callback that will add a menu to the Settings
    section of the admin menu. When the new menu page is visited, the `ch8bt_config_page`
    function is called to render the page contents, using a mix of HTML and PHP code.
  prefs: []
  type: TYPE_NORMAL
- en: After rendering the page title, along with a link that will be used to create
    new bugs, the page display code checks to see whether the page address contains
    a variable called `id`. This ID will be used in subsequent recipes to indicate
    whether the user wants to create or edit bugs. It will not be set when a visitor
    clicks on the Bug Tracker menu item, resulting in the current recipe code getting
    called.
  prefs: []
  type: TYPE_NORMAL
- en: The next section uses the `get_results` method of the `wpdb` database management
    class to retrieve information from the database. In this call, the first parameter
    is an SQL query, whereas the second argument indicates the desired format to be
    used to return data. While we specified that we want an associative array in this
    case, other options are to return a numerically indexed array (`ARRAY_N`), an
    object (`OBJECT`), or an array of objects (`OBJECT_K`).
  prefs: []
  type: TYPE_NORMAL
- en: The `SELECT *` command in the query indicates that we want all the fields in
    the table to be returned, while the `ORDER` command specifies the field that should
    be used to order results and the order direction (`ASC` or `DESC`).
  prefs: []
  type: TYPE_NORMAL
- en: Once the `get_results` method has been executed, we will check to see whether
    any data was retrieved from the database, and proceed to perform a `foreach` loop
    through all the records to display them in a standard HTML table if data is found.
    If no records are returned by the query, we will display a short message indicating
    that no bugs were found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating an administration page menu item in the Settings menu* recipe
    in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and
    Administration Pages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Rendering the admin page contents using HTML* recipe in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting and updating records in custom tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a basic infrastructure in place to display existing bugs, the
    next logical step is to create a form that will be used to insert and update records
    in a custom table.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add a form to manage bugs when users select an entry
    in the bug tracking list or indicate that they want to create a new entry by using
    the appropriate link.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Displaying custom table data in an admin
    page* recipe to have an existing framework in place. Alternatively, you can get
    the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v3.php`) from the
    code bundle and rename the file `ch8-bug-tracker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the `ch8bt_config_page` function and locate the bracket that closes out
    the `if` statement (`<?php } ?>`) situated toward the end of its body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following code block right before the closing bracket from the `if`
    statement identified in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to register a function that will be called on
    the initialization of the administration page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code at the end of the plugin file to register a
    function to be called when bugs are created or updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following block of code to process user-submitted data and store
    it in the website database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the new Bug Tracker item under the administration page''s Settings
    menu and click on the Add New Bug link to create an entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/144e94fb-dba1-496b-9d16-79da36051edd.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Submit to store the new bug in the website database. The newly created
    bug will appear in the bug listing created in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the new entry's name to review its information and update it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you tried clicking on the Add New Bug link created in the previous recipe,
    you would have been presented with a page that only contained the panel's title.
    This is due to the fact that we had not implemented the code to display a bug
    creation and editing form when the `id` variable is present in the website address.
  prefs: []
  type: TYPE_NORMAL
- en: The first few steps of this recipe aim to rectify this by checking for the presence
    of a variable called `id` in the page URL with a value set to the text `new` or
    a numeric value.
  prefs: []
  type: TYPE_NORMAL
- en: While both of these situations will result in displaying a bug edition form,
    the second condition first performs a database query using the `wpdb` object's
    `get_row` method to try to retrieve a bug with the designated ID. The `get_row`
    method is similar to the `get_results` method used in the previous recipe, but
    will only return a single row, even if more than one result is found by the query.
    As part of our `get_row` call, we also use the `$wpdb` class's prepare method.
    This method will parse the second argument it receives for security and then use
    it to replace the placeholder placed in our query. If the query is successful,
    the values that were retrieved are used to customize the form title and set initial
    field values.
  prefs: []
  type: TYPE_NORMAL
- en: The form itself is a standard HTML form that includes many of the elements that
    we have seen in previous recipes, such as a call to `wp_nonce_field` to provide
    security from external attacks. We have also added a hidden field containing the
    bug ID that was found in the page URL to facilitate data processing when a bug
    is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: Once the form is in place, we make a call to `add_action` to register a callback
    that will be executed when the newly created form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: The callback, named `process_ch8bt_bug`, starts off by doing a bit of validation.
    Namely, it checks to see whether the current user has administrative rights and
    if the nonce field that should be part of the form data is present. If both of
    these conditions are met, a data array is created from user post data, the current
    system date, and a hardcoded status value.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting array is stored in the website database using one of two `wpdb`
    object methods, `insert` or `update`, based on the value found in the hidden `bug_id`
    field. Both methods expect to receive the name of the target table, along with
    an associative array containing the names and values of each table field to be
    stored. Additionally, the `update` method requires a third parameter that indicates
    the field name and value to be used to locate the field to be updated. In both
    cases, you will notice that the `bug_id` field is not specified in the array of
    new values, since it gets automatically set to an incremental value by the database
    server.
  prefs: []
  type: TYPE_NORMAL
- en: The last step in this function is to build a clean URL to the plugin configuration
    page and use the resulting address in a call to `wp_redirect`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Displaying custom table data in an admin page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting records from custom tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After adding data to custom tables, website administrators are likely to delete
    some of these entries down the road. Since we have been building an interface
    to view, create, and modify database entries, the task of selecting items to be
    deleted also falls under our responsibility. Thankfully, we can easily expand
    the existing bug display list to add checkboxes for selection and a button to
    trigger the actual deletion.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add deletion capabilities to our bug tracking system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Inserting and updating records in custom
    tables* recipe to have an existing framework to augment. Alternatively, you can
    get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v4.php`) from
    the code bundle and rename the file `ch8-bug-tracker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the `ch8bt_config_page` function and locate the `Manage Bug Entries h3`
    header in its content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following highlighted lines of code right after the header to create
    a form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'A few lines down, add an empty column in the table header, before the `ID`
    field, as highlighted in the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the main bug list display loop, insert the following highlighted code
    segments to add a checkbox in front of each item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'A few lines down, change the value of the `colspan` table row parameter from
    `3` to `4`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following highlighted lines of code after the `table` close tag
    to display a deletion button and terminate the form section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the `ch8bt_admin_init` function and add the following function call at
    the end of its body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the bottom of the file and add the following code block to provide
    an implementation for the `delete_ch8bt_bug` function responsible for processing
    deletion requests generated by the new form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the new Bug Tracker item under the administration page's Settings
    menu to see the new interface elements that were added to the bug listing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the actual deletion of data from our custom table can be done with a single
    call to run the `DELETE` SQL command, we first need the user to indicate which
    entries need to be removed. This selection interface can be easily added to the
    existing bug listing created in an earlier recipe.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe starts in familiar territory with the creation of a standard HTML
    form to surround the original bug listing. In addition to the bug list, the form
    also includes a hidden field to indicate the name of the action to be called when
    the user submits the form, along with a nonce field to ensure that access to the
    deletion process is secure.
  prefs: []
  type: TYPE_NORMAL
- en: With this initial code in place, the next section of the recipe modifies the
    original table listing to add a checkbox at the front of every row. As can be
    seen in the code, the `name` property of the checkbox is a bit different than
    regular HTML syntax, ending with two square parentheses. This syntax, used in
    conjunction with each item's `bug_id`, results in the creation of an array of
    checked items and ID numbers that are sent to the form processing function on
    submission.
  prefs: []
  type: TYPE_NORMAL
- en: The last change that is done in the bug listing display code is to add a deletion
    button and to close the form.
  prefs: []
  type: TYPE_NORMAL
- en: To associate a callback with the newly created form, the next addition made
    by the recipe is a call to `add_action` to associate the `admin_post_<actionname>`
    variable action name with the `delete_ch8bt_bug` function.
  prefs: []
  type: TYPE_NORMAL
- en: When called, the bug deletion function, like most other submission processing
    code that we have created before, first starts with a few verifications to make
    sure that the user has appropriate permissions and that the hidden security fields
    that were placed in the form are present. When both of these formalities are confirmed,
    the code goes on to check for the presence of a bug array and proceeds to cycle
    through all the entries if one was found. In that loop, we get access to the global
    `wpdb` class and we can use it to build and execute SQL queries that delete a
    single database row at a time using the `bug_id` numbers that were submitted.
  prefs: []
  type: TYPE_NORMAL
- en: As an added security measure, notice the use of the `intval` function in front
    of the `$bug_to_delete` variable to make sure that no one is trying to get external
    commands to be processed in an attempt to corrupt or hijack the database.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Inserting and updating records in custom tables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom database table data in shortcodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of creating custom tables is often to store information to be shared
    with website visitors. As such, it is important to give users the ability to easily
    display their new content stored in custom tables on their website. The most straightforward
    method to achieve this goal is to create one or more shortcodes that can be inserted
    on any post or page to render the desired information.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to implement a new shortcode that will be used to display
    a bug listing on a page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Deleting records from custom tables* recipe
    to have an existing framework to augment. Alternatively, you can get the resulting
    code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v5.php`) from the code bundle
    and rename the file `ch8-bug-tracker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code at the bottom of the file to declare a new shortcode
    and its associated display function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code block right after the section header to implement
    the `ch8bt_shortcode_list` function that is responsible for displaying a bug listing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new page and insert the newly created shortcode `[bug-tracker-list]`
    in the page body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the page to see a list of bugs stored in the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2650036b-5f68-4c0b-ada9-a1417b3821f4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a new shortcode to display custom table data is done in a very similar
    way as in previous recipes. First, we declare the new code, along with the name
    of the function that will be called to generate text to replace it when found
    in posts or pages. Then, we create a display function to prepare all the output
    and return it to WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: The only distinction here is in the way we query the information. The recipe
    uses the `get_results` method of the `wpdb` class to query all the bugs that exist
    in the custom database table using the `SELECT` SQL command. After this call is
    executed, all the items found are returned in an associative array that can easily
    be displayed in table form using a `foreach` loop.
  prefs: []
  type: TYPE_NORMAL
- en: If no entries were found, the recipe displays a simple message to inform the
    visitor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Deleting records from custom tables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a search function to retrieve custom table data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While content created using custom post types can be automatically searched
    by the built-in WordPress search engine, custom database tables don't benefit
    from the same treatment. Instead, plugin developers choosing this mechanism to
    store information must build their own search functionality.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add a search box to the bug listing created in the
    previous section and how to use the resulting query data to narrow down the list
    of bugs that are displayed by the shortcode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the recipe titled *Displaying custom database
    table data in shortcodes* to have an existing framework to augment. Alternatively,
    you can get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v6.php`)
    from the code bundle and rename the file `ch8-bug-tracker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `ch8bt_shortcode_list` function and add the following highlighted
    code after the initial `global $wpdb` call to check whether a search string was
    entered by a visitor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following highlighted lines of code in the middle of the existing
    query string to add the `where` parameters using the user search text, if present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code block, before the table starts rendering, to display
    a simple search form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit the bug display page that was previously created to see the new search
    form. Enter a search string and click on the Search button to see a list of results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56d31f5c-4553-43c5-940a-704ad8d9398b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe implements a simple search engine by displaying a short form and
    capturing a user search string using the standard HTML `GET` method. If a search
    string is found in the page address, we will modify the bug retrieval query that
    was in place by adding a `where` clause that looks for the search string anywhere
    in the `bug_title` or `bug_description` fields.
  prefs: []
  type: TYPE_NORMAL
- en: While it might seem natural to insert the search string directly in the query
    and execute it, we use the `wpdb` class' `prepare` method to assemble the query
    and validate the search string to avoid malicious intent. This method works in
    a very similar way to the standard PHP `sprintf` function, with placeholders to
    represent the places where variables should be substituted.
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the shortcode display function remains identical, displaying
    a list of varying length depending on the presence of a search string and the
    number of entries that match the query.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Displaying custom database table data in shortcodes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing data from a user file into custom tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To avoid long data entry sessions, a nice addition to a system, such as the
    Bug Tracker that we have been putting in place in this chapter, would be to provide
    users with the ability to import large amounts of entries from an external file
    in a single operation. To accomplish this task, the **Comma-Separated Values**
    (**CSV**) file format is very convenient, since it can be edited by most spreadsheet
    editors and can be read using standard PHP function calls.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe implements a CSV-based import function in our bug tracking system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Implementing a search function to retrieve
    custom table data* recipe to have an existing framework to augment. Alternatively,
    you can get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v7.php`)
    from the code bundle and rename the file `ch8-bug-tracker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `ch8bt_config_page` function and add the following highlighted code
    block at the end of the bug listings section after the end of the existing deletion
    form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the `ch8bt_admin_init` function and add the following line of code at
    the end of its body to register a function to process submissions of the bug import
    form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following block of code to provide an implementation for the `import_ch8bt_bug`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new text file in the plugin directory called `importtemplate.csv` and
    open it in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following text in the newly created file to provide an example bug
    to import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the CSV text file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the new Bug Tracker item under the administration page's Settings
    menu to see the new Import Bugs section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the file import dialog to locate the `importtemplate.csv`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the list of bugs in the system to see its content added to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0961800c-9225-40f3-97e6-9464a77da1ef.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe creates a small form on the Bug Tracker management page that is
    solely responsible for uploading one or more bugs to the database. By editing
    the content of the `importtemplate.csv` file and selecting it in the import dialog,
    users can quickly populate the system by loading data straight to the custom database
    table that was created by the plugin when it was first installed.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the file upload field, the form contains the usual hidden nonce
    and action name fields. It also features an `enctype` property to allow files
    to be uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: When the user submits a file to be uploaded, the registered callback function
    first checks to see whether the user who made the submission has appropriate rights
    and whether the nonce security fields were present as part of the post data. If
    both of these conditions are met, the recipe goes on to check whether a file has
    been correctly uploaded to the web server using the `array_key_exists` function
    to search through the standard PHP `$_FILES` global variable. As you can see,
    the text that it searches for is the name of the file upload field from the form.
  prefs: []
  type: TYPE_NORMAL
- en: If a file has been uploaded, the `fopen` function opens it and stores a pointer
    to it in a local variable. After a quick verification of the pointer's existence,
    the code moves to a `while` loop to process each line of the incoming file with
    the `fgetcsv` function. This function reads one line of the file at a time, analyzes
    its content to find all of the comma-separated fields that are present, and stores
    the resulting data in a numeric array.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the `import` function creates an array with the imported data and
    stores it in the database using the `wpdb` class' `insert` method, as we have
    seen in a previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Inserting and updating records in custom tables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
