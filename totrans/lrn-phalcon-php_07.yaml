- en: Chapter 7. The Backoffice Module (Part 1)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。后台模块（第1部分）
- en: 'Unless you are developing a static website, you will need a section/module
    where an administrator can add and manage content, such as articles, categories,
    and users. This is where `Backoffice` comes into the picture. In this chapter,
    we will develop parts of the **CRUD** (**Create**, **Read**, **Update**, and **Delete**)
    operations needed to administrate our website. We will also use part of the API
    that we developed in [Chapter 5](ch05.html "Chapter 5. The API Module"), *The
    API Module*. We will play more with forms and validations. We will cover this
    chapter in two parts, namely:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你正在开发一个静态网站，否则你需要一个部分/模块，管理员可以在此处添加和管理内容，例如文章、分类和用户。这就是“后台”介入的地方。在本章中，我们将开发管理我们网站所需的**CRUD**（**创建**、**读取**、**更新**和**删除**）操作的部分。我们还将使用我们在[第5章](ch05.html
    "第5章。API模块")中开发的API的一部分，*API模块*。我们将更多地使用表单和验证。我们将分两部分介绍本章，即：
- en: Hashtag CRUD
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签CRUD
- en: Category CRUD
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分类CRUD
- en: Editing the main layout
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑主布局
- en: 'Let''s start this chapter with some modifications to the main layout. Edit
    the main layout located at `modules/Backoffice/Views/Default/layout.volt` and
    add the following code:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从对主布局的一些修改开始本章。编辑位于`modules/Backoffice/Views/Default/layout.volt`的主布局，并添加以下代码：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see that we are using `include` to include two new files: `topbar.volt`
    and `sidebar.volt`. In Volt, you can use the `include` method or the `partial()`
    method. The main difference between `partial` and `include` is that a `partial`
    method is included in the runtime but an `include` file compiles the content and
    returns it as part of the view that was included. I prefer `include` because it
    improves performance. If you need to assign variables to a file that will be included,
    you need to avoid the file extension. Here is an example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们正在使用`include`来包含两个新文件：`topbar.volt`和`sidebar.volt`。在Volt中，你可以使用`include`方法或`partial()`方法。`partial`和`include`之间的主要区别是，`partial`方法在运行时被包含，而`include`文件编译内容并将其作为包含视图的一部分返回。我更喜欢`include`，因为它可以提高性能。如果你需要将变量分配给将被包含的文件，你需要避免文件扩展名。以下是一个示例：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can read more about `include` at [http://docs.phalconphp.com/en/latest/reference/volt.html#include](http://docs.phalconphp.com/en/latest/reference/volt.html#include).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://docs.phalconphp.com/en/latest/reference/volt.html#include](http://docs.phalconphp.com/en/latest/reference/volt.html#include)了解更多关于`include`的信息。
- en: The code for the two new files is the same code that resided in the main layout
    earlier but with a small modification for the sidebar. Let's create the folder
    and the files. Go to `modules/Backoffice/Views/Default/` and create a new folder
    named `common`. In this new folder, create two new files named `sidebar.volt`
    and `topbar.volt` with the following code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 两个新文件的代码与之前主布局中的代码相同，但为了侧边栏进行了一些小的修改。让我们创建文件夹和文件。转到`modules/Backoffice/Views/Default/`并创建一个名为`common`的新文件夹。在这个新文件夹中，创建两个新文件，分别命名为`sidebar.volt`和`topbar.volt`，代码如下。
- en: common/topbar.volt
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: common/topbar.volt
- en: 'Here is the code for the navigation bar that can be found at the top of the
    page. It contains a link to the home page and a link that is used to sign out:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是位于页面顶部的导航栏的代码。它包含一个指向主页的链接和一个用于注销的链接：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: common/sidebar.volt
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: common/sidebar.volt
- en: 'The following is the code for the sidebar (the left menu) and the code that
    contains the links to different controllers from our application:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为侧边栏（左侧菜单）和包含从我们的应用程序到不同控制器的链接的代码：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There is something new about these two files. We are making use of a method
    named `url()`, the sidebar has incorporated some logic, and we notice that the
    dispatcher from DI is available without the need to assign it from a controller.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这两个文件，有一些新的内容。我们正在使用一个名为`url()`的方法，侧边栏已经包含了一些逻辑，我们注意到DI中的分发器无需从控制器分配即可使用。
- en: By default, Volt has access to a number of methods. The `url()` method, which
    uses the URL service, is one of them. For a list of supported methods, you can
    check out the official documentation at [http://docs.phalconphp.com/en/latest/reference/volt.html#functions](http://docs.phalconphp.com/en/latest/reference/volt.html#functions).
    Sometimes, you need special functions that are not accessible from Volt. In such
    a case, you will need to extend the Volt engine and implement your own methods.
    How do you extend Volt?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Volt可以访问许多方法。使用URL服务的`url()`方法是其中之一。有关支持的方法列表，你可以查看官方文档[http://docs.phalconphp.com/en/latest/reference/volt.html#functions](http://docs.phalconphp.com/en/latest/reference/volt.html#functions)。有时，你需要一些从Volt无法访问的特殊函数。在这种情况下，你需要扩展Volt引擎并实现自己的方法。如何扩展Volt？
- en: 'In our case, we can do it directly in the `voltService` DI, which can be found
    in `config/services.php`, for example, we want to add a method named `randomGen()`
    that generates a number of random strings, and it''s located in `modules/Core/Library/Util.php`.
    The `voltService` DI will look like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们可以在`voltService` DI中直接这样做，它可以在`config/services.php`中找到，例如，我们想要添加一个名为`randomGen()`的方法，该方法生成一定数量的随机字符串，它位于`modules/Core/Library/Util.php`中。`voltService`
    DI将如下所示：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will be able to call this method in Volt by using the following syntax:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下语法在Volt中调用此方法：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding method will generate five random strings.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法将生成五个随机字符串。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: You can learn more about extending Volt at [http://docs.phalconphp.com/en/latest/reference/volt.html#extending-volt](http://docs.phalconphp.com/en/latest/reference/volt.html#extending-volt).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://docs.phalconphp.com/en/latest/reference/volt.html#extending-volt](http://docs.phalconphp.com/en/latest/reference/volt.html#extending-volt)了解更多关于扩展Volt的信息。
- en: 'In the sidebar file (`sidebar.volt`), we use `IF` statements to check the name
    of the current controller. The name is available through the dispatcher, and we
    assign it to a variable named `c_name`. The equivalent PHP code for our `IF` statements
    and `set` is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在侧边栏文件（`sidebar.volt`）中，我们使用`IF`语句来检查当前控制器的名称。该名称可以通过分发器获得，并将其分配给名为`c_name`的变量。我们`IF`语句和`set`的等效PHP代码如下：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Of course, there are other ways of generating the code for this menu, but try
    to use Volt as much as you can, so that you get used to the syntax. Now that we
    have made a few modifications, let''s access `http://www.learning-phalcon.localhost/backoffice/`.
    If there are no errors, you should see the same things as shown in the following
    screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有其他生成此菜单代码的方法，但尽量多使用Volt，这样你就能习惯其语法。现在我们已经做了一些修改，让我们访问`http://www.learning-phalcon.localhost/backoffice/`。如果没有错误，你应该会看到以下截图所示的内容：
- en: '![common/sidebar.volt](img/B03522_07_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![common/sidebar.volt](img/B03522_07_01.jpg)'
- en: Cleaning the Core module
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理内核模块
- en: 'Let''s also clean our `Core` module. We will use this folder as a collection
    of libraries instead of using it as a module. First, remove the following files:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也清理我们的`Core`模块。我们将使用此文件夹作为库的集合，而不是将其用作模块。首先，移除以下文件：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then remove these lines from `modules/Bootstrap.php`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从`modules/Bootstrap.php`中移除以下行：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we have a clean core and our bootstrap will not register it as part of
    our modules any more. We will make modifications to `modules/Core/Controllers/BaseController.php`
    and `modules/Backoffice/Controllers/BaseController.php` so that this controller
    will extend `modules/Core/Controllers/BaseController.php`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个干净的内核，我们的引导程序将不再将其注册为我们模块的一部分。我们将对`modules/Core/Controllers/BaseController.php`和`modules/Backoffice/Controllers/BaseController.php`进行修改，以便这个控制器将扩展`modules/Core/Controllers/BaseController.php`：
- en: 'In the `modules/Api/Controllers/BaseController.php` file:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`modules/Api/Controllers/BaseController.php`文件中：
- en: '[PRE9]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `modules/Backoffice/Controllers/BaseController.php` file:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`modules/Backoffice/Controllers/BaseController.php`文件中：
- en: '[PRE10]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These modifications help us reuse some code in all our modules.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些修改帮助我们可以在所有模块中重用一些代码。
- en: Hashtag CRUD
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签CRUD
- en: 'The reason we leave articles at the end is that when we implement it, we will
    need to assign hashtags, categories, and users to it. Before going further, we
    will make a slight modification to `layout.volt` and `BaseController`. We will
    remove this line from `BaseController.php`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在末尾留下文章的原因是，当我们实现它时，我们需要将其分配给标签、类别和用户。在进一步操作之前，我们将对`layout.volt`和`BaseController`进行轻微修改。我们将从`BaseController.php`中移除以下行：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Also, we will add this line to `layout.volt`, right before `{{` `assets.outputCss(''headerCss'')`
    `}}`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将在`layout.volt`中添加此行，在`{{` `assets.outputCss('headerCss')` `}}`之前：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We are doing this because the CSS for bootstrap is already minified, and if
    we do it again, the bootstrap fonts will not be rendered correctly. Remember to
    apply the same modification to `layout_simple.volt`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做是因为bootstrap的CSS已经压缩过了，如果我们再次这样做，bootstrap字体将无法正确渲染。记住也要对`layout_simple.volt`应用相同的修改。
- en: In [Chapter 5](ch05.html "Chapter 5. The API Module"), *The API Module*, when
    we developed the API module, one of our tasks was to create the rest of the required
    models and managers. They included the hashtag manager and models. If you didn't
    do this, don't worry. You have it in the source code. Here, I will show you just
    the part of the code that we need in order to develop CRUD operations for hashtags.
    The first thing that you have to do is create the controller in the API module,
    if you haven't done so already.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。API模块")，*API模块*，当我们开发API模块时，我们的任务之一是创建所需的其余模型和管理器。它们包括hashtag管理器和模型。如果你没有这样做，不用担心。你可以在源代码中找到它。在这里，我将向你展示我们为了为hashtag开发CRUD操作所需的代码部分。你必须做的第一件事是在API模块中创建控制器，如果你还没有这样做的话。
- en: The hashtag controller within the API module
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API模块中的hashtag控制器
- en: 'All the methods found in this controller follow the same logic:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个控制器中找到的所有方法都遵循相同的逻辑：
- en: We retrieve an instance of the hashtag manager
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们获取hashtag管理器的实例
- en: We get parameters from the request object
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从请求对象中获取参数
- en: We call its specific API method and send the response
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们调用它的特定API方法并发送响应
- en: 'Let''s write the code for this controller. We will start with `listAction()`.
    All the methods are written between the `try{}-catch(){}` statements:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个控制器编写代码。我们将从`listAction()`开始。所有的方法都写在了`try{}-catch(){}`语句之间：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This method calls the hashtag manager and it reads the page number from the
    request. Next, we output the result of the `$manager->restGet()` method, which
    is an array of records with **pagination**:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法调用hashtag管理器，并从请求中读取页码。接下来，我们输出`$manager->restGet()`方法的结果，它是一个包含**分页**的记录数组：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This method is mostly similar to `listAction()`, the difference being that
    it will only return one record. Notice that we bind the ID of the requested object
    to the `$manager->restGet()` method:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法与`listAction()`大部分相似，区别在于它只会返回一条记录。注意，我们将请求对象的ID绑定到`$manager->restGet()`方法：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This method calls the hashtag manager and it reads the page number and content
    from the request. If the body that we are posting is in the JSON format, we will
    read it with `getJsonRawBody()`. The `true` parameter is used to convert data
    into arrays. If we don''t have data, we throw an exception. Next, we output the
    result of the `$manager->restUpdate()` method:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法调用hashtag管理器，并从请求中读取页码和内容。如果我们发送的body是JSON格式，我们将使用`getJsonRawBody()`读取它。`true`参数用于将数据转换为数组。如果没有数据，我们抛出异常。接下来，我们输出`$manager->restUpdate()`方法的结果：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `deleteAction()` method simply calls `$manager->restDelete()` with the
    ID of the object as the argument. If the object is found, it will be deleted:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteAction()`方法简单地调用`$manager->restDelete()`，并将对象的ID作为参数。如果对象被找到，它将被删除：'
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This method is similar to `updateAction()`, but instead of updating an object,
    it creates it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法与`updateAction()`类似，但不是更新一个对象，而是创建它。
- en: 'The routing is missing, so we are going to add it to `modules/Api/Config.routing.php`.
    We will create a new routing group for hashtags:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 路由缺失，所以我们将将其添加到`modules/Api/Config.routing.php`中。我们将为hashtag创建一个新的路由组：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If everything is okay, you can now insert a few records into the hashtag table
    and call the API to get the records by using the following command line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你现在可以插入一些记录到hashtag表中，并使用以下命令行调用API来获取记录：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of the command line should be similar to what is shown in the following
    screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行的输出应该类似于以下截图所示：
- en: '![The hashtag controller within the API module](img/B03522_07_02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![API模块中的hashtag控制器](img/B03522_07_02.jpg)'
- en: This cURL command makes a request to `/api/v1/hashtags`. The `-H` option is
    used to send header information; in our case, we send the token and the API key.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个cURL命令向`/api/v1/hashtags`发送请求。`-H`选项用于发送头部信息；在我们的例子中，我们发送了token和API密钥。
- en: A common method to reduce code duplication
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减少代码重复的一个常用方法
- en: 'Let''s create a method in `modules/Core/Controllers/BaseController.php` that
    will help us get data from our API. This method will be available within the controllers
    that extend it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`modules/Core/Controllers/BaseController.php`中创建一个方法，这个方法将帮助我们从我们的API获取数据。这个方法将在扩展它的控制器中使用：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Retrieving the data
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取数据
- en: 'To get the data, we just need to provide the URL and extra parameters, if needed.
    With the help of Phalcon''s built-in cURL provider, we make the call. Next, we
    create a hashtag controller in the `Backoffice` module. It will look like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取数据，我们只需要提供URL和（如果需要）额外参数。借助Phalcon内置的cURL提供者，我们进行调用。接下来，我们在`Backoffice`模块中创建一个标签控制器。它看起来像这样：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, the only thing that we do here is call the API's URL, and it
    returns an array of paginated items.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在这里做的唯一一件事就是调用API的URL，然后它返回一个分页项的数组。
- en: The layout structure
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局结构
- en: 'Creating the layout for this listing is quite simple. Go to `modules/Backoffice/Views/Default`
    and create a new folder named `hashtag`. In this new folder, create a new file
    named `list.volt` with the following content:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为此列表创建布局相当简单。转到`modules/Backoffice/Views/Default`并创建一个名为`hashtag`的新文件夹。在这个新文件夹中，创建一个名为`list.volt`的新文件，其内容如下：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Before ending the block of the code for the list template, we include another
    template named `paginator`. This is the paginator that will help us navigate through
    records. Create a file named `paginator.volt` in `modules/Backoffce/Views/Default/common/`
    and write this code in it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束列表模板的代码块之前，我们包含另一个名为`paginator`的模板。这是将帮助我们导航记录的分页器。在`modules/Backoffce/Views/Default/common/`中创建一个名为`paginator.volt`的文件，并写入以下代码：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The preceding code makes use of the paginator variables that are already available
    (see [http://docs.phalconphp.com/en/latest/reference/pagination.html](http://docs.phalconphp.com/en/latest/reference/pagination.html)).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用了已经可用的分页变量（见[http://docs.phalconphp.com/en/latest/reference/pagination.html](http://docs.phalconphp.com/en/latest/reference/pagination.html)）。
- en: 'Now, you can authenticate and access the hashtags listing at `http://www.learning-phalcon.localhost/backoffice/hashtag/list`.
    You should be able to see something similar to what is shown in the next screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在`http://www.learning-phalcon.localhost/backoffice/hashtag/list`处进行身份验证并访问标签列表。你应该能看到类似于下一张截图所示的内容：
- en: '![The layout structure](img/B03522_07_03.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![布局结构](img/B03522_07_03.jpg)'
- en: Let's continue with the rest of the actions (create, delete, and update). There
    are several ways to achieve this, but we will *not* make use of our API for create
    and update, mainly because of the time needed to cover all the aspects, and also
    because doing it the "old normal way" is faster. However, you can play with the
    idea and try to migrate these two actions to be API-driven.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续处理剩余的操作（创建、删除和更新）。实现这一点有几种方法，但我们不会使用我们的API进行创建和更新，主要是因为需要覆盖所有方面所需的时间，而且按照“老常规方式”来做更快。然而，你可以尝试这个想法，尝试将这些两个操作迁移到API驱动。
- en: The hashtag form
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签表单
- en: 'For create and update, I like to use forms because it''s easier to maintain
    the code and also to validate it. We will start with the `create` action by writing
    the code for the create form (the same form will be used for update). Switch to
    `modules/Core/Forms` and create a new file named `HashtagForm.php` with the following
    code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于创建和更新，我喜欢使用表单，因为它更容易维护代码，也更容易验证。我们将从编写创建表单的代码开始，创建操作（相同的表单将用于更新）。切换到`modules/Core/Forms`并创建一个名为`HashtagForm.php`的新文件，其代码如下：
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Our new form is quite simple. We have three elements: the name of the hashtag,
    a `csrf` field, and a **Submit** button. We validate the name and the `csrf` field
    with the help of two validators: `PresenceOf` and `Identical`.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新表单相当简单。我们有三个元素：标签的名称、一个`csrf`字段和一个**提交**按钮。我们使用两个验证器`PresenceOf`和`Identical`来验证名称和`csrf`字段。
- en: The hashtag controller
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签控制器
- en: 'We continue by writing the code for the `create` action and for the template.
    Open `modules/Backoffice/Controllers/HashtagController.php` and add these two
    methods:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续编写`create`操作和模板的代码。打开`modules/Backoffice/Controllers/HashtagController.php`并添加这两个方法：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `addAction()` method simply renders the form we just created. The processes
    of creation and validation take place in the `createAction()` method. This method
    accepts only `POST` data, as you can see in the first two lines. When you're working
    on a big project, you might want to use custom routes, just as we did in the API
    module.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`addAction()`方法简单地渲染我们刚刚创建的表单。创建和验证的过程发生在`createAction()`方法中。正如你可以在前两行看到的那样，这个方法只接受`POST`数据。当你在一个大项目上工作时，你可能想使用自定义路由，就像我们在API模块中所做的那样。'
- en: The hashtag manager
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签管理器
- en: 'You might notice a new method named `getForm()` in the hashtag manager. This
    method returns an instance of `HashtagForm` and it looks like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到标签管理器中有一个名为`getForm()`的新方法。这个方法返回一个`HashtagForm`实例，其外观如下：
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you have already created the hashtag manager, you should have a `create()`
    method similar to this one:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经创建了标签管理器，您应该有一个类似于以下这样的 `create()` 方法：
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The View template for the add() method
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: add() 方法的视图模板
- en: 'We also need to write the code for the template. Create a new file named `add.volt`
    in `modules/Backoffice/Views/Default/hashtag` and add the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要编写模板的代码。在 `modules/Backoffice/Views/Default/hashtag` 目录下创建一个名为 `add.volt`
    的新文件，并添加以下代码：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Our template extends `layout.volt` and renders the hashtag form elements. At
    this point, you should be able to add a new hashtag from your `Backoffice` module.
    Open `http://www.learning-phalcon.localhost/backoffice/hashtag/add`, fill in the
    name for the hashtag, and click on the **Add** button, like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模板扩展了 `layout.volt` 并渲染了标签表单元素。此时，您应该能够从您的 `Backoffice` 模块中添加一个新的标签。打开 `http://www.learning-phalcon.localhost/backoffice/hashtag/add`，填写标签的名称，然后点击
    **添加** 按钮，如下所示：
- en: '![The View template for the add() method](img/B03522_07_04.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![add() 方法的视图模板](img/B03522_07_04.jpg)'
- en: If the hashtag was saved correctly, you will be redirected to a hashtags list
    page, otherwise an error message will be shown.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标签保存正确，您将被重定向到标签列表页面，否则将显示错误消息。
- en: Improving the database table structure and adding validation
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进数据库表结构并添加验证
- en: Now that we can add hashtags, we will face a problem, because we are able to
    add duplicated hashtags. To fix this, we will make a small change to our hashtags
    table and implement a new validator in the hashtag model.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够添加标签了，我们将面临一个问题，因为我们能够添加重复的标签。为了解决这个问题，我们将对我们的标签表进行一些小的修改，并在标签模型中实现一个新的验证器。
- en: 'The change that we will apply to this table is meant to make the `name` field
    unique. Do this by executing the following SQL query against your database:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对这个表进行的更改是为了使 `name` 字段唯一。通过在您的数据库上执行以下 SQL 查询来实现：
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you try to add a new hashtag, you will get an **Integrity constraint violation**
    error. This is good enough to avoid duplicates in your database, but you will
    need to implement a more human-friendly error by making use of `Phalcon\Mvc\Model\Validator\Uniqueness`.
    Open the hashtag model and append the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试添加一个新的标签，您将得到一个 **完整性约束违反** 错误。这足以避免数据库中的重复，但您需要通过使用 `Phalcon\Mvc\Model\Validator\Uniqueness`
    来实现一个更人性化的错误。打开标签模型，并添加以下代码：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This is it! If you try to add the same hashtag, you will get an error message
    saying **This hashtag already exists**. We can now continue with the edit/update
    methods for the hashtags.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是了！如果您尝试添加相同的标签，您将得到一个错误消息，说 **此标签已存在**。我们现在可以继续为标签的编辑/更新方法。
- en: Editing hashtags
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑标签
- en: 'Editing follows the same workflow as creating, except that we need to search
    for an existing object to edit. Let''s first create the `update()` method in `modules/Core/Managers/HashtagManager.php`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑遵循与创建相同的流程，除了我们需要搜索一个现有的对象来编辑。让我们首先在 `modules/Core/Managers/HashtagManager.php`
    中创建 `update()` 方法：
- en: '[PRE31]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As you can see, there are only two differences between `update()` and `create()`.
    One is that we searched for a hashtag based on its ID, and the second is that
    we changed the second parameter from `$this->save()` to `update`. The template
    is the same as that for the `create()` method. Create a new file named `edit.volt`
    in `modules/Backoffice/Views/Default/hashtag` with the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`update()` 和 `create()` 方法之间只有两个区别。一个是根据其 ID 搜索了一个标签，第二个是我们将第二个参数从 `$this->save()`
    改为了 `update`。模板与 `create()` 方法的模板相同。在 `modules/Backoffice/Views/Default/hashtag`
    目录下创建一个名为 `edit.volt` 的新文件，并包含以下代码：
- en: '[PRE32]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The only modification that we have done here is that we changed the `<h1>`
    title from `Add` to `Edit`. We can now switch to `HashtagController` and create
    two new methods, `editAction()` and `updateAction()`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的唯一修改是将 `<h1>` 标题从 `添加` 改为 `编辑`。我们现在可以切换到 `HashtagController` 并创建两个新的方法，`editAction()`
    和 `updateAction()`：
- en: '[PRE33]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In this method, we search for an object and output an error message if we can''t
    find it. If it is found, we save the ID in a persistent bag (when using persistent
    bags, data is temporarily saved in the session and removed the first time you
    get the variable) and then assign the object to the form to be rendered. The `updateAction()`
    method looks like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们搜索一个对象，如果我们找不到它，就输出一个错误消息。如果找到了，我们将 ID 保存到一个持久包中（当使用持久包时，数据临时保存在会话中，并在第一次获取变量时删除），然后将对象分配给要渲染的表单。`updateAction()`
    方法如下所示：
- en: '[PRE34]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The main difference between this method and the `createAction()` method is
    that we get the object ID from the persistent bag and search for it. The final
    step is to create a link from the listing page to the edit page. Update `list.volt`
    and replace the current `edit` link with this code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与`createAction()`方法相比，这种方法的主要区别在于我们从持久化包中获取对象ID并搜索它。最后一步是从列表页面创建到编辑页面的链接。更新`list.volt`并替换当前的`edit`链接为以下代码：
- en: '[PRE35]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This is it! You can now access `http://www.learning-phalcon.localhost/backoffice/hashtag/list`,
    click on the **Edit** button of an existing record, and try to edit (change the
    name).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在你可以访问`http://www.learning-phalcon.localhost/backoffice/hashtag/list`，点击现有记录的**编辑**按钮，并尝试编辑（更改名称）。
- en: Deleting hashtags
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除标签
- en: 'We can move forward and write the code for the last step in this process—deletion.
    Deletion is very simple and quick. We will use an intermediate page so that a
    user can confirm when they want to delete an object. Let''s start by writing the
    code for the template. Create a new file named `delete.volt` in the `hashtag`
    folder and write this code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续并编写此过程最后一步的代码——删除。删除非常简单且快捷。我们将使用一个中间页面，以便用户在想要删除对象时可以确认。让我们首先编写模板的代码。在`hashtag`文件夹中创建一个名为`delete.volt`的新文件，并编写以下代码：
- en: '[PRE36]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This template has a simple form. When a user clicks on the **Yes, delete**
    button, the actual deletion takes place. Switch to `HashtagController.php` and
    create a method named `deleteAction()`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板有一个简单的表单。当用户点击**是，删除**按钮时，实际删除操作发生。切换到`HashtagController.php`并创建一个名为`deleteAction()`的方法：
- en: '[PRE37]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'By default, the `deleteAction($id)` method only renders its template (`delete.volt`).
    When we confirm the deletion, we make a post and delete the record. If you haven''t
    already written the code for the `delete()` method from manager, here is what
    it should look like:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`deleteAction($id)`方法仅渲染其模板（`delete.volt`）。当我们确认删除时，我们进行一个POST请求并删除记录。如果你还没有为管理器编写`delete()`方法的代码，以下是它应该的样子：
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the final step, we need to update the `list.volt` template to create a link
    to the delete page. Open `hashtag/list.volt` and replace the `delete` link with
    this one:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步，我们需要更新`list.volt`模板以创建到删除页面的链接。打开`hashtag/list.volt`并将`delete`链接替换为以下链接：
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This is pretty much all there is to know about deleting. You can test it by
    clicking on the **Delete** link from the list. You should see exactly the same
    output as presented in the next screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 关于删除，这就是所有需要知道的内容。你可以通过点击列表中的**删除**链接来测试它。你应该看到与下一张截图完全相同的输出：
- en: '![Deleting hashtags](img/B03522_07_05.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![删除标签](img/B03522_07_05.jpg)'
- en: 'If you click on **Cancel**, you should be redirected to the listing page. If
    you click on **Yes, delete** and there are no errors, you will be redirected to
    the listing page and the following success message will be shown: **Item has been
    deleted successfully**. We will now continue with CRUD development for categories.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击**取消**，你应该被重定向到列表页面。如果你点击**是，删除**并且没有错误，你将被重定向到列表页面，并显示以下成功消息：**项目已成功删除**。我们现在将继续进行分类的CRUD开发。
- en: Category CRUD
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类CRUD
- en: 'When we created the architecture for category tables, we added a `category_translation`
    table. We will alter this table and add a unique index to avoid duplicates for
    the same country code and category ID. Execute the following query:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为分类表创建架构时，我们添加了一个`category_translation`表。我们将修改这个表并为相同的国家代码和分类ID添加一个唯一索引以避免重复。执行以下查询：
- en: '[PRE40]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We will add a new array to the `config/config.php` global configuration file
    that will hold information about `i18n`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`config/config.php`全局配置文件中添加一个新的数组，该数组将包含有关`i18n`的信息：
- en: '[PRE41]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The Category form
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分类表单
- en: 'We will now create the form for the add/edit categories. Create a new file
    in `modules/Core/Forms/`, name it `CategoryForm.php`, and write the following
    code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建添加/编辑分类的表单。在`modules/Core/Forms/`中创建一个新文件，命名为`CategoryForm.php`，并编写以下代码：
- en: '[PRE42]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In this form, we automatically add the required fields based on the available
    locales. If we edit a record, we need to retrieve the translations and assign
    the correct values to each field. We use the array naming style for easy processing.
    This means that the name of the generated field will look like this: `translations[en][category_translation_name]`.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在此表单中，我们根据可用的区域自动添加所需的字段。如果我们编辑一条记录，我们需要检索翻译并将正确的值分配给每个字段。我们使用数组命名风格以便于处理。这意味着生成的字段名称将看起来像这样：`translations[en][category_translation_name]`。
- en: 'Next, we need to assign the available locales to the view. Open `BaseController.php`
    from `modules/Backoffice/Controllers/` and append the following line to the `afterExecuteRoute()`
    method:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将可用的区域分配给视图。打开`modules/Backoffice/Controllers/`中的`BaseController.php`，并将以下行追加到`afterExecuteRoute()`方法中：
- en: '[PRE43]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Creating the Category templates
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建类别模板
- en: Let's see how our templates will look. Create a new folder in `modules/Backoffice/Views/Default`
    and name it `category`. In this new folder, create the `list.volt`, `add.volt`,
    `edit.volt`, and `delete.volt` template files. The following sections contain
    the code for each file.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的模板将是什么样子。在`modules/Backoffice/Views/Default`中创建一个新文件夹，命名为`category`。在这个新文件夹中，创建`list.volt`、`add.volt`、`edit.volt`和`delete.volt`模板文件。以下各节包含每个文件的代码。
- en: list.volt
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: list.volt
- en: 'Usually, listing is pretty much the same for any section. Here is the `list.volt`
    template file for `Category`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，任何部分的列表都是差不多的。以下是`Category`的`list.volt`模板文件：
- en: '[PRE44]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: add.volt
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: add.volt
- en: 'The only important thing to notice in this template is how we render the elements.
    We loop through the `locales` variable that we assigned from `BaseController.php`,
    and for each locale, we render the element:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模板中，唯一需要注意的重要事情是我们如何渲染元素。我们遍历从`BaseController.php`分配的`locales`变量，并为每个区域渲染元素：
- en: '[PRE45]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: edit.volt
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: edit.volt
- en: The `edit.volt` file is mostly the same as `add.volt`. We just need to change
    the form action to `{{ url('category/update') }}`. If you know that you're not
    going to develop a complex system, you can use the same file for add/edit. Personally,
    I prefer to use two separate files because it happened to me many times that the
    complexity of editing was very high compared to adding.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`edit.volt`文件基本上与`add.volt`相同。我们只需要更改表单操作为`{{ url(''category/update'') }}`。如果你知道你不会开发一个复杂的系统，你可以使用相同的文件进行添加/编辑。我个人更喜欢使用两个单独的文件，因为编辑的复杂性往往比添加要高得多。'
- en: delete.volt
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: delete.volt
- en: 'This is the simplest template, but for the same reason as for add/edit, I prefer
    to keep these files separate:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个最简单的模板，但出于与添加/编辑相同的原因，我更喜欢将这些文件分开：
- en: '[PRE46]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: 'If you want, and if you don''t have any complex operations, you can create
    a `delete.volt` file in the `common/` folder and include it from there for all
    sections. Here is an example of how you can do so:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，并且没有复杂的操作，你可以在`common/`文件夹中创建一个`delete.volt`文件，并从那里包含到所有部分。以下是如何做到这一点的示例：
- en: '[PRE47]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Creating the Category controller
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建类别控制器
- en: 'Now that we have the code for the templates, let''s create the controller.
    Switch to `modules/Backoffice/Controllers/` and create a new file named `CategoryController.php`
    with the following code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了模板的代码，让我们创建控制器。切换到`modules/Backoffice/Controllers/`，创建一个名为`CategoryController.php`的新文件，并包含以下代码：
- en: '[PRE48]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: If you check out the `updateAction()` and `createAction()` methods, you will
    notice that we use `$post_data` as it is. We can do it this way because the form
    fields have the array-style name, so we send the data in exactly the same format
    that the manager expects.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查`updateAction()`和`createAction()`方法，你会注意到我们直接使用`$post_data`。我们可以这样做，因为表单字段具有数组样式的名称，所以我们以管理器期望的格式发送数据。
- en: The `editAction()` method renders the form to edit a record. Notice the second
    parameter from `$manager->getForm()`. It is an array containing the `edit` key
    and the `true` value, which we use in `CategoryForm.php`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`editAction()`方法渲染编辑记录的表单。注意`$manager->getForm()`的第二个参数。它是一个包含`edit`键和`true`值的数组，我们在`CategoryForm.php`中使用它。'
- en: Creating the Category manager
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建类别管理器
- en: 'We are missing the manager. Create a new file named `CategoryManager.php` in
    `modules/Core/Managers/CategoryManager.php` with the following content:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们缺少管理器。在`modules/Core/Managers/CategoryManager.php`中创建一个名为`CategoryManager.php`的新文件，并包含以下内容：
- en: '[PRE49]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We need to enable this manager. Add the following code to `config/managers.php`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要启用此管理器。将以下代码添加到`config/managers.php`文件中：
- en: '[PRE50]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'That''s all! You can now access `http://www.learning-phalcon.localhost/backoffice/category/list`
    and you should see something similar to this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 那就结束了！现在你可以访问`http://www.learning-phalcon.localhost/backoffice/category/list`，你应该会看到类似以下的内容：
- en: '![Creating the Category manager](img/B03522_07_06.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![创建类别管理器](img/B03522_07_06.jpg)'
- en: 'If you don''t have any records, click on the **+ New** button to create a new
    category. This action will render the template for `add.volt` and you will see
    the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有任何记录，点击**+ 新建**按钮创建一个新的类别。此操作将渲染`add.volt`模板，你将看到以下截图：
- en: '![Creating the Category manager](img/B03522_07_07.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![创建类别管理器](img/B03522_07_07.jpg)'
- en: This is it! You can check out the source code for this chapter and play with
    the API with different categories. Note that the API documentation is always available
    in `docs/api/index.html`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你可以查看本章的源代码，并使用不同类别来尝试 API。请注意，API 文档始终可在 `docs/api/index.html` 中找到。
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we developed a functional CRUD for hashtags and categories.
    You learned how to make API calls and render form elements dynamically.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为标签和类别开发了一个功能性的 CRUD。你学习了如何进行 API 调用和动态渲染表单元素。
- en: In the next chapter, we will focus on completing the `Backoffice` module (developing
    CRUD for articles and users). We will continue to develop this module by writing
    code for the user and article CRUD.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于完成“后台”模块（为文章和用户开发 CRUD）。我们将通过编写用户和文章 CRUD 的代码来继续开发这个模块。
