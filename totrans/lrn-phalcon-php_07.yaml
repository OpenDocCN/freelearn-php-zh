- en: Chapter 7. The Backoffice Module (Part 1)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unless you are developing a static website, you will need a section/module
    where an administrator can add and manage content, such as articles, categories,
    and users. This is where `Backoffice` comes into the picture. In this chapter,
    we will develop parts of the **CRUD** (**Create**, **Read**, **Update**, and **Delete**)
    operations needed to administrate our website. We will also use part of the API
    that we developed in [Chapter 5](ch05.html "Chapter 5. The API Module"), *The
    API Module*. We will play more with forms and validations. We will cover this
    chapter in two parts, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: Hashtag CRUD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Category CRUD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the main layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start this chapter with some modifications to the main layout. Edit
    the main layout located at `modules/Backoffice/Views/Default/layout.volt` and
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that we are using `include` to include two new files: `topbar.volt`
    and `sidebar.volt`. In Volt, you can use the `include` method or the `partial()`
    method. The main difference between `partial` and `include` is that a `partial`
    method is included in the runtime but an `include` file compiles the content and
    returns it as part of the view that was included. I prefer `include` because it
    improves performance. If you need to assign variables to a file that will be included,
    you need to avoid the file extension. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about `include` at [http://docs.phalconphp.com/en/latest/reference/volt.html#include](http://docs.phalconphp.com/en/latest/reference/volt.html#include).
  prefs: []
  type: TYPE_NORMAL
- en: The code for the two new files is the same code that resided in the main layout
    earlier but with a small modification for the sidebar. Let's create the folder
    and the files. Go to `modules/Backoffice/Views/Default/` and create a new folder
    named `common`. In this new folder, create two new files named `sidebar.volt`
    and `topbar.volt` with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: common/topbar.volt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the code for the navigation bar that can be found at the top of the
    page. It contains a link to the home page and a link that is used to sign out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: common/sidebar.volt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the code for the sidebar (the left menu) and the code that
    contains the links to different controllers from our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There is something new about these two files. We are making use of a method
    named `url()`, the sidebar has incorporated some logic, and we notice that the
    dispatcher from DI is available without the need to assign it from a controller.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Volt has access to a number of methods. The `url()` method, which
    uses the URL service, is one of them. For a list of supported methods, you can
    check out the official documentation at [http://docs.phalconphp.com/en/latest/reference/volt.html#functions](http://docs.phalconphp.com/en/latest/reference/volt.html#functions).
    Sometimes, you need special functions that are not accessible from Volt. In such
    a case, you will need to extend the Volt engine and implement your own methods.
    How do you extend Volt?
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we can do it directly in the `voltService` DI, which can be found
    in `config/services.php`, for example, we want to add a method named `randomGen()`
    that generates a number of random strings, and it''s located in `modules/Core/Library/Util.php`.
    The `voltService` DI will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be able to call this method in Volt by using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method will generate five random strings.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about extending Volt at [http://docs.phalconphp.com/en/latest/reference/volt.html#extending-volt](http://docs.phalconphp.com/en/latest/reference/volt.html#extending-volt).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the sidebar file (`sidebar.volt`), we use `IF` statements to check the name
    of the current controller. The name is available through the dispatcher, and we
    assign it to a variable named `c_name`. The equivalent PHP code for our `IF` statements
    and `set` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, there are other ways of generating the code for this menu, but try
    to use Volt as much as you can, so that you get used to the syntax. Now that we
    have made a few modifications, let''s access `http://www.learning-phalcon.localhost/backoffice/`.
    If there are no errors, you should see the same things as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![common/sidebar.volt](img/B03522_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Cleaning the Core module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s also clean our `Core` module. We will use this folder as a collection
    of libraries instead of using it as a module. First, remove the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then remove these lines from `modules/Bootstrap.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have a clean core and our bootstrap will not register it as part of
    our modules any more. We will make modifications to `modules/Core/Controllers/BaseController.php`
    and `modules/Backoffice/Controllers/BaseController.php` so that this controller
    will extend `modules/Core/Controllers/BaseController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `modules/Api/Controllers/BaseController.php` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `modules/Backoffice/Controllers/BaseController.php` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These modifications help us reuse some code in all our modules.
  prefs: []
  type: TYPE_NORMAL
- en: Hashtag CRUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The reason we leave articles at the end is that when we implement it, we will
    need to assign hashtags, categories, and users to it. Before going further, we
    will make a slight modification to `layout.volt` and `BaseController`. We will
    remove this line from `BaseController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we will add this line to `layout.volt`, right before `{{` `assets.outputCss(''headerCss'')`
    `}}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We are doing this because the CSS for bootstrap is already minified, and if
    we do it again, the bootstrap fonts will not be rendered correctly. Remember to
    apply the same modification to `layout_simple.volt`.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 5](ch05.html "Chapter 5. The API Module"), *The API Module*, when
    we developed the API module, one of our tasks was to create the rest of the required
    models and managers. They included the hashtag manager and models. If you didn't
    do this, don't worry. You have it in the source code. Here, I will show you just
    the part of the code that we need in order to develop CRUD operations for hashtags.
    The first thing that you have to do is create the controller in the API module,
    if you haven't done so already.
  prefs: []
  type: TYPE_NORMAL
- en: The hashtag controller within the API module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the methods found in this controller follow the same logic:'
  prefs: []
  type: TYPE_NORMAL
- en: We retrieve an instance of the hashtag manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We get parameters from the request object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We call its specific API method and send the response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s write the code for this controller. We will start with `listAction()`.
    All the methods are written between the `try{}-catch(){}` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This method calls the hashtag manager and it reads the page number from the
    request. Next, we output the result of the `$manager->restGet()` method, which
    is an array of records with **pagination**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This method is mostly similar to `listAction()`, the difference being that
    it will only return one record. Notice that we bind the ID of the requested object
    to the `$manager->restGet()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This method calls the hashtag manager and it reads the page number and content
    from the request. If the body that we are posting is in the JSON format, we will
    read it with `getJsonRawBody()`. The `true` parameter is used to convert data
    into arrays. If we don''t have data, we throw an exception. Next, we output the
    result of the `$manager->restUpdate()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `deleteAction()` method simply calls `$manager->restDelete()` with the
    ID of the object as the argument. If the object is found, it will be deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This method is similar to `updateAction()`, but instead of updating an object,
    it creates it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The routing is missing, so we are going to add it to `modules/Api/Config.routing.php`.
    We will create a new routing group for hashtags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is okay, you can now insert a few records into the hashtag table
    and call the API to get the records by using the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command line should be similar to what is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The hashtag controller within the API module](img/B03522_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This cURL command makes a request to `/api/v1/hashtags`. The `-H` option is
    used to send header information; in our case, we send the token and the API key.
  prefs: []
  type: TYPE_NORMAL
- en: A common method to reduce code duplication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a method in `modules/Core/Controllers/BaseController.php` that
    will help us get data from our API. This method will be available within the controllers
    that extend it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get the data, we just need to provide the URL and extra parameters, if needed.
    With the help of Phalcon''s built-in cURL provider, we make the call. Next, we
    create a hashtag controller in the `Backoffice` module. It will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the only thing that we do here is call the API's URL, and it
    returns an array of paginated items.
  prefs: []
  type: TYPE_NORMAL
- en: The layout structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating the layout for this listing is quite simple. Go to `modules/Backoffice/Views/Default`
    and create a new folder named `hashtag`. In this new folder, create a new file
    named `list.volt` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Before ending the block of the code for the list template, we include another
    template named `paginator`. This is the paginator that will help us navigate through
    records. Create a file named `paginator.volt` in `modules/Backoffce/Views/Default/common/`
    and write this code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding code makes use of the paginator variables that are already available
    (see [http://docs.phalconphp.com/en/latest/reference/pagination.html](http://docs.phalconphp.com/en/latest/reference/pagination.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can authenticate and access the hashtags listing at `http://www.learning-phalcon.localhost/backoffice/hashtag/list`.
    You should be able to see something similar to what is shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The layout structure](img/B03522_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's continue with the rest of the actions (create, delete, and update). There
    are several ways to achieve this, but we will *not* make use of our API for create
    and update, mainly because of the time needed to cover all the aspects, and also
    because doing it the "old normal way" is faster. However, you can play with the
    idea and try to migrate these two actions to be API-driven.
  prefs: []
  type: TYPE_NORMAL
- en: The hashtag form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For create and update, I like to use forms because it''s easier to maintain
    the code and also to validate it. We will start with the `create` action by writing
    the code for the create form (the same form will be used for update). Switch to
    `modules/Core/Forms` and create a new file named `HashtagForm.php` with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Our new form is quite simple. We have three elements: the name of the hashtag,
    a `csrf` field, and a **Submit** button. We validate the name and the `csrf` field
    with the help of two validators: `PresenceOf` and `Identical`.'
  prefs: []
  type: TYPE_NORMAL
- en: The hashtag controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We continue by writing the code for the `create` action and for the template.
    Open `modules/Backoffice/Controllers/HashtagController.php` and add these two
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `addAction()` method simply renders the form we just created. The processes
    of creation and validation take place in the `createAction()` method. This method
    accepts only `POST` data, as you can see in the first two lines. When you're working
    on a big project, you might want to use custom routes, just as we did in the API
    module.
  prefs: []
  type: TYPE_NORMAL
- en: The hashtag manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might notice a new method named `getForm()` in the hashtag manager. This
    method returns an instance of `HashtagForm` and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have already created the hashtag manager, you should have a `create()`
    method similar to this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The View template for the add() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also need to write the code for the template. Create a new file named `add.volt`
    in `modules/Backoffice/Views/Default/hashtag` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Our template extends `layout.volt` and renders the hashtag form elements. At
    this point, you should be able to add a new hashtag from your `Backoffice` module.
    Open `http://www.learning-phalcon.localhost/backoffice/hashtag/add`, fill in the
    name for the hashtag, and click on the **Add** button, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The View template for the add() method](img/B03522_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the hashtag was saved correctly, you will be redirected to a hashtags list
    page, otherwise an error message will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the database table structure and adding validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we can add hashtags, we will face a problem, because we are able to
    add duplicated hashtags. To fix this, we will make a small change to our hashtags
    table and implement a new validator in the hashtag model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The change that we will apply to this table is meant to make the `name` field
    unique. Do this by executing the following SQL query against your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you try to add a new hashtag, you will get an **Integrity constraint violation**
    error. This is good enough to avoid duplicates in your database, but you will
    need to implement a more human-friendly error by making use of `Phalcon\Mvc\Model\Validator\Uniqueness`.
    Open the hashtag model and append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This is it! If you try to add the same hashtag, you will get an error message
    saying **This hashtag already exists**. We can now continue with the edit/update
    methods for the hashtags.
  prefs: []
  type: TYPE_NORMAL
- en: Editing hashtags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Editing follows the same workflow as creating, except that we need to search
    for an existing object to edit. Let''s first create the `update()` method in `modules/Core/Managers/HashtagManager.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there are only two differences between `update()` and `create()`.
    One is that we searched for a hashtag based on its ID, and the second is that
    we changed the second parameter from `$this->save()` to `update`. The template
    is the same as that for the `create()` method. Create a new file named `edit.volt`
    in `modules/Backoffice/Views/Default/hashtag` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The only modification that we have done here is that we changed the `<h1>`
    title from `Add` to `Edit`. We can now switch to `HashtagController` and create
    two new methods, `editAction()` and `updateAction()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In this method, we search for an object and output an error message if we can''t
    find it. If it is found, we save the ID in a persistent bag (when using persistent
    bags, data is temporarily saved in the session and removed the first time you
    get the variable) and then assign the object to the form to be rendered. The `updateAction()`
    method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The main difference between this method and the `createAction()` method is
    that we get the object ID from the persistent bag and search for it. The final
    step is to create a link from the listing page to the edit page. Update `list.volt`
    and replace the current `edit` link with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This is it! You can now access `http://www.learning-phalcon.localhost/backoffice/hashtag/list`,
    click on the **Edit** button of an existing record, and try to edit (change the
    name).
  prefs: []
  type: TYPE_NORMAL
- en: Deleting hashtags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can move forward and write the code for the last step in this process—deletion.
    Deletion is very simple and quick. We will use an intermediate page so that a
    user can confirm when they want to delete an object. Let''s start by writing the
    code for the template. Create a new file named `delete.volt` in the `hashtag`
    folder and write this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This template has a simple form. When a user clicks on the **Yes, delete**
    button, the actual deletion takes place. Switch to `HashtagController.php` and
    create a method named `deleteAction()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the `deleteAction($id)` method only renders its template (`delete.volt`).
    When we confirm the deletion, we make a post and delete the record. If you haven''t
    already written the code for the `delete()` method from manager, here is what
    it should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In the final step, we need to update the `list.volt` template to create a link
    to the delete page. Open `hashtag/list.volt` and replace the `delete` link with
    this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This is pretty much all there is to know about deleting. You can test it by
    clicking on the **Delete** link from the list. You should see exactly the same
    output as presented in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deleting hashtags](img/B03522_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on **Cancel**, you should be redirected to the listing page. If
    you click on **Yes, delete** and there are no errors, you will be redirected to
    the listing page and the following success message will be shown: **Item has been
    deleted successfully**. We will now continue with CRUD development for categories.'
  prefs: []
  type: TYPE_NORMAL
- en: Category CRUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we created the architecture for category tables, we added a `category_translation`
    table. We will alter this table and add a unique index to avoid duplicates for
    the same country code and category ID. Execute the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add a new array to the `config/config.php` global configuration file
    that will hold information about `i18n`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The Category form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now create the form for the add/edit categories. Create a new file
    in `modules/Core/Forms/`, name it `CategoryForm.php`, and write the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In this form, we automatically add the required fields based on the available
    locales. If we edit a record, we need to retrieve the translations and assign
    the correct values to each field. We use the array naming style for easy processing.
    This means that the name of the generated field will look like this: `translations[en][category_translation_name]`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to assign the available locales to the view. Open `BaseController.php`
    from `modules/Backoffice/Controllers/` and append the following line to the `afterExecuteRoute()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Category templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's see how our templates will look. Create a new folder in `modules/Backoffice/Views/Default`
    and name it `category`. In this new folder, create the `list.volt`, `add.volt`,
    `edit.volt`, and `delete.volt` template files. The following sections contain
    the code for each file.
  prefs: []
  type: TYPE_NORMAL
- en: list.volt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Usually, listing is pretty much the same for any section. Here is the `list.volt`
    template file for `Category`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: add.volt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The only important thing to notice in this template is how we render the elements.
    We loop through the `locales` variable that we assigned from `BaseController.php`,
    and for each locale, we render the element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: edit.volt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `edit.volt` file is mostly the same as `add.volt`. We just need to change
    the form action to `{{ url('category/update') }}`. If you know that you're not
    going to develop a complex system, you can use the same file for add/edit. Personally,
    I prefer to use two separate files because it happened to me many times that the
    complexity of editing was very high compared to adding.
  prefs: []
  type: TYPE_NORMAL
- en: delete.volt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the simplest template, but for the same reason as for add/edit, I prefer
    to keep these files separate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want, and if you don''t have any complex operations, you can create
    a `delete.volt` file in the `common/` folder and include it from there for all
    sections. Here is an example of how you can do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Category controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the code for the templates, let''s create the controller.
    Switch to `modules/Backoffice/Controllers/` and create a new file named `CategoryController.php`
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: If you check out the `updateAction()` and `createAction()` methods, you will
    notice that we use `$post_data` as it is. We can do it this way because the form
    fields have the array-style name, so we send the data in exactly the same format
    that the manager expects.
  prefs: []
  type: TYPE_NORMAL
- en: The `editAction()` method renders the form to edit a record. Notice the second
    parameter from `$manager->getForm()`. It is an array containing the `edit` key
    and the `true` value, which we use in `CategoryForm.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Category manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are missing the manager. Create a new file named `CategoryManager.php` in
    `modules/Core/Managers/CategoryManager.php` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to enable this manager. Add the following code to `config/managers.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s all! You can now access `http://www.learning-phalcon.localhost/backoffice/category/list`
    and you should see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Category manager](img/B03522_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you don''t have any records, click on the **+ New** button to create a new
    category. This action will render the template for `add.volt` and you will see
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Category manager](img/B03522_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is it! You can check out the source code for this chapter and play with
    the API with different categories. Note that the API documentation is always available
    in `docs/api/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we developed a functional CRUD for hashtags and categories.
    You learned how to make API calls and render form elements dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on completing the `Backoffice` module (developing
    CRUD for articles and users). We will continue to develop this module by writing
    code for the user and article CRUD.
  prefs: []
  type: TYPE_NORMAL
