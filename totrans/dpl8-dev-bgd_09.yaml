- en: Chapter 9. Advanced Views Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*This chapter will give you an in-depth introduction to the Views module and
    introduce some of the Views plugin architecture. We will dive into some of the
    advanced features of Views available in the Views UI, including an introduction
    to taxonomy-based Views. We will be developing a Views style plugin to display
    our new Recipes view as semantic tabs. We will also contribute Views semantic
    tabs module to Drupal as a sandbox project.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Views configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views plugin development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Drupal sandbox project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views revisited – advanced configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last few chapters, Custom Content Types and an Introduction to Module
    Development, we had a quick introduction to Views, and saw how easy it is to create
    a view with the new Views wizard's user interface. The new wizard-based creation
    for new views makes it easy to get started with Views, but does not include many
    of the more advanced Views configuration options. Even on the standard Views edit
    page, advanced configuration options are hidden away, so as not to overwhelm those
    who are new to Views. The beginning of this chapter will explore many of these
    advanced configuration options available with Views. Views configuration can get
    complex pretty quickly. So, in a way, advanced Views configuration is not any
    less complex than some of the PHP code we have written.
  prefs: []
  type: TYPE_NORMAL
- en: Random top rated recipe block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The home page is still a bit plain and boring. We are going to use Views to
    create a block that will randomly showcase one of the top-rated recipes on the
    site. This will involve using Views filters and sort settings.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – building a random top rated recipe block with Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to go beyond the basic Views wizard view creation user interface
    and learn a few more advanced features and configuration of Views.
  prefs: []
  type: TYPE_NORMAL
- en: Open our d8dev site in your browser, click on the **Structure** link in the
    **Admin** toolbar, and click on the **Views** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add new view** link at the top of the **Views** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Random Top Rated Recipe` as the **View name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Recipe** for the **of type** options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create a block** checkbox.![Time for action – building a random
    top rated recipe block with Views](img/4659_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Save and edit** button, as we want to configure some more
    advanced options that are not available as part of the basic block creation wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are going to add the Recipe content fields that we want to display in
    this block. Remember, this block is going to be displayed on our d8dev site's
    front page, so we want to make it visually appealing. Note that the **Title**
    field is already included by default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the **Add** button for **FIELDS**, search for `image`, and select
    the checkbox for **Content: image** and click on the **Apply (all displays)**
    button. Note that Views shows you what node or content types the fields are associated
    with.![Time for action – building a random top rated recipe block with Views](img/4659_09_02.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Configure field** settings for the image field, select **Medium (220*220)**
    as the **Image style** and click on the **Apply (all displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add** button for **FIELDS**, search for `Comment count`, and
    select the checkbox for **Comment Statistics: Comment count**. Then click on the
    **Apply(all displays)** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Configure field** settings for **Comment count**, select **Total:**
    as the **Prefix** and **Reviews** as the **Suffix** value. In the **STYLE SETTINGS**
    section, check the **Customize field HTML** checkbox, select **STRONG** as the
    **HTML element** field, and click on the **Apply(all displays)** button.![Time
    for action – building a random top rated recipe block with Views](img/4659_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in the **SORT CRITERIA** section, click on the **Add** button, search
    for `Comment count`, and select the checkbox for **Comment Statistics: Comment
    count**. Then click on the **Apply(all displays)** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Configure sort criteria** settings for **Comment count**, select **Sort
    descending** for the **Order** field and click on the **Apply(all displays)**
    button.![Time for action – building a random top rated recipe block with Views](img/4659_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the **SORT CRITERIA** section, click on the **Add** button, search
    for `Random`, and select the checkbox for **Random**. Then click on the **Apply(all
    displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next screen, click on the **Apply(all displays)** button. Then save the
    view and we can see a preview of this block as the following screenshot:![Time
    for action – building a random top rated recipe block with Views](img/4659_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now your Views configuration should look similar to the following screenshot:![Time
    for action – building a random top rated recipe block with Views](img/4659_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to configure this new Views-based block to show up on the front
    page. Click on **Structure** in the **Admin** toolbar and click on the **Block
    Layout** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down towards **Sidebar first region** and click on the **Place block**
    link. In the popup, search for `Random top` and click on the **Place block** button
    for the **Random Top Rated Recipe** block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next screen, check the **Override title** checkbox, enter `Top Recipe`
    as **Title**, and click on the **Save block** button.![Time for action – building
    a random top rated recipe block with Views](img/4659_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used Views and leveraged some advanced configuration options to display the
    image and title of the top most recent recipes and also learned how easy it can
    be to make our d8dev site more interesting by adding a dynamic Views-based block.
  prefs: []
  type: TYPE_NORMAL
- en: Taxonomy-based View with tabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to add another Views-based block to our front
    page. However, this will be a Taxonomy-based View instead of the Content-based
    Views that we have created so far. Taxonomy refers to the organization of information.
    As we learned in the previous chapter, taxonomy is a field-able entity. The Taxonomy
    module is a core module and it allows you to create vocabularies of terms to associate
    to other entity types so that they can be organized. So before that, we need to
    create a view with Taxonomy vocabulary with terms and associate those terms to
    our recipe content. We are going to add a vocabulary for organizing recipes by
    type of cuisine.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a cuisine vocabulary to organize recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can create a Taxonomy-based view, we need to create a Drupal Taxonomy
    vocabulary:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our d8dev site in your browser, click on the **Structure** link in the
    **Admin** toolbar, and click on the **Taxonomy** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Taxonomy configuration** page, click on the **Add vocabulary** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Type of Cuisine` as the **Name** input and click on the **Save** button.
    Now we will add some terms for our new vocabulary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add term** link for our new **Type of Cuisine** vocabulary (make
    sure you are in the `admin/structure/taxonomy/manage/type_of_cuisine/overview
    page`):![Time for action – creating a cuisine vocabulary to organize recipes](img/4659_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `American` as **Name** of our first term and click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the process and add the terms `Asian` and `Thai`. Now we are going to
    add a taxonomy field to our Recipe content type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Structure** link in the **Admin** toolbar, click on the link
    for **Content types**, and click on the **Manage fields** link for our Recipe
    content type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add field** link. In the next screen, select **Taxonomy term**
    as **Add a new field** and enter `recipeCuisine` as **Label**. Click on the **Save
    and continue** button.![Time for action – creating a cuisine vocabulary to organize
    recipes](img/4659_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next screen, select **Unlimited** as **Allowed number of values** and
    click on the **Save field settings** button. In the next screen, check **Type
    of Cuisine** under **REFERENCE TYPE** | **Vocabularies** and click on the **Save
    settings** button.![Time for action – creating a cuisine vocabulary to organize
    recipes](img/4659_09_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Content** link in the **Admin** bar, then click on the edit link
    for one of the recipes, scroll down to our new **recipeCuisine** field, select
    American, and click on the **Save** button. Repeat the process for selecting Asian
    for the Cashew Chicken with Edamame, and Thai and Asian for the other recipes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We got a quick introduction to Drupal Taxonomies and created a vocabulary to
    organize the d8dev recipes by the types of cuisine.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have added a new vocabulary for associating Recipe content to the
    types of cuisine, we are ready to use this in a new Views-based block. We are
    going to create a Views-based block that displays our d8dev site's newest recipe
    entries by cuisine type. In addition to that, we are going to sort the list of
    recipes by the cuisine type with the least number of associated recipes. This
    will help us to promote cuisine types with fewer recipes. Finally, we want a tab-based
    user interface with a tab for each cuisine type, and the contents of that tab
    to be the five most recent recipes for that cuisine type. Let's go through step
    by step.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a Recipes by cuisine type Views block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created a new vocabulary and associated it to our Recipe content type.
    Now we will learn how to use a custom vocabulary with a view.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Structure** link in the **Admin** toolbar, click on the **Views**
    link, and click on the **Add new view** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, enter `Recipes by Cuisine` as the **View** name, select **Taxonomy
    terms** for the **Show** select list, and select **Type of Cuisine** for the of
    **Type** select list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create a block** checkbox under the **Block settings** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the remaining default settings as they are and click on the **Save and
    edit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Views automatically adds the Taxonomy term **Name** field, but we also want
    to display the most recent recipes associated to each of those cuisine terms.
    However, if you click on the **Add** button for **FIELDS**, you will note that
    there is no **Content** field available. We will use the Views **RELATIONSHIPS**
    configuration to add a relationship between the Recipe content and the taxonomy
    terms we are showing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button for **RELATIONSHIPS**, check the **Content using
    field_recipecuisine** relationship, and then click on the **Apply(all displays)**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, leave the remaining default settings as they are and click
    on the **Apply(all displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **FIELDS add** button; there are content fields available.
    Type `title` into the **Search** input, select it, and click on the **Apply(all
    displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that there is a **Relationship** select list for the field configuration.
    All the content fields on a taxonomy terms-based view require a relationship.
    So this will default to the first relationship listed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating a Recipes by cuisine type Views block](img/4659_09_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Leave the **Create a label** checkbox unchecked, as we only want to display
    the title itself. We will leave the **Link to this Content…** checkbox checked,
    so that the users have the ability to navigate to the full recipe. Click on the
    **Apply (all displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now if you scroll down to the bottom of the Views configuration page, you will
    see a preview of this Views output and you will see that we are displaying cuisine
    type term names and recipe titles, but we want to group the recipe titles by term
    names.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, under the **FORMAT** section, click on the **Settings** link for Format
    and then select **Taxonomy term: Name** for the **Grouping field Nr.1** field
    and click on the **Apply** button![Time for action – creating a Recipes by cuisine
    type Views block](img/4659_09_12.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a preview of this View's output and you will see that we are displaying
    cuisine type term names and recipe titles, as we grouped the recipe titles by
    term names and term names were displaying twice. So we will hide them in the **FIELDS**
    settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on the **Taxonomy term: Name** link and check the **Exclude from
    display** checkbox, as we only want to display the content titles. Then click
    on the **Apply (all displays)** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will add a sort criterion to display the grouped terms with the most
    recent recipes first. Click on the **Add** button for **SORT CRITERIA**, type
    `Authored on` in the **Search** field, select the **Authored on** field, and then
    click on the **Apply (all displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the next screen, select **Sort descending** for the **Order** field and
    click on the **Apply (all displays)** button. The preview for this View should
    now look similar to the following screenshot. Note: the following content is Devel
    module generated content.![Time for action – creating a Recipes by cuisine type
    Views block](img/4659_09_13.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Save** button for this View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a Views-based block of recipes displayed by the cuisine type name.
    Although everything appears fine on the surface, there is a problem with the groupings
    and the limits for our new view. We wanted to display three different cuisines
    and five recipes per cuisine type, but the view we created is only limiting the
    total number of rows being returned. If we were to add one more recipe, then that
    recipe would be displayed. However, the sixth-oldest recipe would drop off, and
    if the newly added recipe happened to be of type Thai or Asian, then the American
    grouping would disappear. So, we would only be left with two groups of cuisine
    types. It turns out that this is a rather complex problem to solve with SQL, but
    there is a contrib module that will allow us to get the exact results that we
    want.
  prefs: []
  type: TYPE_NORMAL
- en: The Views Field View module ([http://drupal.org/project/views_field_view](http://drupal.org/project/views_field_view))
    enables a Global Views field that allows you to embed another View as a field
    of a parent view, sort of like a set of Russian dolls. For actual production use,
    however, do note that there are some pretty serious performance implications for
    using this approach, as there will be a total of four SQL queries instead of one.
    So you definitely want to make sure you understand Views caching and Drupal caching
    in general before you use an approach like this on a production site.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – installing and using the Views Field View module for our Recipe
    by Cuisine Type View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By installing and using the Views Field View module, we are going to learn how
    there are a number of Views related contrib modules that extend the features and
    capabilities of the Views module.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to install the View Field View module. Open the Terminal (Mac
    OS X) or Command Prompt (Windows) application and go to the root directory of
    our d8dev site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use Drush to download and enable the Views Field View module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, before we modify our Recipes by Cuisine view, you need to understand how
    the Views Field View functionality works. We will remove the recipe title field
    and add a **Global: View** field. The **Global: View** field allows us to specify
    another view to use as the contents of the field, instead of a field on our Recipe
    content type. It allows us to pass any other field available for our view as an
    argument to pass as a contextual filter to the other view being used as the contents
    of the field. I know it sounds pretty complicated, and that is why we are going
    to walk through it together, nice and slow. To start with, we need to create a
    view to use as the Views Field View, where it will list out the recipes ordered
    by post date in descending order, so we will use the Views Field View field to
    display the contents of our Recipe List view inside the rows of our Recipes by
    Cuisine view.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Structure** link in the **Admin** toolbar, then click on the
    **Views** link, and click on the **Edit** button for our random top rated recipe
    View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the next page, click on the **Add** button and then click on the
    **Block** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Field** link and search for node id in the input search box.
    Check the **Exclude from display** checkbox and click on the **Apply (this displays)**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again click on the **Add Field** link and search for view in the input search
    box. On the next screen, in the **VIEW SETTINGS** section, select **Recipe likes
    count** as **View**, **Block** as **Display**, and `{{ fields.nid }}` as **Contextual
    filters**. Click on the **Apply (this displays)** button.![Time for action – installing
    and using the Views Field View module for our Recipe by Cuisine Type View](img/4659_09_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in the **ADVANCED** section, click on the **Add** link for **Contextual
    filters**. In the popup, search for the node ID keywords. Now check the **Node
    ID** checkbox and click on the **Apply (this displays)** button. In the next screen,
    leave the settings as default and click on the **Apply and continue** button.
    Note: make sure you selected **This block (override)** at the top.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, under **WHEN THE FILTER VALUE IS NOT AVAILABLE** section,
    select the **Provide default value** radio button. Select **Type** as **Content
    ID from URL** and click on the **Apply(this displays)** button at the bottom.![Time
    for action – installing and using the Views Field View module for our Recipe by
    Cuisine Type View](img/4659_09_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then save the view and we can see a preview of this block as per the following
    screenshot:![Time for action – installing and using the Views Field View module
    for our Recipe by Cuisine Type View](img/4659_09_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Structure** link in the **Admin** toolbar, then click on
    the **Views** link, and click on the Edit button for our Recipes by Cuisine View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the next page, click on the **Add** button and then click on the
    **Block** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Field** link and search for node ID in the input search box.
    Check the **Exclude from display** checkbox and click on the **Apply (this displays)**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again click on the **Add Field** link and search for view in the input search
    box. On the next screen, in the **VIEW SETTINGS** section, select **Random Top
    Rated Recipe** as **View**, **Block 2** as **Display**, and `{{ raw_fields.nid
    }}` as **Contextual filters**. Click on the **Apply (this displays)** button.![Time
    for action – installing and using the Views Field View module for our Recipe by
    Cuisine Type View](img/4659_09_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then save the view and we can see preview of this block as per the following
    screenshot:![Time for action – installing and using the Views Field View module
    for our Recipe by Cuisine Type View](img/4659_09_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to configure this new Views-based block to show up on the front
    page. Click on **Structure** in the **Admin** toolbar and click on the **Block
    Layout** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down towards **Sidebar first Region** and click on the **Place block**
    link. In the popup, search for `Recipes by` and click on the **Place block** button
    for the Recipes by Cuisine block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the help of the Views Field View module, we created a view that displays
    our recipe content.
  prefs: []
  type: TYPE_NORMAL
- en: Tabbed Views display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make the Recipes by Cuisine and to make the block more visually
    appealing, and appear more organized in the viewable area of our d8dev front page,
    we are going to display each cuisine type as a tab, and have recipes for the active
    tab. We are going to use a JavaScript-based approach for displaying our groups
    of recipes by cuisine in a tabbed interface. Take a look at the jQuery UI tabs
    page ([http://jqueryui.com/tabs/](http://jqueryui.com/tabs/)) and you will see
    an example of how we can display Recipe by Cuisine in a tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tabbed Views display](img/4659_09_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The reason I am pointing out jQuery based UI tabs is because Drupal 8 includes
    the JavaScript library. So, it makes a lot of sense to use a JavaScript widget
    for the tab that is already available to us as part of the core Drupal 8 install.
    However, the markup that is currently being generated for our Recipe by Cuisine
    View will be fairly difficult to integrate with the jQuery UI tabs, because jQuery
    UI tabs are intended to handle the tabs and the tab content in separate HTML containers.
    Take a look at the example markup from the jQuery UI tabs page in the previous
    screenshot to see what I mean.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The markup that Views is generating for our Recipes by Cuisine is more semantic.
    It keeps the group titles with the associated content (Views actually generates
    a lot more markup than this, so take a look at the source output for our Recipes
    by Cuisine View in your browser). Basically, a simplified version of what Views
    generates for the default format of HTML list is closer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, if we want to use jQuery UI tabs then we have to modify the markup
    that Views is generating for our Recipes by Cuisine View. A Views style plugin
    would allow us to generate exactly the type of markup that is typically used with
    jQuery UI tabs. However, since we are going to write a custom plugin for Views
    anyways, why write one for creating tabs that isn't very semantic and is limited
    in regards to progressive enhancement?
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – developing a Views style plugin for semantic tabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to create a new module for our introduction to plugins for Views.
    And we will contribute it to Drupal in the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: Open PhpStorm and navigate to the `/modules/custom` folder in our d8dev project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `views_semantic_tabs`—the name of our new module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `views_semantic_tabs.info.yml` and enter the following
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In Drupal 7, we use the `hook_views_plugins()` hook function to register new
    plugins. Drupal 8, on the other hand, depends on annotations and auto-loading
    to discover any plugins such as blocks and views styles. The auto-loading concept
    allows us to put a plugin file in a predefined directory, and Views/Blocks find
    it as needed. The metadata of any plugin specified inside the plugin's file using
    comment block, is called as annotations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To find our style plugin by views, we have to place it in the `src/Plugin/views/style`
    folder which is inside our custom module `modules/views_semantic_tabs` directory.
    So here we wish to build semantic tabs style plugin that displays jQuery UI tabs
    based style.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file `ViewsSemanticTabs.php` inside the `/views_semantic_tabs/src/Plugin/views/style`
    directory. The skeleton of the semantic tabs style plugin looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our class `ViewsSemanticTabs` needs to inherit from the `StylePluginBase` class,
    and therefore we are using a keyword. Also, we are using `FormStateInterface`
    to user forms inside our class. This file is in the correct location and we have
    an annotation above the class definition. This annotation was giving the ID of
    the style, theme, and display types. So views will find this plugin and it will
    be available for selection in the views format style settings. The protected `$usesRowPlugin`
    property is necessary to this plugin which lets us select whether we would like
    to display fields or rendered content in the view display. The protected `$usesRowClass`
    property also required for our case which does the style plugin support custom
    CSS class for the rows. The protected `defineOptions()` method is used to define
    default options which will show in the settings form. And the protected `buildOptionsForm()`
    method is used to define any custom form values which will show in the settings
    form. `parent::buildOptionsForm($form, $form_state);` allows us to access the
    output of the class we are extending and manipulate that output. We are making
    the `$form['group']` field required since the views HTML render output requires
    a grouping field name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The output of views will live in the template file and the template file will
    need to be placed inside the `templates` directory with `views-semantic-tabs-format.html.twig`
    as the filename inside our module. We don't need to implement the `hook_theme()`
    hook function because it will be automatically registered based on the specified
    theme name in the annotation `views_semantic_tabs_format`. The template filename
    is derived from the theme name by replacing the underscores with hyphens and followed
    by the `html.twig` extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, we need to understand that this template will be used for each tab. We
    had to wrap the group field values as a separate set which are part of `<li>`
    tags in `<ul>`. We are wrapping rows data which is the content for the tab and
    wrapped with the `div` tag with unique `tabs- id` attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The variables in the template is provided by views. Preparing variables for
    a `twig` file can be done with the `template_preprocess_views_semantic_tabs_format()`
    function in the `.module` file. This function name is defined based on the specified
    name in the annotation `views_semantic_tabs_format`. Create a new file `views_semantic_tabs.module`
    inside the `/modules/views_semantic_tabs` directory. The skeleton of the semantic
    tabs style plugin looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are two functions, `template_preprocess_views_semantic_tabs_format()`
    and `hook_help`. At the very top of our `template_preprocess_views_semantic_tabs_format()`
    function, we are getting the required handler, rows, fields, and style properties
    from the `$variables` variable. Then we are attaching `jquery.ui.tabs`, jQuery
    core jQuery libraries to the `$variable`, because it requires both jQuery libraries.
    And also we attaching the custom `views-semantic-tabs` library which has custom
    JS file where we will define jQuery code to work tabs. In the next lines, we are
    building rows data which is a part of tab content. And we declared the help function
    to define simple documentation about this module. For more information about the
    `hook_help()` function, go to [https://api.drupal.org/api/drupal/core!modules!help!help.api.php/function/hook_help/8](https://api.drupal.org/api/drupal/core!modules!help!help.api.php/function/hook_help/8).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, right-click on the new theme folder, create a new file named `views_semantic_tabs.libraries.yml`,
    and add the following code to that file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the library file which we attached in the `template_preprocess_views_semantic_tabs_format()`
    function in the last step. This defines the `views-semantic-tabs.js` file which
    has tabs jQuery code to work jQuery tabs as per the rendered HTML structure defined
    in the twig file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, right-click on the module folder and create a new folder named `js`.
    Again, right click on the `js` folder and create a file named `views-semantic-tabs.js`.
    Add the following code to that file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note how the entire block of JavaScript code is wrapped with `(function ($)
    { ... })(jQuery);`. This is a new JavaScript namespacing feature of Drupal 7 and
    Drupal 8, and allows other JavaScript libraries to be used with Drupal with less
    likelihood of conflicts. `$( ".views-semantic-tabs" ).tabs();` is the code which
    makes our twig rendered HTML code work as tabs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have completed all the code, our `views_semantic_tabs` folder should
    look similar to the following screenshot:![Time for action – developing a Views
    style plugin for semantic tabs](img/4659_09_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are ready to test our new Views style plugin by applying it to our Recipes
    by Cuisine view, but first we need to enable our new module. We could use Drush
    for this, but I would like to enable custom modules in the browser so that I can
    see my new module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open our d8dev site in your browser, click on the **Extend** link in the **Admin**
    toolbar, and scroll down to the **Views** section of the modules or search for
    `views semantic` in the search input box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see our new Views Semantic Tabs module listed along with the other
    Views modules that we had installed.![Time for action – developing a Views style
    plugin for semantic tabs](img/4659_09_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the checkbox to enable our new module and click on the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Home** link in the **Admin** toolbar, then click on the
    **Contextual links** button for our Recipes by Cuisine view, and click on the
    **Edit view** link.![Time for action – developing a Views style plugin for semantic
    tabs](img/4659_09_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under **FORMAT**, click on the **Unformatted list** link. The view style settings
    form now includes our new Views style plugin: **Semantic tabs**.![Time for action
    – developing a Views style plugin for semantic tabs](img/4659_09_23.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Semantic tabs** style and click on the **Apply (this display)**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, on the **Style options** screen, select **Taxonomy term: Name** as **Grouping
    field** and click on the **Apply** button. Note that **Grouping field** is required
    as we specified in our plugin class.![Time for action – developing a Views style
    plugin for semantic tabs](img/4659_09_24.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Save** button to save our changes to the view. You should
    now have a Recipe by Cuisine view block that looks similar to the following screenshot:![Time
    for action – developing a Views style plugin for semantic tabs](img/4659_09_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although this example was fairly complex, the actual code is pretty straightforward
    once you get your head wrapped around some of the development concepts for Views
    plugins. We were able to create a custom Views style plugin that will enhance
    the display of content on our d8dev site.
  prefs: []
  type: TYPE_NORMAL
- en: Time for another Recipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is a little bit of spicy Americana for you—Kurt's Classic Chili. Add it
    to the d8dev site and checkout the Recipes by Cuisine view from the previous section
    (the secret ingredient is the bay leaves).
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for another Recipe](img/4659_09_25_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**name**: Kurt''s Classic Chili'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**description**: There is nothing like a warm bowl of chili on a cold winter
    day.The homemade chili powder really gives this dish a distinct and delicious
    flavor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**recipeYield**: Eight servings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**prepTime**: 30 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cookTime**: 60 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ingredients**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One pound of ground beef
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two tablespoons of olive oil
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One large sweet onion, chopped
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Six cloves garlic, crushed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Eight ancho peppers, dried
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Eight guajillo peppers, dried
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two tablespoons of molasses
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One tablespoon of cocoa powder
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Six oz lager beer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Three tablespoon of cumin
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Half cup beef broth
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two cups tomato sauce
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One large yellow bell pepper, diced
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One large jalapeno pepper, diced
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One cup light kidney beans
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One cup dark kidney beans
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Three Bay leaves
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**instructions**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine the dried peppers in a food processor and process for two minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add crushed garlic, molasses, and cocoa powder, and process for two minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add oil to a large Dutch oven over medium low heat and heat up for three to
    four minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn the heat to medium, add onions and cook, stirring frequently, until it
    just starts to caramelize for about four to eight minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add ground beef to onions, stirring frequently until meat is browned, for about
    eight minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine the dried chilies mixture with ground beef and onions, and sauté for
    three to four minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add beer and stir to loosen any browned bits from the bottom of the Dutch oven,
    and simmer over medium heat for five minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add tomato sauce and cumin, and stir until combined. Simmer for five minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add diced pepper, kidney beans, and bay leaves. Reduce heat to low and simmer,
    stirring occasionally, for 30 minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributing the Views semantic tabs module to Drupal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have put a lot of effort in the semantic tabs module. It
    seems that it would make a lot of sense to make these enhancements available to
    the Drupal community as a whole. But, before we do that, there are a few things
    we need to do to ensure that the module is as useful as possible for the Drupal
    community.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal has coding standards that are strictly enforced when promoting any code
    for the first time. A good overview of coding standards for Drupal is available
    at [http://drupal.org/coding-standards](http://drupal.org/coding-standards). Before
    any code is contributed to Drupal, it should be checked to make sure that it conforms
    to Drupal's coding standards. Thankfully, this is pretty easy, because as pointed
    out on the page mentioned previously, there is a Coder module that provides an
    automated process for checking standards compliance of your code.
  prefs: []
  type: TYPE_NORMAL
- en: However, we don't need to install this module as we have online tools available
    to do this job. [http://pareview.sh](http://pareview.sh) is a service which performs
    automated reviews of Drupal projects using PHP CodeSniffer. This online service
    provides the recent pareview script without installing a local testing environment.
    Now it's time to create a sandbox module project in Drupal and push our views
    semantic tabs module code.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a sandbox for the views semantic tabs module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal allows us to create a new project type such as a module, theme, or distribution.
    In our case, we want to contribute a module.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.drupal.org/node/add](https://www.drupal.org/node/add) and
    click on the **Module project** link.![Time for action – creating a sandbox for
    the views semantic tabs module](img/4659_09_27_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I'm filling out the form. Our new project will initially be a Sandbox project.
    And I already have permission to promote projects from Sandbox to Full projects.
    I can see a checkbox allowing you to choose **Full project**, but normally it
    is best to start with a Sandbox anyway.![Time for action – creating a sandbox
    for the views semantic tabs module](img/4659_09_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By clicking on the **Save** button, Drupal creates and loads a page for your
    new project: [https://www.drupal.org/sandbox/krishnakanth17/2665888](https://www.drupal.org/sandbox/krishnakanth17/2665888).![Time
    for action – creating a sandbox for the views semantic tabs module](img/4659_09_28.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Version control** tab near the top of the new project page for instructions
    on how to start committing code to your sandbox repository.![Time for action –
    creating a sandbox for the views semantic tabs module](img/4659_09_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Setting up this repository for the first time, there are a few steps we need
    to follow with Git to push our module code. Note: you will be prompted to enter
    your Drupal password after the last step.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, all our module files need to be pushed to the sandbox. So copy and paste
    all the files inside this directory and follow these `git` commands as per the
    [https://www.drupal.org/project/2665888/git-instructions](https://www.drupal.org/project/2665888/git-instructions)
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are done with creating the sandbox project and pushing our module code to
    it. Next, we need to promote this module to the full project. I have permission
    to promote projects from Sandbox to Full projects, once our sandbox is in a state
    where we think it is ready to be promoted to a full project, can apply for that
    permission. If we don't have this permission then we must go through a one-time
    approval process. Check [https://www.drupal.org/node/1011698](https://www.drupal.org/node/1011698)
    for more information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But we are proceeding to promoting to the full project, our code is contributed
    to drupal.org, and it should be checked to make sure that it conforms to Drupal's
    coding standards. So we will be using online tools to check Drupal standards.
    As we discussed earlier, we will be using [http://pareview.sh](http://pareview.sh).
    In the URL input box, enter the URL `http://git.drupal.org/sandbox/krishnakanth17/2665888.git`
    and click on the **Submit branch** button.![Time for action – creating a sandbox
    for the views semantic tabs module](img/4659_09_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After submitting, it takes me to the [http://pareview.sh/pareview/httpgitdrupalorgsandboxkrishnakanth172665888.git](http://pareview.sh/pareview/httpgitdrupalorgsandboxkrishnakanth172665888.git)
    page and it listed the things that need to be fixed.![Time for action – creating
    a sandbox for the views semantic tabs module](img/4659_09_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will take some time to fix all those errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next chapter, we will promote this sandbox module to a full project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned a lot about Views and saw how Views allows you to
    add interesting components to your site through a web-based user interface. We
    also learned that Views offers a powerful development platform for custom extensions.
    We created a sandbox project for the views semantic tabs module. We also looked
    into some online tools to review our module to check Drupal coding standards.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to add some visually-striking banner components
    that will leverage the Views development from this chapter, and show off all the
    beautiful photos of the recipes on the d8dev site. Finally, we will promote the
    views semantic tabs module as the full project.
  prefs: []
  type: TYPE_NORMAL
