- en: Configuration Management - Deploying in Drupal 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the configuration management system and deployment
    of the configuration changes. The following is a list of the recipes covered in
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing and exporting configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronizing site configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using command-line workflow processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating and installing new module configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 provides a new, unified system to manage configurations. In Drupal
    8, all configurations are saved in configuration entities that match a defined
    configuration schema. This system provides a standard way of deploying the configuration
    between Drupal site environments and updating the site configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Once the configuration is created, or imported, it goes into an immutable state.
    If a module tries to install the configuration that exists, it will throw an exception
    and be prevented. Outside the typical user interface, the configuration can only
    be modified through the configuration management system.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration management system can be manipulated through a user interface
    provided by the Configuration management module or through the command-line interface
    tools. These tools allow you to follow the development paradigm of utilizing a
    production site and a development site, where changes are made to the development
    site and then pushed to production.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of creating two different Drupal sites for the recipes in this chapter,
    you can utilize the Drupal multisite functionality. For more information on this
    functionality, refer to the *Installing Drupal* recipe of [*Chapter 1*](f6d2ba3b-f85a-45e4-ac1d-35b6fba84240.xhtml),
    *Up and Running with Drupal 8*. Note that if you use a multisite, you will need
    to clone your development site's database into the site acting as your production
    site to replicate a realistic development and production site workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Importing and exporting configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuration management in Drupal 8 provides a solution to common problems
    when working with a website across multiple environments. No matter what the workflow
    pattern is, at some point, the configuration needs to move from one place to another,
    such as from production to a local environment. When pushing the development work
    to production, you will need to have some way to put the configuration in place.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal 8's user interface provides a way to import and export configuration
    entities via the YAML format. In this recipe, we will create a content type, export
    its configuration, and then import it into another Drupal site. The configuration
    YAML export will be imported into the production site to update its configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need a base Drupal site to act as the development site. Another Drupal
    site, which is a clone of the development site, must be available to act as a
    production Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, create a new content type on the development site. Name the
    content type Staff Page and click on Save and manage fields to save the content
    type. We will not add any additional fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the content type has been saved, go to Extend and install the Configuration
    Manager module if it is not installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d671b26-086e-4e28-a491-73b2a1df0286.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From your Drupal site''s Configuration page, go to Configuration synchronization
    under the Development group. This section allows you to import and export configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1e449e4-ceee-4f67-a0ce-812e83233930.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Export tab at the top of the page. The default page will be for
    a Full archive export, that contains the configuration of your entire Drupal site.
    Click on the Single item subtab to export a single configuration entity instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b7aa73c-96b9-4eaa-b41d-1003ecd8fa6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Select Content type from the Configuration type drop-down menu. Then, choose
    your content type from the Configuration name drop-down menu. Its configuration
    will populate the configuration textbox:![](img/42db8f86-f372-40f2-9407-a58e60716932.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the YAML content from the textbox so that you can import it into your other
    Drupal site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your production Drupal site, install the Configuration management module
    just as you did for the development site, if it is not yet installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Configuration synchronization page and click on the Import tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Single item and select Content type from the Configuration type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35efbe19-9f7c-4dbf-bd01-989403a63684.png)'
  prefs: []
  type: TYPE_IMG
- en: Paste your exported configuration YAML into the textbox and click on Import:![](img/de177b4e-7b8a-4a3c-8a41-81ef161d3245.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Confirm on the confirmation form to finalize your import to the production
    Drupal site for your custom content type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Structure page and then to the Content Types page to verify that your
    content type has been imported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the most basic level, configurations are just a mapping of keys and values,
    which can be represented as a PHP array and translated into the YAML format.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration management uses schema definitions for configuration entities.
    The schema definition provides a configuration namespace and the available keys
    and data types. The schema definition provides a typed data definition for each
    option that allows validation of the individual values and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The export process reads the configuration data and translates it into the YAML
    format. The configuration manager then receives the configuration in the form
    of YAML and converts it back to a PHP array. The data is then updated in the database.
  prefs: []
  type: TYPE_NORMAL
- en: When importing the configuration, Drupal checks the value of the configuration
    YAML's `uuid` key, if present, against any current configuration with the same
    **Universally Unique Identifier** (**UUID**). A UUID is a pattern used in software
    to provide a method of identifying an object across different environments. This
    allows Drupal to correlate a piece of data from its UUID since the database identifier
    can differ across environments. If the configuration item has a matching machine
    name, but a mismatching UUID, an error will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will discuss importing and exporting configuration within your Drupal site
    more in depth in a later section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuration entities define dependencies when they are exported. The dependency
    definitions ensure that the configuration entity's schema and other module functionalities
    are available.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you review the configuration export for `field.storage.node.body.yml`,
    it defines `node` and `text` as `dependencies`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If the `node` or `text` module is not enabled, the import will fail and throw
    an error.
  prefs: []
  type: TYPE_NORMAL
- en: Saving to a YAML file for a module's configuration installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Providing configuration on install or update* recipe of [*Chapter 6*](18026cd1-b8f0-48c0-9626-568ffd225eb5.xhtml),
    *Creating Forms with the Form API*, discusses how to use a module to provide configurations
    on the module's installation. Instead of manually writing configuration `YAML`
    files for installation, the `Configuration management` module can be used to export
    configurations and save them in your module's `config/install` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Any item exported through the user interface can be used. The only requirement
    is that you will need to remove the `uuid` key, as it denotes the site's UUID
    value and invalidates the configuration when it tries to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration schemas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configuration management system in Drupal 8 utilizes the configuration schema
    to describe configurations that can exist. Why is this important? It allows Drupal
    to properly implement typed data on stored configuration values and validate them,
    providing a standardized way of handling configurations for translation and configuration
    items.
  prefs: []
  type: TYPE_NORMAL
- en: When a module uses the configuration system to store data, it needs to provide
    a schema for each configuration definition it wishes to store. The schema definition
    is used to validate and provide typed data definitions for its values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code defines the configuration schema for the `navbar_awesome`
    module, which holds two different Boolean configuration values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This defines the `navbar_awesome.toolbar` configuration namespace; it belongs
    to the `navbar_awesome` module and has the `toolbar` configuration. We will then
    need two `cdn` and `roboto` subvalues that represent typed data values. A configuration
    YAML for this schema will be named `navbar_awesome.toolbar.yml` after the namespace,
    and it contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In turn, this is what the values will look like when represented as a PHP array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The configuration factory classes then provide an object-based wrapper around
    these configuration definitions and provide validation of their values against
    the schema. For instance, if you try to save the `cdn` value as a string, a validation
    exception will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [*Chapter 4*](a634af62-2148-4382-9121-b8500df169ed.xhtml), *Extending
    Drupal*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration schema/metadata in the Drupal.org community handbook at [https://www.drupal.org/node/1905070](https://www.drupal.org/node/1905070)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronizing site configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key component for managing a Drupal website is configuration integrity. A
    key part of maintaining this integrity is ensuring that your configuration changes
    made in development are pushed upstream to your production environments. Maintaining
    configuration changes by manually exporting and importing through the user interface
    can be tedious and does not provide a way to track what has or has not been exported
    or imported. At the same time, manually writing module hooks to manipulate the
    configuration can be time-consuming. Luckily, the configuration management solution
    provides you with the ability to export and import the entire site's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: A site export can only be imported into another copy of itself. Each site must
    have the same UUID, which is set during its installation. This allows you to export
    your local development environment's configuration and bring it to staging or
    production, without modifying the content or the database directly.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will export the development site's complete configuration
    entities' definitions. We will then take the exported configuration and import
    it into the production site. This will simulate a typical deployment of a Drupal
    site with changes created in development that is ready to be released in production.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need a base Drupal site to act as the development site. Another Drupal
    site, which is a duplicate of the development site's database, must be available
    to act as the production Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to have the **Configuration management** module installed if it
    is not already.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to the development site. Modify the site to simulate creating changes that
    need to be deployed to our other Drupal site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, let's modify the site's name; go to the Configuration page and
    the Basic site settings form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Configuration page, go to Configuration synchronization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the Export tab; we will land on the Full archive page. Click on
    the Export button to begin the export and download process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54f7e627-f89d-4c7c-9967-267b53b33ca1.png)'
  prefs: []
  type: TYPE_IMG
- en: Save the `gzipped` archive; this contains an archive of all the site's configuration
    as YAML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your other Drupal site and then to its Configuration synchronization
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Import tab and then on the Full archive tab. Use the Configuration
    archive file input, and click on Choose File to select the tarball you just downloaded.
    Click on Upload to begin the import process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be taken to the Synchronize tab to review changes that need to be
    imported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/956ebba6-11a0-435b-ae81-cac9ab09b7e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Import all to update the current site's configuration to the items
    in the archive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A batch operation will begin with the import process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8216528-5e59-4476-abef-9ef5a7aefc9a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Configuration synchronization form provides a way to interface with the
    `config` database table for your Drupal site. When you go to the Export page and
    create the tarball, Drupal effectively dumps the contents of the `config` table.
    Each row represents a configuration entity and will become its own `YAML` file.
    The contents of the `YAML` file represent its database value.
  prefs: []
  type: TYPE_NORMAL
- en: When you import the tarball, Drupal extracts its content. The files are placed
    in the available `CONFIG_SYNC_DIRECTORY` directory. The synchronization page parses
    the configuration entity YAML and provides a difference check against the current
    site's configuration. Each configuration item can be reviewed, and then all the
    items can be imported. You cannot choose to selectively import individual items.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now discuss things that are required for site configuration synchronization.
  prefs: []
  type: TYPE_NORMAL
- en: Universally Unique Identifier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a Drupal site is installed, the UUID is set. This UUID is added to the
    exported configuration entities and is represented by the `uuid` key. Drupal uses
    this key to identify the source of the configuration. Drupal will not synchronize
    configurations that do not have a matching UUID in their YAML definition.
  prefs: []
  type: TYPE_NORMAL
- en: You can review the site's current UUID value by reviewing the `system.site`
    configuration object. This can also be done using the Drush or Drupal Console
    command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Drush, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Using Drupal Console, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A synchronization folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal uses a synchronization folder to hold the configuration YAML files that
    are to be imported into the current site. This folder is represented by the `CONFIG_SYNC_DIRECTORY`
    constant. If you have not defined this in the global `$config_directories` variable
    in your site's `settings.php`, then it will be a randomly named directory in your
    site's file directory.
  prefs: []
  type: TYPE_NORMAL
- en: When Drupal 8 entered its beta release cycle, this folder was referenced as
    a staging folder and referenced by the `CONFIG_STAGING_DIRECTORY`. This is now
    deprecated; however, the internals of the configuration management system support
    reading `CONFIG_STAGING_DIRECTORY` as `CONFIG_SYNC_DIRECTORY`. This will be removed
    in Drupal 9.
  prefs: []
  type: TYPE_NORMAL
- en: The synchronization form will use the configuration management discovery service
    to look for configuration changes that need to be imported from this folder.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a configuration from a new site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal's configuration management system will not allow the import of configuration
    entities that originated at a different Drupal site. When a Drupal site is installed,
    the `system.site` configuration entity saves a UUID for the current site instance.
    Only cloned versions of this site's database can accept configuration imports
    from it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration installer profile is a custom distribution, that will allow
    you to import the configuration despite the configuration''s site UUID. The profile
    doesn''t install itself. When you use the profile, it will provide an interface
    to upload a configuration export that will then be imported, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8936ae3c-8478-495a-910f-8f22f90b1dbd.png)'
  prefs: []
  type: TYPE_IMG
- en: The distribution can be found at [https://www.drupal.org/project/config_installer](https://www.drupal.org/project/config_installer).
  prefs: []
  type: TYPE_NORMAL
- en: Using command-line workflow processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8's configuration systems solve many problems encountered when exporting
    and deploying configurations in Drupal 7\. However, the task of synchronizing
    the configuration is still a user interface task and requires the manipulation
    of archive files that contain the configuration exports for a Drupal 8 site.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration management can be done on the command line through Drush, without
    requiring it to be installed. This mitigates any requirement to log in to the
    production website to import changes. It also opens the ability for more advanced
    workflows that place the configuration in version control.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use Drush to export the development site's configuration
    to the filesystem. The exported configuration files will then be copied to the
    production site's configuration directory. Using Drush, the configuration will
    be imported into production to complete the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need a base Drupal site to act as the development site. Another Drupal
    site, which is a clone of the development site, must be available to act as the
    production Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses Drush. If you have not installed Drush, instructions can be
    found at [http://docs.drush.org/en/master/install/](http://docs.drush.org/en/master/install/).
    Drush needs to be installed at the locations of both your Drupal sites.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the purpose of demonstration, change your development site's name to `Drush
    Config Sync Demo!`. This way, there is at least one configuration change to be
    imported to the production Drupal site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a command-line terminal and change your directory to the working directory
    of your development Drupal site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `drush config-export` command to export the configuration to a directory.
    The command will default to the `sync` configuration directory defined in your
    Drupal 8 site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have not explicitly defined a sync directory, Drupal automatically creates
    a protected folder in the current site's uploaded files' directory, with a unique
    hash suffix on the directory name.
  prefs: []
  type: TYPE_NORMAL
- en: You will receive a message that the configuration has been exported to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a method of your choice, copy the contents of the configuration `sync`
    folder to your other Drupal sites that match the `configuration sync` folder.
    For example, a default folder generated by Drupal can be `sites/default/files/config_XYZ/sync`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a command-line terminal and change your directory to your production Drupal
    site's working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `drush config-import` command to begin the process of importing your
    configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the changes made to the configuration entity keys and enter `y` to confirm
    the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01a99acb-4554-4cb6-be77-6443b5906d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Check whether your configuration changes have been imported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Drush** command-line tool can utilize the code found in Drupal to interact
    with it. The `config-export` command replicates the functionality provided by
    the `Configuration management` module's full site export. However, you do not
    need the Configuration management module enabled for the command to work. The
    command will extract the available site configuration and write it to a directory,
    which is unarchived.
  prefs: []
  type: TYPE_NORMAL
- en: The `config-import` command parses the files in a directory. It will make an
    attempt to run a difference check against the YAML files like the Configuration
    management module's synchronize overview form does. It will then import all the
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are additional ways to work with the configuration management system in
    Drupal. We will explore those options in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Drush config-pull
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drush provides a way to simplify the transportation of configuration between
    sites. The `config-pull` command allows you to specify two Drupal sites and move
    the export configuration between them. You can either specify a name of a subdirectory
    under the `/sites` directory or a Drush alias.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will copy a development site''s configuration and import
    it into the staging server''s site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, you can specify the `--label` option. This represents a folder
    key in the `$config_directories` setting. The option defaults to `sync` automatically.
    Alternatively, you can use the `--destination` parameter to specify an arbitrary
    folder that is not specified in the setting of `$config_directories`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Drupal Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drush has been part of the Drupal community since Drupal 4.7 and is a custom-built
    command-line tool. The Drupal Console is a Symfony Console-based application used
    to interact with Drupal. The Drupal Console project provides a means for configuration
    management over the command line.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the Drupal Console in [*Chapter 13*](099b7376-2149-4af8-9649-45445745f068.xhtml),
    *Drupal CLI* or at [http://www.drupalconsole.com/](http://www.drupalconsole.com/).
  prefs: []
  type: TYPE_NORMAL
- en: The workflow is the same, except the naming of the command. The configuration
    export command is `config:export`, and it is automatically exported to your system's
    temporary folder until a directory is passed. You can then import the configuration
    using the `config:import` command.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the configuration from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Both Drush and Drupal Console support the ability to edit the configuration
    through the command line in YAML format. Both the tools operate in the same fashion
    and have similar command names:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drush**: `config-edit [name]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Console**: `config:edit [name]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference is that Drush will list all the available options to be edited
    if you do not pass a name, while Console allows you to search.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you edit a configuration item, your default terminal-based text editor
    will open. You will be presented with a `YAML` file that can be edited. Once you
    save your changes, the configuration is then saved on your Drupal site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14a93d6a-e1bc-4b83-b2c6-5315555c0478.png)'
  prefs: []
  type: TYPE_IMG
- en: Exporting a single configuration item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Both Drush and Console provide their own mechanisms for exporting a single
    configuration entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drush**: `config-get [name]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Console**: `config:debug [name]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Drush will print the configuration''s output to the terminal, whereas Console''s
    default behavior is to write the output to the file disk. For example, the following
    commands will output the values from `system.site` in the YAML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b90942f1-1639-4071-be6a-7c6831bcef3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Using version control and command-line workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A benefit of having the configuration exportable to YAML files is the fact that
    the configuration can be kept in version control. The Drupal site's `CONFIG_SYNC_DIRECTORY`
    directory can be committed to version control to ensure that it is transported
    across environments and properly updated. Deployment tools can then use Drush
    or Console to automatically import changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `config-export` command provided by Drush provides the Git integration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Appending the `--add` option will run `git add -p` for an interactive staging
    of the changed configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `--commit` and optional `--message` options will stage all configuration
    file changes and commit them with your message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you can also specify `--push` to make a commit and push it to the remote
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [*Chapter 13*](099b7376-2149-4af8-9649-45445745f068.xhtml), *The Drupal
    CLI*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to Drush at [http://docs.drush.org/en/master/](http://docs.drush.org/en/master/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to Drupal Console at [http://www.drupalconsole.com/](http://www.drupalconsole.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating and installing new module configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules in Drupal 8 provide configuration YAML files inside their `config/install`
    directory. A consequence of the site controlling configuration is that a new configuration
    in a module's `config/install` directory is not automatically installed. Module
    developers must write update functions, which will import the new configuration
    as it is added. While this is a practice contributed modules should follow, this
    process can be cumbersome for private projects.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, the Drupal community has come up with a solution that provides a configuration
    management flow that allows updating of a module's provided default configuration.
    The module **Configuration Update Manager** allows you to import a new configuration
    from a module or revert it to the original configuration if modified. In fact,
    the module is a dependency for the Features module discussed in [*Chapter 4*](a634af62-2148-4382-9121-b8500df169ed.xhtml),
    *Extending Drupal*.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use Configuration Update Manager to review configuration
    differences to a module and revert the modified configuration.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Add the Configuration Update Manager project to your Drupal installation using
    the following Composer command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the Extend page and install the Configuration Update Reports module,
    the user interface for Configuration Update Manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/381187b7-b0a5-4c7c-ad35-1a7192ea4995.png)'
  prefs: []
  type: TYPE_IMG
- en: To visit the configuration reports, go to Configuration in the toolbar under
    the Development section and click on Configuration synchronization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Updates Report tab. This provides an overview of configuration reports
    to generate: by configuration type, module, theme, and profile.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the System module's configuration. Select the System module from the
    module's drop-down button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the `system.site` row, click on the Show differences button link. This
    will review a difference report between the default configuration and the current
    site configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dfb7febe-10d4-49f1-b61f-d328ea3b3417.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Back to 'Updates report' page to go back to the main report so
    that the configuration can be reverted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the drop-down button so that you can click on Revert to source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2934becd-eeac-465a-b36d-2040a717433a.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Revert on the confirmation form to finish the operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The configuration is now reverted to its original installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Configuration Update Manager provides two modules: **Configuration Update
    Base** and **Configuration Update Reports**. The base module provides an underlying
    API for listing a configuration, reverting a configuration, and running difference
    checks with results. It extends Drupal core''s configuration operations. The reports
    module provides a user interface on top of the base module. The Features module
    uses the base module to provide difference review and automatic reverting of a
    configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: When reverting a configuration, the raw values are collected and then used to
    overwrite what currently exists in the system. The reports also allow importing
    a new configuration added to a module.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other contributed projects and methods for handling a configuration
    within modules.
  prefs: []
  type: TYPE_NORMAL
- en: The Configuration Development module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For module developers, there is the Configuration Development module. The Configuration
    Development module provides a command-line method for importing and exporting
    a configuration. This is useful for contributed module developers. It eases the
    exporting and update of a configuration intended for the `config/install` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The module looks for a `config_devel` entry in the module''s `info.yml` file.
    An example is taken from the Commerce Store submodule from Drupal Commerce module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Using Drush, commands provided by the Configuration Development can then be
    used to export and import the data. The following command will export the listed
    configuration to the `config/install` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to Configuration Update Manager project page at [https://www.drupal.org/project/config_update](https://www.drupal.org/project/config_update)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to Configuration development, a command-line based alternative at [https://www.drupal.org/project/config_devel](https://www.drupal.org/project/config_devel)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
