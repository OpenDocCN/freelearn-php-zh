- en: Indexer(s)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Indexing is the process of transforming data by reducing it to flattened data
    with less database tables. This process is run for products, categories, and so
    on in order to improve the performance of a web store. Since data constantly changes,
    this is not a one-time process. Rather, it is a periodic one. The `Magento_Indexer`
    module is a base of the `Magento` Indexing functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The `Magento` console tool supports the following indexer commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On running `php bin/magento indexer:info`, you will get a list of all the Magento
    indexers; the default ones are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You will see all the indexers listed in the Magento admin in the **System**
    | **Tools** | **Index** **Management** menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'From within the admin area, we can only change the indexer mode. There are
    two modes of indexers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Update on Save**: Index tables are updated right after the dictionary data
    is changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update by Schedule**: Index tables are updated by `cron` jobs according to
    the configured schedule'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since indexers cannot be run manually from admin, we have to rely either on
    their manual execution or the `cron` execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Manual execution is done via the following console command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will run all the indexers at once. We can fine-tune it
    further to execute individual indexes by running a console command that is similar
    to the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Cron-executed indexers are defined via the `Magento_Indexer` module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`indexer_reindex_all_invalid`: This will execute every minute of every hour
    every day. It runs the `reindexAllInvalid` method on an instance of the `Magento\Indexer\Model\Processor`
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indexer_update_all_views`: This will execute every minute of every hour every
    day. It runs the `updateMview` method on an instance of the `Magento\Indexer\Model\Processor`
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indexer_clean_all_changelogs`: This will execute the 0th minute of every hour
    every day. It runs the `clearChangelog` method on an instance of the `Magento\Indexer\Model\Processor`
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These `cron` jobs use an operating system `cron` job setup in such a way that
    the `Magento` `cron` job is triggered every minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following three statuses is what an indexer can have:'
  prefs: []
  type: TYPE_NORMAL
- en: '`valid`: The data is synchronized and no re-indexing is required'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`invalid`: The original data was changed and the index should be updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`working`: The index process is running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we won't go into the details of actually creating a custom indexer within
    this chapter, it is worth noting that `Magento` defines its indexers in the `vendor/magento/module-*/etc/indexer.xml`
    file. This might come in handy for cases where we want a deeper understanding
    of the inner workings of an individual indexer. For example, the `catalog_product_flat`
    indexer is implemented via the `Magento\Catalog\Model\Indexer\Product\Flat` class,
    as defined within the `vendor/magento/module-catalog/etc/indexer.xml` file. By
    studying the `Flat` class implementation in depth, you can learn how data is taken
    from `EAV` tables and flattened into a simplified structure.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered some of the most relevant aspects of Magento, which
    was beyond models and classes, regarding backend development. We had a look at
    `crontab.xml`, which helps us schedule `jobs` (commands) so that they can be run
    periodically. Then, we tackled notification messages, which enable us to push
    styled messages to users via a browser. The *Session and cookies* section gave
    us an understanding of how `Magento` tracks user information from a browser to
    a session. Logging and profiling showed us a simple yet effective mechanism to
    keep track of performance and possible issues across code. The *Events and observers*
    section introduced us to a powerful pattern that `Magento` implements across the
    code, where we can trigger custom code execution when a certain event is fired.
    The section on caching guided us through the available cache types, and we studied
    how to create and use our own cache type. Through the section on frontend apps
    (widgets), we learned how to create our own miniature apps that can be called
    into CMS pages and blocks. Custom variables gave us an insight into a simple yet
    interesting feature, where we can define a variable via the admin interface and
    then use it within CMS page, block, or e-mail template. The section on i18n showed
    us how to use the Magento translation feature to translate any string on three
    different levels, namely the module CSV file, the theme CSV file, and inline translation.
    Finally, we had a look at indexers and their mode and status; we learned how to
    control their execution.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will tackle frontend development. We will learn how create
    our own theme and use blocks and layouts to affect the output.
  prefs: []
  type: TYPE_NORMAL
