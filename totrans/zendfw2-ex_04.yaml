- en: Chapter 4. Data Management and Document Sharing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 数据管理和文档共享
- en: '*After getting ready to write your own basic models in the previous chapters,
    you can now learn how to make the most out of your Zend Framework''s data and
    file management concepts in this chapter.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在上一章准备好编写自己的基本模型之后，你现在可以学习如何在本章中充分利用 Zend Framework 的数据和文件管理概念。*'
- en: 'In this chapter we will cover the following key topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下关键主题：
- en: Zend Framework 2 ServiceManager
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zend Framework 2 ServiceManager
- en: The `TableGateway` pattern
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TableGateway` 模式'
- en: File uploads and file sharing using Zend Framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zend Framework 进行文件上传和文件共享
- en: Zend Framework 2 ServiceManager
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zend Framework 2 ServiceManager
- en: The ZF2 ServiceManager implements the service locator design pattern. The service
    locator is a service/object locator used for retrieving other objects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ZF2 ServiceManager 实现了服务定位器设计模式。服务定位器是一个用于检索其他对象的服务/对象定位器。
- en: 'The ServiceManager configurations are classified into six main categories;
    your application/module configuration will fall under one or more of the categories
    listed in the following table:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ServiceManager 配置分为六个主要类别；你的应用程序/模块配置将属于以下表中列出的一个或多个类别：
- en: '| Configuration type | Description |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 配置类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| abstract_factories | Used to define an array of abstract classes. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| abstract_factories | 用于定义抽象类的数组。|'
- en: '| aliases | Used to define an associative array of alias name / target name
    pairs. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| aliases | 用于定义别名名称/目标名称对的关联数组。|'
- en: '| factories | Used to define an array of service name / factory class name
    pairs. The factory classes defined here should either implement Zend/ServiceManager/FactoryInterface
    or invokable classes. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| factories | 用于定义服务名称/工厂类名称对的数组。在此定义的工厂类应实现 Zend/ServiceManager/FactoryInterface
    或可调用类。|'
- en: '| invokables | Used to define an array of service name / class name pairs.
    The classes listed here may be directly instantiated without any constructor arguments.
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| invokables | 用于定义服务名称/类名称对的数组。列出的类可以直接实例化，无需任何构造函数参数。|'
- en: '| services | Used to define an array of service name / object pairs. The service
    is basically an instance of a class. Services can be used to register classes
    which are already initialized. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| services | 用于定义服务名称/对象对的数组。服务基本上是一个类的实例。服务可以用来注册已经初始化的类。|'
- en: '| shared | Used to define an array of service name / Boolean pairs, indicating
    whether or not a service should be shared. All services are shared by default;
    this ServiceManager option can be used to disable sharing on specific services.
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| shared | 用于定义服务名称/布尔值对的数组，指示服务是否应该共享。所有服务默认都是共享的；此 ServiceManager 选项可用于在特定服务上禁用共享。|'
- en: The ServiceManager configuration can be stored either in the application configuration
    or in the module configuration; this can be chosen according to the needs, application,
    or module. Usually, the configuration, which is static across the application,
    is stored in the application-level configuration; all other information is stored
    at a module level.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ServiceManager 配置可以存储在应用程序配置或模块配置中；这可以根据需要、应用程序或模块来选择。通常，跨应用程序静态的配置存储在应用程序级配置中；所有其他信息存储在模块级别。
- en: 'The configuration for ServiceManager is merged in the following order:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ServiceManager 的配置按以下顺序合并：
- en: 'Module configuration provided by the `Module` lass using the `getServiceConfig()`
    method. This will be processed in the same order in which the modules are processed:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Module` 类的 `getServiceConfig()` 方法提供的模块配置。这将按照模块处理的顺序进行处理：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Module configuration is present in the `service_manager` key; again, this is
    processed in the same order in which the modules are processed.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块配置存在于 `service_manager` 键中；同样，这也是按照模块处理的顺序进行处理。
- en: 'Application configuration is present in various configuration files in the
    `config/autoload/` directory in the order in which they are processed:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序配置存在于 `config/autoload/` 目录中的各种配置文件中，按照它们处理的顺序：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Time for action – migrating existing code to ServiceManager
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践时间 - 将现有代码迁移到 ServiceManager
- en: 'Our next step will be to migrate existing code blocks to make use of ServiceManager.
    Some of the key factories that can be moved into ServiceManager are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步将是将现有代码块迁移到使用 ServiceManager。以下是一些可以移动到 ServiceManager 中的关键工厂：
- en: Database connections
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库连接
- en: Models and table gateways
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型和表网关
- en: Forms and filters
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单和过滤器
- en: Authentication service
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证服务
- en: 'If you review the existing code, you will be able to figure out that all the
    database connections are already using the Zend Framework 2 ServiceManager model
    for storing credentials. We will take one step forward and move the rest of the
    factories into ServiceManager using the following steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你审查现有的代码，你将能够弄清楚所有数据库连接都已经使用Zend Framework 2 ServiceManager模型来存储凭证。我们将进一步一步，将剩余的工厂使用以下步骤移动到ServiceManager：
- en: 'Modify `Module.php` and add a new function to load the ServiceManager configuration:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Module.php`文件并添加一个新函数以加载ServiceManager配置：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Make sure that the `Module.php` file includes all the necessary namespaces:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保`Module.php`文件包含所有必要的命名空间：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Using namespaces**'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**使用命名空间**'
- en: Namespaces can be utilized by making use of PHP 5.3's `namespace` and `use`
    keywords. All ZF2 classes have a namespace which directly matches with the folder
    structure of the folder holding that class; all classes stored within that folder
    are directly determined by their namespace.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过使用PHP 5.3的`namespace`和`use`关键字来利用命名空间。所有ZF2类都有一个命名空间，它与包含该类的文件夹结构直接匹配；该文件夹中存储的所有类都直接由它们的命名空间确定。
- en: 'By default, the `use` keyword creates an alias for the last segment of the
    namespace, and this can be changed by using the `as` option on the keyword. For
    example, see the following code:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，`use`关键字为命名空间的最后一个部分创建一个别名，这可以通过在关键字上使用`as`选项来更改。例如，请参阅以下代码：
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Make necessary changes to the controllers to fetch the instances from ServiceManager:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对控制器进行必要的修改以从ServiceManager获取实例：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To check if the changes are working as expected, try to register and log in
    with new credentials.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了检查更改是否按预期工作，尝试使用新凭证进行注册和登录。
- en: '*What just happened?*'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have migrated our code to make use of Zend's ServiceManager framework. ServiceManager
    provides enormous benefits in terms of a cleaner code, highly effective refactoring
    ability, and a centralized register for core application components.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将代码迁移到使用Zend的ServiceManager框架。ServiceManager在代码更简洁、高度有效的重构能力和核心应用程序组件的集中注册方面提供了巨大的好处。
- en: Have a go hero
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来试试吧，英雄
- en: Now that you have understood Zend ServiceManager functionality, here is a simple
    task for you. The login controller (`CommunicationApp/module/Users/src/Users/Controller/LoginController.php`)
    makes use of `getAuthService()` for the authentication service. Modify the function,
    so that the authentication service is obtained from ServiceManger.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了Zend ServiceManager的功能，这里有一个简单的任务给你。登录控制器（`CommunicationApp/module/Users/src/Users/Controller/LoginController.php`）使用`getAuthService()`进行身份验证服务。修改该函数，以便从ServiceManger获取身份验证服务。
- en: Database operations
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库操作
- en: In the previous chapter we learned how to implement a basic database operation,
    namely, `table insert`. In this section, you will learn all the basic database
    operations necessary for building a simple **CRUD** (**Create, Read, Update and
    Delete**) interface.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何实现基本的数据库操作，即`table insert`。在本节中，你将学习所有构建简单**CRUD**（**创建、读取、更新和删除**）接口所需的基本数据库操作。
- en: More on TableGateway
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于TableGateway的信息
- en: 'The `TableGateway` class extends `AbstractTableGateway`, which implements `TableGatewayInterface`.
    The interface definition of `TableGatewayInterface` is provided in the following
    code snippet; all the basic table operations are defined in the interface:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableGateway`类扩展了`AbstractTableGateway`，该类实现了`TableGatewayInterface`。`TableGatewayInterface`的接口定义在以下代码片段中；所有基本表操作都在接口中定义：'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `TableGateway` class offers a wide range of methods to perform basic database
    operations; some of the most frequently used methods are explained in the following
    section:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableGateway`类提供了一系列方法来执行基本数据库操作；以下部分解释了一些最常用的方法：'
- en: '`getTable()`: Returns a string which contains the table name mapped with the
    `TableGateway` object. For example, see the following code:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getTable()`: 返回一个包含与`TableGateway`对象映射的表名的字符串。例如，请参阅以下代码：'
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`select($where = null)`: Used to select a set of rows with the criteria specified
    in `$where`; it can either be a `where` condition based on `Zend\Db\Sql\Where`
    or an array of criteria. For example, see the following code:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select($where = null)`: 用于根据`$where`中指定的条件选择一组行；它可以是基于`Zend\Db\Sql\Where`的`where`条件，或者是一组条件的数组。例如，请参阅以下代码：'
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`insert($set)`: Used to insert the data defined in `$set` into the table as
    a new record. For example, see the following code:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert($set)`: 用于将`$set`中定义的数据作为新记录插入到表中。例如，请参阅以下代码：'
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`update($set, $where = null)`: Used to update a set of rows with the criteria
    specified in `$where`; it can either be a `where` condition based on `Zend\Db\Sql\Where`
    or an array of criteria. `$set` holds the data that will be updated for all the
    records matched with `$where`. For example, see the following code:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update($set, $where = null)`: 用于根据`$where`中指定的标准更新一组行；它可以是基于`Zend\Db\Sql\Where`的`where`条件或一组标准。`$set`包含将更新与`$where`匹配的所有记录的数据。例如，请参阅以下代码：'
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`delete($where)`: Used to delete a set of rows with the criteria specified
    in `$where`; it can either be a `where` condition based on `Zend\Db\Sql\Where`
    or an array of criteria. For example, see the following code:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete($where)`: 用于根据`$where`中指定的标准删除一组行；它可以是基于`Zend\Db\Sql\Where`的`where`条件或一组标准。例如，请参阅以下代码：'
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`getLastInsertValue()`: Returns the last `insert` value for the table''s primary
    key. the return type is an integer. For example, see the following code:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getLastInsertValue()`: 返回表的主键的最后一个`insert`值。返回类型是整数。例如，请参阅以下代码：'
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Time for action – implementing an admin UI to manage users
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——实现管理用户的后台UI
- en: 'In this task we will be creating an administration user interface for managing
    users in our application. The following operations will include listing all users,
    editing existing users, deleting users, and adding users:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将创建一个用于管理我们应用程序中用户的行政用户界面。以下操作将包括列出所有用户、编辑现有用户、删除用户和添加用户：
- en: 'Modify `CommunicationApp/module/Users/src/Users/Model/UserTable.php` using
    the following code. Add the following functions:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码修改`CommunicationApp/module/Users/src/Users/Model/UserTable.php`。添加以下函数：
- en: '`fetchAll()`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetchAll()`'
- en: '`getUser($id)`'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUser($id)`'
- en: '`getUserByEmail($userEmail)`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUserByEmail($userEmail)`'
- en: '`deleteUser($id)`'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleteUser($id)`'
- en: '[PRE13]'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a new controller for user management under `CommunicationApp/module/Users/src/Users/Controller/UserManagerController.php`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CommunicationApp/module/Users/src/Users/Controller/UserManagerController.php`下创建一个新的用户管理控制器。
- en: 'The `UserManagerController` controller will have the following actions:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`UserManagerController`控制器将具有以下动作：'
- en: '`indexAction()`: This is used to render all available users in the system,
    and we will also render links to add/edit and delete links as shown in the following
    code:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indexAction()`: 此动作用于渲染系统中所有可用的用户，我们还将渲染添加/编辑和删除链接，如下面的代码所示：'
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`editAction()`: This action is used to render the `edit` form to modify the
    information related to the user:'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`editAction()`: 此动作用于渲染`edit`表单以修改与用户相关的信息：'
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**The bind method**'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**绑定方法**'
- en: The `bind` method used in the `Form` function allows the mapping of the model
    to a form. The function works in two directions—it updates the form in the view
    with the data from the model and it updates the model with the form submission
    data if the form is validated, that is, `$form->isValid()`.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Form`函数中使用的`bind`方法允许将模型映射到表单。该函数双向工作——它使用模型中的数据更新视图中的表单，如果表单验证通过，它还会使用表单提交数据更新模型，即`$form->isValid()`。
- en: 'Read more here:'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息请见：
- en: '[http://framework.zend.com/manual/2.2/en/modules/zend.form.quick-start.html#binding-an-object](http://framework.zend.com/manual/2.2/en/modules/zend.form.quick-start.html#binding-an-object)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://framework.zend.com/manual/2.2/en/modules/zend.form.quick-start.html#binding-an-object](http://framework.zend.com/manual/2.2/en/modules/zend.form.quick-start.html#binding-an-object)'
- en: '`processAction()`: The `processAction` action is used when the user `edit`
    form is submitted; `processAction` saves the updated record and returns to `indexAction`:'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`processAction()`: 当用户`edit`表单提交时使用`processAction`动作；`processAction`保存更新后的记录并返回到`indexAction`：'
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`deleteAction()`: This action is used to delete the user record:'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleteAction()`: 此动作用于删除用户记录：'
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the necessary views and modify the module''s `config/module.config.php`
    file to specify a unique child route to access this controller:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建必要的视图并修改模块的`config/module.config.php`文件以指定一个唯一的子路由来访问此控制器：
- en: '[PRE18]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally add the new controller to the `invokables` array:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将新的控制器添加到`invokables`数组中：
- en: '[PRE19]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now open your web browser and access the controller, log in to your application,
    and open `http://comm.-app.local/users/user-manager`. You should be able to see
    a page similar to the one given in the following screenshot:![Time for action
    – implementing an admin UI to manage users](img/1929OS_04_01.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开您的网络浏览器并访问控制器，登录到您的应用程序，并打开`http://comm.-app.local/users/user-manager`。您应该能看到一个类似于以下截图的页面：![行动时间——实现管理用户的后台UI](img/1929OS_04_01.jpg)
- en: 'The **Edit user** link should redirect you to an user edit form like the one
    in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**编辑用户**链接应将您重定向到一个类似于以下截图中的用户编辑表单：'
- en: '![Time for action – implementing an admin UI to manage users](img/1929OS_04_02.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![实施管理用户的管理UI - 行动时间](img/1929OS_04_02.jpg)'
- en: 'The **Delete user** link can be used to remove the user from the user list:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**删除用户**链接可以用来从用户列表中删除用户：'
- en: '![Time for action – implementing an admin UI to manage users](img/1929OS_04_03.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![实施管理用户的管理UI - 行动时间](img/1929OS_04_03.jpg)'
- en: '*What just happened?*'
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have now created an administration user interface for adding, modifying,
    and removing users from our communication application. We have utilized all the
    core functionalities of the `TableGateway` model and created functions for performing
    CRUD operations on the table access objects.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在为我们的通信应用创建了一个管理用户界面，用于添加、修改和从应用中删除用户。我们已经利用了`TableGateway`模型的所有核心功能，并为在表访问对象上执行CRUD操作创建了函数。
- en: Going forward, we will be making use of some of the more advanced applications
    of `TableGateway`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的时间里，我们将利用`TableGateway`的一些更高级的应用。
- en: Have a go hero
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: 'Before we move on to the next section, here is a small task for you to practice.
    Your task for this section will be to create a new `Add User` form. Refer to the
    following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一节之前，这里有一个小任务供您练习。本节的任务是为创建一个新的`添加用户`表单。请参考以下截图：
- en: '![Have a go hero](img/1929OS_04_04.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![尝试一下英雄](img/1929OS_04_04.jpg)'
- en: This form will be similar to the `Register Form` that we created in the previous
    chapter. Once the form is submitted, the user will be taken back to the user listing
    page. A link to this form will have to be added in the user listing page.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此表单将与我们在上一章中创建的`注册表单`类似。一旦表单提交，用户将被带回到用户列表页面。必须在用户列表页面中添加到该表单的链接。
- en: Document management
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档管理
- en: In this section we will create a new document management interface. The document
    management interface will allow users to upload documents, manage uploads, and
    share uploaded documents with other users. The user interface will also allow
    users to manage sharing, and add/remove shares.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个新的文档管理界面。文档管理界面将允许用户上传文档、管理上传，并将上传的文档与其他用户共享。用户界面还将允许用户管理共享，并添加/删除共享。
- en: In this section, we will focus on providing users with options to create file
    uploads and manage those uploads. We will be using the filesystem to store the
    uploaded file and the relative path of the uploaded file will be stored in the
    database mapped to the user who uploaded the file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于为用户提供创建文件上传和管理这些上传的选项。我们将使用文件系统来存储上传的文件，并且上传文件的相对路径将存储在数据库中，与上传文件的用户相对应。
- en: 'Some of the important Zend Framework components used in file uploads are:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件上传中使用的某些重要的Zend框架组件包括：
- en: 'File upload form element (`Zend\Form\Element\File`): The `File` upload element
    is used in the upload form to display a file input box. This element is an equivalent
    of the `<input type=''file''../>` style element in HTML used for allowing users
    to upload files. The file input element can be rendered by setting `''type'' =>
    ''file''` in the form definition.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件上传表单元素（`Zend\Form\Element\File`）：`File`上传元素用于上传表单中显示文件输入框。此元素相当于HTML中用于允许用户上传文件的`<input
    type='file'../>`样式元素。可以通过在表定义中设置`'type' => 'file'`来渲染文件输入元素。
- en: 'File transfer adapter (`Zend\File\Transfer\Adapter\Http`): The file transfer
    adapter handle file uploads upon form submission. The `setDestination()` method
    in the file transfer adapter allows the user to set a destination and receive
    the file in that destination. The `receive()` method is used to initiate the transfer.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件传输适配器（`Zend\File\Transfer\Adapter\Http`）：文件传输适配器在表单提交时处理文件上传。文件传输适配器中的`setDestination()`方法允许用户设置目的地并在该目的地接收文件。`receive()`方法用于启动传输。
- en: Time for action – creating a file upload form
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文件上传表单 - 行动时间
- en: 'In this task, we will be creating a new document upload form; file uploads
    will be stored in the filesystem, and the information regarding the file upload
    will be stored in the database in a table named `uploads`. The file uploads are
    stored in a folder location defined in the module configuration. Perform the following
    steps to do so:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将创建一个新的文档上传表单；文件上传将存储在文件系统中，有关文件上传的信息将存储在名为`uploads`的数据库表中。文件上传存储在模块配置中定义的文件夹位置。执行以下步骤来完成此操作：
- en: 'Our first step will be to define a location where files can be uploaded in
    the module''s configuration (`config/module.config.php`):'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的第一步将是定义一个文件可以上传的位置，在模块的配置文件中（`config/module.config.php`）：
- en: '[PRE20]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we need to create a table which will store the upload information:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个表来存储上传信息：
- en: '[PRE21]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create the `Upload` and `UploadTable` classes for interacting with the `uploads`
    table. Add default methods such as `saveUpload()`, `fetchAll()`, `getUpload()`,
    and `deleteUpload()`. Also, add a method to get uploads made by a specific user
    `getUploadsByUserId($userId)`:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Upload`和`UploadTable`类，用于与`uploads`表交互。添加默认方法，如`saveUpload()`、`fetchAll()`、`getUpload()`和`deleteUpload()`。还添加了一个获取特定用户上传的方法`getUploadsByUserId($userId)`：
- en: '[PRE22]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create an `UploadManagerController` controller for managing file uploads. Add
    `indexAction()` to display the list of uploads done by the user:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于管理文件上传的`UploadManagerController`控制器。添加`indexAction()`以显示用户完成的上传列表：
- en: '[PRE23]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create an upload form with a file input as described in the following code
    snippet:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个上传表单，其中包含一个文件输入，如下代码片段所示：
- en: '[PRE24]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Time for action – creating a file upload form](img/1929OS_04_05.jpg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 创建文件上传表单](img/1929OS_04_05.jpg)'
- en: Upload form
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上传表单
- en: 'Create views for the file upload form, and the `index` action. Now we have
    all the necessary elements to handle a file upload. We need to read the configuration
    for the file upload path and use the Zend HTTP file transfer adapter to receive
    the file in the configuration location. The `get(''config'')` method on the service
    locator is used to retrieve the configuration. The following code is used to read
    the file upload location from the configuration:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件上传表单和`index`动作的视图。现在我们拥有了处理文件上传的所有必要元素。我们需要读取文件上传路径的配置，并使用Zend HTTP文件传输适配器在配置位置接收文件。服务定位器上的`get('config')`方法用于检索配置。以下代码用于从配置中读取文件上传位置：
- en: '[PRE25]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The last step is to handle the file upload process. There are two actions that
    need to happen once the form is successfully submitted:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是处理文件上传过程。一旦表单成功提交，需要发生两个动作：
- en: The uploaded file has to be moved to the file upload locations.
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传的文件必须移动到文件上传位置。
- en: 'An entry needs to be added describing the upload in the `''uploads''` table
    using the following code:'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要在`'uploads'`表中添加一个条目来描述上传，使用以下代码：
- en: '[PRE26]'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Add a child route (upload manger) for the `UploadManager` controller and the
    controller to the `invokables` list.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`UploadManager`控制器添加一个子路由（上传管理器），并将控制器添加到`invokables`列表中。
- en: Open the web browser and test the upload form.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开网页并测试上传表单。
- en: 'The final form will look like the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的表单将看起来如下截图所示：
- en: '![Time for action – creating a file upload form](img/1929OS_04_06.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 创建文件上传表单](img/1929OS_04_06.jpg)'
- en: '*What just happened?*'
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have now created a file upload process, which allows users to upload files
    into the application and view the files that are uploaded. We have used Zend Framework's
    file upload handling components to handle a file upload. In our next section,
    we will set up a file sharing mechanism such that the documents can be shared
    with different users. Before we move on to implement file sharing, please complete
    the following task.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个文件上传流程，允许用户将文件上传到应用程序中并查看已上传的文件。我们使用了Zend框架的文件上传处理组件来处理文件上传。在下一节中，我们将设置一个文件共享机制，以便文档可以与不同的用户共享。在我们继续实现文件共享之前，请完成以下任务。
- en: Have a go hero
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄行动
- en: Your next task will be to add a **Delete** option that allows users to delete
    uploaded files as shown in the following screenshot. Also, ensure that the file
    is removed from the filesystem when the delete action is triggered.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您的下一个任务是将**删除**选项添加到上传中，允许用户删除上传的文件，如下截图所示。同时，确保在触发删除动作时从文件系统中删除文件。
- en: '![Have a go hero](img/1929OS_04_07.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![英雄行动](img/1929OS_04_07.jpg)'
- en: Managing file sharing
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理文件共享
- en: Now that we have a fully functional document management section, our next task
    is to extend this document management system to support file sharing with other
    users. The most important part of implementing a file sharing mechanism is to
    store the information about upload sharing; we do this by linking documents with
    user IDs in a table called `upload_sharing`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了一个完全功能的文档管理部分，我们的下一个任务是将这个文档管理系统扩展以支持与其他用户的文件共享。实现文件共享机制最重要的部分是存储上传共享的信息；我们通过将文档与`upload_sharing`表中的用户ID链接来实现这一点。
- en: Time for action – implementing a file sharing system
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 实现文件共享系统
- en: 'For implementing file sharing, we will need to create a new table called `upload_sharing`
    and store all sharing-related information in that table. The following steps will
    explain how this is implemented in our application:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现文件共享，我们需要创建一个新的表`upload_sharing`，并将所有共享相关信息存储在该表中。以下步骤将解释如何在我们的应用程序中实现这一点：
- en: 'Create a new table called `upload_sharing`; this table will hold the relationship
    about uploads shared with users:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`upload_sharing`的新表；此表将保存关于与用户共享的上传的关系：
- en: '[PRE27]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the module definition `Module.php`, add a simple `TableGateway` object for
    the `uploads_sharing` table:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块定义`Module.php`中，为`uploads_sharing`表添加一个简单的`TableGateway`对象：
- en: '[PRE28]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Modify the constructor of the `UploadTable` class to take in an additional
    parameter of the upload sharing `TableGateway` object:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`UploadTable`类的构造函数，使其接受一个额外的上传共享`TableGateway`对象参数：
- en: '[PRE29]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Modify the module configuration (`Module.php`) for the `UploadTable` factory
    to support `UploadSharingTableGateway`:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改模块配置（`Module.php`）以支持`UploadTable`工厂的`UploadSharingTableGateway`：
- en: '[PRE30]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Modify the `UploadTable` class to support the following file sharing functions:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`UploadTable`类以支持以下文件共享功能：
- en: '`addSharing()`: Adds a new sharing permission for the given upload with the
    user'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addSharing()`: 为给定上传添加新的共享权限给用户'
- en: '`removeSharing()`: Removes the sharing permission for the specific upload/user
    combination'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeSharing()`: 删除特定上传/用户组合的共享权限'
- en: '`getSharedUsers()`: Gets the list of users for which the upload is shared'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getSharedUsers()`: 获取共享上传的用户列表'
- en: '`getSharedUploadsForUserId()`: Gets the list of uploads that are shared for
    that user'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getSharedUploadsForUserId()`: 获取为该用户共享的上传列表'
- en: 'This can be done using the following code:'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这可以通过以下代码实现：
- en: '[PRE31]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The **Manage Documents** section lists all uploads for a specific user and
    also lists uploads shared by others with the user:'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**管理文档**部分列出了特定用户的全部上传，同时也列出了与其他用户共享的上传：'
- en: '![Time for action – implementing a file sharing system](img/1929OS_04_08.jpg)'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![实施文件共享系统的时间 - 实现文件共享系统](img/1929OS_04_08.jpg)'
- en: Modify the edit upload form to display the list of users the upload is shared
    with; this can be achieved by passing the upload ID to the `getSharedUsers()`method
    of the `UploadTable` object.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改编辑上传表单以显示共享上传的用户列表；这可以通过将上传ID传递给`UploadTable`对象的`getSharedUsers()`方法来实现。
- en: 'Add a new section in the edit upload form which allows the addition of new
    shares; this is achieved by displaying the list of all users in the system in
    a drop-down list. When the user clicks on **Add Share**, a new record is added
    to the `upload_sharing` table:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑上传表单中添加一个新部分，允许添加新的共享；这是通过在下拉列表中显示系统中的所有用户列表来实现的。当用户点击**添加共享**时，`upload_sharing`表中将添加一条新记录：
- en: '[PRE32]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following screenshot shows the **Upload Sharing** page with a drop-down
    list to add shares:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了带有下拉列表以添加共享的**上传共享**页面：
- en: '![Time for action – implementing a file sharing system](img/1929OS_04_09.jpg)'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![实施文件共享系统的时间 - 实现文件共享系统](img/1929OS_04_09.jpg)'
- en: 'The last section of the file sharing implementation is to allow an option for
    users to download shared files. This is provided by the `fileDownloadAction()`
    function defined in our file sharing application:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件共享实现的最后部分是允许用户下载共享文件。这由我们文件共享应用程序中定义的`fileDownloadAction()`函数提供：
- en: '[PRE33]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Tip
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**File download**'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**文件下载**'
- en: 'For implementing a file download, we need to disable the layout. This can be
    achieved by directly providing the HTTP response object as output for that particular
    action as shown in the previous code. This can also be achieved by `setTerminal()`,
    as shown in the following code:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了实现文件下载，我们需要禁用布局。这可以通过直接为特定操作提供HTTP响应对象作为输出来实现，如前代码所示。这也可以通过`setTerminal()`来实现，如下代码所示：
- en: '[PRE34]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Large file downloads**'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**大文件下载**'
- en: The `file_get_contents()` method is capable of handling small file uploads and
    consume a lot of memory when processing large files. For better performance, you
    can create a stream HTTP response object `Zend\Http\Response\Stream()` and stream
    the file download.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`file_get_contents()`方法能够处理小文件上传，在处理大文件时会消耗大量内存。为了提高性能，你可以创建一个流HTTP响应对象`Zend\Http\Response\Stream()`，然后流式传输文件下载。'
- en: Now we have a fully functional file sharing system in place. Test the file sharing
    system; start by sharing the file with different users, and log in and out as
    different users.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经建立了一个完全功能的文件共享系统。测试文件共享系统；首先与不同用户共享文件，然后以不同用户身份登录和登出。
- en: 'The final form should look like the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最终表单应如下截图所示：
- en: '![Time for action – implementing a file sharing system](img/1929OS_04_10.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![实施文件共享系统的时间 - 实现文件共享系统](img/1929OS_04_10.jpg)'
- en: '*What just happened?*'
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: You created a table that can store user and upload relationships; you modified
    the `UploadTable` class to support additional sharing functions. You created controllers
    and views to enable file sharing, and finally you provided the ability for the
    user to download the shared file using a file download script. With this, you
    have successfully implemented the file sharing system, where users can now upload,
    edit, and share documents within the system.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了一个可以存储用户和上传关系的表；你修改了 `UploadTable` 类以支持额外的共享功能。你创建了控制器和视图以启用文件共享，并最终提供了用户使用文件下载脚本来下载共享文件的能力。至此，你已经成功实现了文件共享系统，用户现在可以在系统中上传、编辑和共享文档。
- en: Pop quiz – data management and document sharing
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答 - 数据管理和文档共享
- en: Q1\. In `TableGateway`, which function is used to determine the last inserted
    record ID?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 在 `TableGateway` 中，哪个函数用于确定最后插入的记录ID？
- en: '`getLastId()`'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getLastId()`'
- en: '`getLastInsertId()`'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getLastInsertId()`'
- en: '`get(''last_insert_id'')`'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`get(''last_insert_id'')`'
- en: '`getLastInsertValue()`'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getLastInsertValue()`'
- en: Q2\. Which method can be used to disable layouts in a view model?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 哪个方法可以用来在视图模型中禁用布局？
- en: '`$viewModel->setNoLayouts(true)`'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$viewModel->setNoLayouts(true)`'
- en: '`$ viewModel->Layouts(false)`'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ viewModel->Layouts(false)`'
- en: '`$viewModel->setTerminal(true)`'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$viewModel->setTerminal(true)`'
- en: '`$viewModel->setLayouts(false)`'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$viewModel->setLayouts(false)`'
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have discussed several topics in the context of data and
    file management. First, we elaborated on the usage of the `TableGateway` database
    pattern. We then implemented a simple file upload service by making use of Zend
    Framework's file transfer components. Finally, we implemented a simple file sharing
    service by utilizing both Zend Framework's file transfer components and the `TableGateway`
    pattern. In the next chapter, we will be working closely on the frontend, especially
    with JavaScript and AJAX calls.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了数据和管理文件的相关主题。首先，我们详细说明了 `TableGateway` 数据库模式的用法。然后，我们通过利用 Zend 框架的文件传输组件实现了简单的文件上传服务。最后，我们通过利用
    Zend 框架的文件传输组件和 `TableGateway` 模式实现了简单的文件共享服务。在下一章中，我们将专注于前端开发，特别是 JavaScript
    和 AJAX 调用。
