- en: Chapter 4. Data Management and Document Sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*After getting ready to write your own basic models in the previous chapters,
    you can now learn how to make the most out of your Zend Framework''s data and
    file management concepts in this chapter.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Zend Framework 2 ServiceManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `TableGateway` pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File uploads and file sharing using Zend Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zend Framework 2 ServiceManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ZF2 ServiceManager implements the service locator design pattern. The service
    locator is a service/object locator used for retrieving other objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ServiceManager configurations are classified into six main categories;
    your application/module configuration will fall under one or more of the categories
    listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Configuration type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| abstract_factories | Used to define an array of abstract classes. |'
  prefs: []
  type: TYPE_TB
- en: '| aliases | Used to define an associative array of alias name / target name
    pairs. |'
  prefs: []
  type: TYPE_TB
- en: '| factories | Used to define an array of service name / factory class name
    pairs. The factory classes defined here should either implement Zend/ServiceManager/FactoryInterface
    or invokable classes. |'
  prefs: []
  type: TYPE_TB
- en: '| invokables | Used to define an array of service name / class name pairs.
    The classes listed here may be directly instantiated without any constructor arguments.
    |'
  prefs: []
  type: TYPE_TB
- en: '| services | Used to define an array of service name / object pairs. The service
    is basically an instance of a class. Services can be used to register classes
    which are already initialized. |'
  prefs: []
  type: TYPE_TB
- en: '| shared | Used to define an array of service name / Boolean pairs, indicating
    whether or not a service should be shared. All services are shared by default;
    this ServiceManager option can be used to disable sharing on specific services.
    |'
  prefs: []
  type: TYPE_TB
- en: The ServiceManager configuration can be stored either in the application configuration
    or in the module configuration; this can be chosen according to the needs, application,
    or module. Usually, the configuration, which is static across the application,
    is stored in the application-level configuration; all other information is stored
    at a module level.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration for ServiceManager is merged in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Module configuration provided by the `Module` lass using the `getServiceConfig()`
    method. This will be processed in the same order in which the modules are processed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Module configuration is present in the `service_manager` key; again, this is
    processed in the same order in which the modules are processed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Application configuration is present in various configuration files in the
    `config/autoload/` directory in the order in which they are processed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Time for action – migrating existing code to ServiceManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our next step will be to migrate existing code blocks to make use of ServiceManager.
    Some of the key factories that can be moved into ServiceManager are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Database connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Models and table gateways
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forms and filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you review the existing code, you will be able to figure out that all the
    database connections are already using the Zend Framework 2 ServiceManager model
    for storing credentials. We will take one step forward and move the rest of the
    factories into ServiceManager using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify `Module.php` and add a new function to load the ServiceManager configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that the `Module.php` file includes all the necessary namespaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using namespaces**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Namespaces can be utilized by making use of PHP 5.3's `namespace` and `use`
    keywords. All ZF2 classes have a namespace which directly matches with the folder
    structure of the folder holding that class; all classes stored within that folder
    are directly determined by their namespace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By default, the `use` keyword creates an alias for the last segment of the
    namespace, and this can be changed by using the `as` option on the keyword. For
    example, see the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make necessary changes to the controllers to fetch the instances from ServiceManager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To check if the changes are working as expected, try to register and log in
    with new credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have migrated our code to make use of Zend's ServiceManager framework. ServiceManager
    provides enormous benefits in terms of a cleaner code, highly effective refactoring
    ability, and a centralized register for core application components.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have understood Zend ServiceManager functionality, here is a simple
    task for you. The login controller (`CommunicationApp/module/Users/src/Users/Controller/LoginController.php`)
    makes use of `getAuthService()` for the authentication service. Modify the function,
    so that the authentication service is obtained from ServiceManger.
  prefs: []
  type: TYPE_NORMAL
- en: Database operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we learned how to implement a basic database operation,
    namely, `table insert`. In this section, you will learn all the basic database
    operations necessary for building a simple **CRUD** (**Create, Read, Update and
    Delete**) interface.
  prefs: []
  type: TYPE_NORMAL
- en: More on TableGateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TableGateway` class extends `AbstractTableGateway`, which implements `TableGatewayInterface`.
    The interface definition of `TableGatewayInterface` is provided in the following
    code snippet; all the basic table operations are defined in the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `TableGateway` class offers a wide range of methods to perform basic database
    operations; some of the most frequently used methods are explained in the following
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getTable()`: Returns a string which contains the table name mapped with the
    `TableGateway` object. For example, see the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`select($where = null)`: Used to select a set of rows with the criteria specified
    in `$where`; it can either be a `where` condition based on `Zend\Db\Sql\Where`
    or an array of criteria. For example, see the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`insert($set)`: Used to insert the data defined in `$set` into the table as
    a new record. For example, see the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`update($set, $where = null)`: Used to update a set of rows with the criteria
    specified in `$where`; it can either be a `where` condition based on `Zend\Db\Sql\Where`
    or an array of criteria. `$set` holds the data that will be updated for all the
    records matched with `$where`. For example, see the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`delete($where)`: Used to delete a set of rows with the criteria specified
    in `$where`; it can either be a `where` condition based on `Zend\Db\Sql\Where`
    or an array of criteria. For example, see the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`getLastInsertValue()`: Returns the last `insert` value for the table''s primary
    key. the return type is an integer. For example, see the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Time for action – implementing an admin UI to manage users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this task we will be creating an administration user interface for managing
    users in our application. The following operations will include listing all users,
    editing existing users, deleting users, and adding users:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify `CommunicationApp/module/Users/src/Users/Model/UserTable.php` using
    the following code. Add the following functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fetchAll()`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUser($id)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUserByEmail($userEmail)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteUser($id)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Create a new controller for user management under `CommunicationApp/module/Users/src/Users/Controller/UserManagerController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `UserManagerController` controller will have the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`indexAction()`: This is used to render all available users in the system,
    and we will also render links to add/edit and delete links as shown in the following
    code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`editAction()`: This action is used to render the `edit` form to modify the
    information related to the user:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**The bind method**'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The `bind` method used in the `Form` function allows the mapping of the model
    to a form. The function works in two directions—it updates the form in the view
    with the data from the model and it updates the model with the form submission
    data if the form is validated, that is, `$form->isValid()`.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Read more here:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://framework.zend.com/manual/2.2/en/modules/zend.form.quick-start.html#binding-an-object](http://framework.zend.com/manual/2.2/en/modules/zend.form.quick-start.html#binding-an-object)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`processAction()`: The `processAction` action is used when the user `edit`
    form is submitted; `processAction` saves the updated record and returns to `indexAction`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`deleteAction()`: This action is used to delete the user record:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the necessary views and modify the module''s `config/module.config.php`
    file to specify a unique child route to access this controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally add the new controller to the `invokables` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now open your web browser and access the controller, log in to your application,
    and open `http://comm.-app.local/users/user-manager`. You should be able to see
    a page similar to the one given in the following screenshot:![Time for action
    – implementing an admin UI to manage users](img/1929OS_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Edit user** link should redirect you to an user edit form like the one
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – implementing an admin UI to manage users](img/1929OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Delete user** link can be used to remove the user from the user list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – implementing an admin UI to manage users](img/1929OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now created an administration user interface for adding, modifying,
    and removing users from our communication application. We have utilized all the
    core functionalities of the `TableGateway` model and created functions for performing
    CRUD operations on the table access objects.
  prefs: []
  type: TYPE_NORMAL
- en: Going forward, we will be making use of some of the more advanced applications
    of `TableGateway`.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we move on to the next section, here is a small task for you to practice.
    Your task for this section will be to create a new `Add User` form. Refer to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Have a go hero](img/1929OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This form will be similar to the `Register Form` that we created in the previous
    chapter. Once the form is submitted, the user will be taken back to the user listing
    page. A link to this form will have to be added in the user listing page.
  prefs: []
  type: TYPE_NORMAL
- en: Document management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will create a new document management interface. The document
    management interface will allow users to upload documents, manage uploads, and
    share uploaded documents with other users. The user interface will also allow
    users to manage sharing, and add/remove shares.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will focus on providing users with options to create file
    uploads and manage those uploads. We will be using the filesystem to store the
    uploaded file and the relative path of the uploaded file will be stored in the
    database mapped to the user who uploaded the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the important Zend Framework components used in file uploads are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'File upload form element (`Zend\Form\Element\File`): The `File` upload element
    is used in the upload form to display a file input box. This element is an equivalent
    of the `<input type=''file''../>` style element in HTML used for allowing users
    to upload files. The file input element can be rendered by setting `''type'' =>
    ''file''` in the form definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'File transfer adapter (`Zend\File\Transfer\Adapter\Http`): The file transfer
    adapter handle file uploads upon form submission. The `setDestination()` method
    in the file transfer adapter allows the user to set a destination and receive
    the file in that destination. The `receive()` method is used to initiate the transfer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action – creating a file upload form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this task, we will be creating a new document upload form; file uploads
    will be stored in the filesystem, and the information regarding the file upload
    will be stored in the database in a table named `uploads`. The file uploads are
    stored in a folder location defined in the module configuration. Perform the following
    steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first step will be to define a location where files can be uploaded in
    the module''s configuration (`config/module.config.php`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to create a table which will store the upload information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Upload` and `UploadTable` classes for interacting with the `uploads`
    table. Add default methods such as `saveUpload()`, `fetchAll()`, `getUpload()`,
    and `deleteUpload()`. Also, add a method to get uploads made by a specific user
    `getUploadsByUserId($userId)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `UploadManagerController` controller for managing file uploads. Add
    `indexAction()` to display the list of uploads done by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an upload form with a file input as described in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – creating a file upload form](img/1929OS_04_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Upload form
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create views for the file upload form, and the `index` action. Now we have
    all the necessary elements to handle a file upload. We need to read the configuration
    for the file upload path and use the Zend HTTP file transfer adapter to receive
    the file in the configuration location. The `get(''config'')` method on the service
    locator is used to retrieve the configuration. The following code is used to read
    the file upload location from the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last step is to handle the file upload process. There are two actions that
    need to happen once the form is successfully submitted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The uploaded file has to be moved to the file upload locations.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An entry needs to be added describing the upload in the `''uploads''` table
    using the following code:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Add a child route (upload manger) for the `UploadManager` controller and the
    controller to the `invokables` list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web browser and test the upload form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final form will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – creating a file upload form](img/1929OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now created a file upload process, which allows users to upload files
    into the application and view the files that are uploaded. We have used Zend Framework's
    file upload handling components to handle a file upload. In our next section,
    we will set up a file sharing mechanism such that the documents can be shared
    with different users. Before we move on to implement file sharing, please complete
    the following task.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your next task will be to add a **Delete** option that allows users to delete
    uploaded files as shown in the following screenshot. Also, ensure that the file
    is removed from the filesystem when the delete action is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: '![Have a go hero](img/1929OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Managing file sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a fully functional document management section, our next task
    is to extend this document management system to support file sharing with other
    users. The most important part of implementing a file sharing mechanism is to
    store the information about upload sharing; we do this by linking documents with
    user IDs in a table called `upload_sharing`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – implementing a file sharing system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For implementing file sharing, we will need to create a new table called `upload_sharing`
    and store all sharing-related information in that table. The following steps will
    explain how this is implemented in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new table called `upload_sharing`; this table will hold the relationship
    about uploads shared with users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the module definition `Module.php`, add a simple `TableGateway` object for
    the `uploads_sharing` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the constructor of the `UploadTable` class to take in an additional
    parameter of the upload sharing `TableGateway` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the module configuration (`Module.php`) for the `UploadTable` factory
    to support `UploadSharingTableGateway`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `UploadTable` class to support the following file sharing functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`addSharing()`: Adds a new sharing permission for the given upload with the
    user'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`removeSharing()`: Removes the sharing permission for the specific upload/user
    combination'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getSharedUsers()`: Gets the list of users for which the upload is shared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getSharedUploadsForUserId()`: Gets the list of uploads that are shared for
    that user'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be done using the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **Manage Documents** section lists all uploads for a specific user and
    also lists uploads shared by others with the user:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – implementing a file sharing system](img/1929OS_04_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Modify the edit upload form to display the list of users the upload is shared
    with; this can be achieved by passing the upload ID to the `getSharedUsers()`method
    of the `UploadTable` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new section in the edit upload form which allows the addition of new
    shares; this is achieved by displaying the list of all users in the system in
    a drop-down list. When the user clicks on **Add Share**, a new record is added
    to the `upload_sharing` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the **Upload Sharing** page with a drop-down
    list to add shares:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – implementing a file sharing system](img/1929OS_04_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The last section of the file sharing implementation is to allow an option for
    users to download shared files. This is provided by the `fileDownloadAction()`
    function defined in our file sharing application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**File download**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For implementing a file download, we need to disable the layout. This can be
    achieved by directly providing the HTTP response object as output for that particular
    action as shown in the previous code. This can also be achieved by `setTerminal()`,
    as shown in the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Large file downloads**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `file_get_contents()` method is capable of handling small file uploads and
    consume a lot of memory when processing large files. For better performance, you
    can create a stream HTTP response object `Zend\Http\Response\Stream()` and stream
    the file download.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we have a fully functional file sharing system in place. Test the file sharing
    system; start by sharing the file with different users, and log in and out as
    different users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final form should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – implementing a file sharing system](img/1929OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You created a table that can store user and upload relationships; you modified
    the `UploadTable` class to support additional sharing functions. You created controllers
    and views to enable file sharing, and finally you provided the ability for the
    user to download the shared file using a file download script. With this, you
    have successfully implemented the file sharing system, where users can now upload,
    edit, and share documents within the system.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – data management and document sharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. In `TableGateway`, which function is used to determine the last inserted
    record ID?
  prefs: []
  type: TYPE_NORMAL
- en: '`getLastId()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`getLastInsertId()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`get(''last_insert_id'')`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`getLastInsertValue()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which method can be used to disable layouts in a view model?
  prefs: []
  type: TYPE_NORMAL
- en: '`$viewModel->setNoLayouts(true)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ viewModel->Layouts(false)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$viewModel->setTerminal(true)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$viewModel->setLayouts(false)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have discussed several topics in the context of data and
    file management. First, we elaborated on the usage of the `TableGateway` database
    pattern. We then implemented a simple file upload service by making use of Zend
    Framework's file transfer components. Finally, we implemented a simple file sharing
    service by utilizing both Zend Framework's file transfer components and the `TableGateway`
    pattern. In the next chapter, we will be working closely on the frontend, especially
    with JavaScript and AJAX calls.
  prefs: []
  type: TYPE_NORMAL
