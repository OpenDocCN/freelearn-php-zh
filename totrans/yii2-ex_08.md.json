["```php\n    'components' => [\n        …\n        …\n        'user' => [\n            'identityClass' => 'app\\models\\User',\n        ],\n    ],\n```", "```php\nCREATE TABLE `user` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `username` varchar(255) NOT NULL,\n `auth_key` varchar(32) NOT NULL,\n `password_hash` varchar(255) NOT NULL,\n `access_token` varchar(100) DEFAULT NULL,\n PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```", "```php\n<?php\nnamespace app\\models;\n\nuse Yii;\nuse yii\\base\\NotSupportedException;\nuse yii\\db\\ActiveRecord;\nuse yii\\web\\IdentityInterface;\n\nclass User extends ActiveRecord implements IdentityInterface\n{\n    public static function tableName()\n    {\n        return 'user';\n    }\n\n    public static function findIdentity($id)\n    {\n        return static::findOne(['id' => $id]);\n    }\n\n    public static function findIdentityByAccessToken($token, $type = null)\n    {\n        return static::findOne(['access_token' => $token]);\n    }\n\n    public static function findByUsername($username)\n    {\n        return static::findOne(['username' => $username]);\n    }\n\n    public function getId()\n    {\n        return $this->getPrimaryKey();\n    }\n\n    public function getAuthKey()\n    {\n        return $this->auth_key;\n    }\n\n    public function validateAuthKey($authKey)\n    {\n        return $this->getAuthKey() === $authKey;\n    }\n\n    public function validatePassword($password)\n    {\n        return Yii::$app->security->validatePassword($password, $this->password_hash);\n    }\n\n    public function setPassword($password)\n    {\n        $this->password_hash = Yii::$app->security->generatePasswordHash($password);\n    }\n\n    public function generateAuthKey()\n    {\n        $this->auth_key = Yii::$app->security->generateRandomString();\n    }\n\n}\n```", "```php\n    public function beforeSave($insert)\n    {\n        if (parent::beforeSave($insert)) {\n            if ($this->isNewRecord) {\n                $this->auth_key = \\Yii::$app->security->generateRandomString();\n            }\n            return true;\n        }\n        return false;\n    }\n```", "```php\n// whether the current user is a guest (not authenticated)\n$isGuest = Yii::$app->user->isGuest;\n```", "```php\n// find a user identity with the specified username.\n// note that you may want to check the password if needed\n$userModel = User::findOne(['username' => $username]);\n\n// logs in the user\nYii::$app->user->login($userModel);\n```", "```php\n// access to identity class that it is equivalent to $userModel\n$identity = Yii::$app->user->identity;\n```", "```php\nYii::$app->user->logout();\n```", "```php\nINSERT INTO `user` (\n`username` ,\n`password_hash` ,\n)\nVALUES (\n'foo',\n'$2a$12$hL0rmIMjxhLqI.xr7jD1FugNWEgZNh62HuJj5.y34XBUfBWB4cppW'\n);\n```", "```php\n<?php\n\nnamespace app\\controllers;\n\nuse Yii;\nuse yii\\web\\Controller;\n\nuse app\\models\\User;\n\nclass MyAuthenticationController extends Controller\n{\n    public function actionLogin()\n    {\n        $error = null;\n\n        $username = Yii::$app->request->post('username', null);\n        $password = Yii::$app->request->post('password', null);\n\n        $user = User::findOne(['username' => $username]);\n\n        if(($username!=null)&&($password!=null))\n        {\n            if($user != null)\n            {\n                if($user->validatePassword($password))\n                {\n                    Yii::$app->user->login($user);\n                }\n                else {\n                    $error = 'Password validation failed!';\n                }\n            }\n            else\n            {\n                $error = 'User not found';\n            }\n        }\n\n        return $this->render('login', ['error' => $error]);\n    }\n    public function actionLogout()\n    {\n        Yii::$app->user->logout();\n        return $this->redirect(['login']);\n    }\n\n}\n```", "```php\n<?php\nuse \\yii\\bootstrap\\ActiveForm;\nuse \\yii\\helpers\\Html;\nuse \\yii\\bootstrap\\Alert;\n?>\n\n<?php\nif($error != null) {\n    echo Alert::widget([ 'options' => [ 'class' => 'alert-danger' ], 'body' => $error ]);    \n}\n?>\n\n<?php if(Yii::$app->user->isGuest) { ?>\n\n    <?php ActiveForm::begin(); ?>\n\n    <div class=\"form-group\">\n    <?php echo Html::label('Username', 'username'); ?>\n    <?php echo Html::textInput('username', '', ['class' => 'form-control']); ?>\n    </div>\n\n    <div class=\"form-group\">\n    <?php echo Html::label('Password', 'password'); ?>\n    <?php echo Html::passwordInput('password', '', ['class' => 'form-control']); ?>\n    </div>\n\n    <?php echo Html::submitButton('Login', ['class' => 'btn btn-primary']); ?>\n\n    <?php ActiveForm::end(); ?>\n\n<?php } else { ?>\n\n    <h2>You are authenticated!</h2>\n    <br /><br />\n    <?php echo Html::a('Logout',  ['my-authentication/logout'], ['class' => 'btn btn-warning']); ?>\n\n<?php } ?>\n```", "```php\n    public function actionLoginWithModel()\n    {\n        $error = null;\n\n        $model = new \\app\\models\\LoginForm();\n        if ($model->load(Yii::$app->request->post())) {\n            if(($model->validate())&&($model->user != null))\n            {\n                Yii::$app->user->login($model->user);\n            }\n            else\n            {\n                $error = 'Username/Password error';\n            }\n        }\n\n        return $this->render('login-with-model', ['model' => $model, 'error' => $error]);\n    }\n```", "```php\n<?php\nuse \\yii\\bootstrap\\ActiveForm;\nuse \\yii\\helpers\\Html;\nuse \\yii\\bootstrap\\Alert;\n?>\n\n<?php\nif($error != null) {\n    echo Alert::widget([ 'options' => [ 'class' => 'alert-danger' ], 'body' => $error ]);    \n}\n?>\n<?php if(Yii::$app->user->isGuest) { ?>\n\n    <?php $form = ActiveForm::begin([\n        'id' => 'login-form',\n    ]); ?>\n\n    <?= $form->field($model, 'username') ?>\n\n    <?= $form->field($model, 'password')->passwordInput() ?>\n\n    <div class=\"form-group\">\n        <?= Html::submitButton('Login', ['class' => 'btn btn-primary', 'name' => 'login-button']) ?>\n    </div>\n\n    <?php ActiveForm::end(); ?>\n\n<?php } else { ?>\n    <h2>You are authenticated!</h2>\n    <br /><br />\n    <?php echo Html::a('Logout',  ['my-authentication/logout'], ['class' => 'btn btn-warning']); ?>    \n<?php } ?>    \n```", "```php\n    public function behaviors()\n    {\n        return [\n            'access' => [\n                'class' => AccessControl::className(),\n                'only' => ['login', 'logout', 'signup', 'index'],\n                'rules' => [\n                    [\n                        'allow' => true,\n                        'actions' => ['login', 'signup', 'index'],\n                        'roles' => ['?'],\n                    ],\n                    [\n                        'allow' => true,\n                        'actions' => ['logout'],\n                        'roles' => ['@'],\n                    ],\n                ],\n            ],\n        ];\n    }\n```", "```php\n    public function behaviors()\n    {\n        return [\n            'access' => [\n                'class' => AccessControl::className(),\n                'only' => ['public-page', 'private-page'],\n                'rules' => [\n                    [\n                        'allow' => true,\n                        'actions' => ['public-page'],\n                        'roles' => ['?'],\n                    ],\n                    [\n                        'allow' => true,\n                        'actions' => ['private-page'],\n                        'roles' => ['@'],\n\n                    ],\n                ],\n\n                // Callable function when user is denied\n                'denyCallback' => function($rule, $data) {\n                        $this->redirect(['login']);\n                }\n            ],\n        ];\n    }\n```", "```php\nreturn [\n    // ...\n    'components' => [\n        'authManager' => [\n            'class' => 'yii\\rbac\\PhpManager',\n        ],\n        // ...\n    ],\n];\n```", "```php\nreturn [\n    // ...\n    'components' => [\n        'authManager' => [\n            'class' => 'yii\\rbac\\DbManager,\n        ],\n        // ...\n    ],\n];\n```", "```php\n    public function actionInitializeAuthorizations()\n    {\n        $auth = Yii::$app->authManager;\n\n        // Reset all\n        $auth->removeAll();\n\n        // add \"createReservation\" permission\n        $permCreateReservation = $auth->createPermission('createReservation');\n        $permCreateReservation->description = 'Create a reservation';\n        $auth->add($permCreateReservation);\n\n        // add \"updatePost\" permission\n        $permUpdateReservation = $auth->createPermission('updateReservation');\n        $permUpdateReservation->description = 'Update reservation';\n        $auth->add($permUpdateReservation);\n\n        // add \"operator\" role and give this role the \"createReservation\" permission\n        $roleOperator = $auth->createRole('operator');\n        $auth->add($roleOperator);\n        $auth->addChild($roleOperator, $permCreateReservation);\n\n        // add \"admin\" role and give this role the \"updateReservation\" permission\n        // as well as the permissions of the \"operator\" role\n        $roleAdmin = $auth->createRole('admin');\n        $auth->add($roleAdmin);\n        $auth->addChild($roleAdmin, $permUpdateReservation);\n        $auth->addChild($roleAdmin, $roleOperator);\n\n        // Assign roles to users. 1 and 2 are IDs returned by IdentityInterface::getId()\n        // usually implemented in your User model.\n        $auth->assign($roleOperator, 2);\n        $auth->assign($roleAdmin, 1);\n    }\n```", "```php\n<?php\nreturn [\n    'createReservation' => [\n        'type' => 2,\n        'description' => 'Create a reservation',\n    ],\n    'updateReservation' => [\n        'type' => 2,\n        'description' => 'Update reservation',\n    ],\n    'operator' => [\n        'type' => 1,\n        'children' => [\n            'createReservation',\n        ],\n    ],\n    'admin' => [\n        'type' => 1,\n        'children' => [\n            'updateReservation',\n            'operator',\n        ],\n    ],\n];\n```", "```php\n<?php\nreturn [\n    2 => [\n        'operator',\n    ],\n    1 => [\n        'admin',\n    ],\n];\n```", "```php\nif (\\Yii::$app->user->can()) {\n    // create reservation permission is enabled to current user\n}\n```", "```php\nCREATE TABLE `user` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `username` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n `auth_key` varchar(32) COLLATE utf8_unicode_ci NOT NULL,\n `password_hash` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n `access_token` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,\n PRIMARY KEY (`id`)\n)\n```", "```php\nTRUNCATE user;\n\nINSERT INTO `user` (`id`, `username`, `auth_key`, `password_hash`, `access_token`) VALUES\n(1, 'foo', '', '$2a$12$hL0rmIMjxhLqI.xr7jD1FugNWEgZNh62HuJj5.y34XBUfBWB4cppW', NULL),\n(2, 'userA', '', '$2a$12$hL0rmIMjxhLqI.xr7jD1FugNWEgZNh62HuJj5.y34XBUfBWB4cppW', NULL),\n(3, 'userB', '', '$2a$12$hL0rmIMjxhLqI.xr7jD1FugNWEgZNh62HuJj5.y34XBUfBWB4cppW', NULL),\n(4, 'userC', '', '$2a$12$hL0rmIMjxhLqI.xr7jD1FugNWEgZNh62HuJj5.y34XBUfBWB4cppW', NULL),\n(5, 'admin', '', '$2a$12$hL0rmIMjxhLqI.xr7jD1FugNWEgZNh62HuJj5.y34XBUfBWB4cppW', NULL);\n```", "```php\n    <?php\n\nnamespace app\\controllers;\n\nuse Yii;\nuse yii\\web\\Controller;\nuse yii\\filters\\AccessControl;\nuse app\\models\\User;\nuse app\\models\\LoginForm;\n\nclass MyAuthenticationController extends Controller\n{\n\npublic function initializeAuthorizations()\n    {\n        $auth = Yii::$app->authManager;\n\n        $permissions = [\n            'createReservation' => array('desc' => 'Create a reservation'),\n            'updateReservation' => array('desc' => 'Update reservation'),\n            'deleteReservation' => array('desc' => 'Delete reservation'),\n\n            'createRoom' => array('desc' => 'Create a room'),\n            'updateRoom' => array('desc' => 'Update room'),\n            'deleteRoom' => array('desc' => 'Delete room'),\n\n            'createCustomer' => array('desc' => 'Create a customer'),\n            'updateCustomer' => array('desc' => 'Update customer'),\n            'deleteCustomer' => array('desc' => 'Delete customer'),\n        ];\n\n        $roles = [\n            'operator' => array('createReservation', 'createRoom', 'createCustomer'),\n        ];\n\n        // Add all permissions\n        foreach($permissions as $keyP=>$valueP)\n        {\n            $p = $auth->createPermission($keyP);\n            $p->description = $valueP['desc'];\n            $auth->add($p);\n\n            // add \"operator\" role and give this role the \"createReservation\" permission\n            $r = $auth->createRole('role_'.$keyP);\n            $r->description = $valueP['desc'];\n            $auth->add($r);\n            if( false == $auth->hasChild($r, $p)) $auth->addChild($r, $p);\n        }\n\n        // Add all roles\n        foreach($roles as $keyR=>$valueR)\n        {\n            $r = $auth->createRole($keyR);\n            $r->description = $keyR;\n            $auth->add($r);\n\n            foreach($valueR as $permissionName)\n            {\n             if( false == $auth->hasChild($r, $auth->getPermission($permissionName))) $auth->addChild($r, $auth->getPermission($permissionName));\n            }\n\n        }\n\n        // Add all permissions to admin role\n        $r = $auth->createRole('admin');\n        $r->description = 'admin';\n        $auth->add($r);\n        foreach($permissions as $keyP=>$valueP)\n        {\n            if( false == $auth->hasChild($r, $auth->getPermission($permissionName))) $auth->addChild($r, $auth->getPermission($keyP));\n        }\n    }\n}\n```", "```php\n    public function actionIndex()\n    {\n        $auth = Yii::$app->authManager;\n\n        // Initialize authorizations\n        $this->initializeAuthorizations();\n\n        // Get all users        \n        $users = User::find()->all();\n\n        // Initialize data\n        $rolesAvailable = $auth->getRoles();\n        $rolesNamesByUser = [];\n\n        // For each user, fill $rolesNames with name of roles assigned to user\n        foreach($users as $user)\n        {\n            $rolesNames = [];\n\n            $roles = $auth->getRolesByUser($user->id);\n            foreach($roles as $r)\n            {\n                $rolesNames[] = $r->name;\n            }\n\n            $rolesNamesByUser[$user->id] = $rolesNames;\n        }\n\n        return $this->render('index', ['users' => $users, 'rolesAvailable' => $rolesAvailable, 'rolesNamesByUser' => $rolesNamesByUser]);\n    }\n```", "```php\n<?php\nuse yii\\helpers\\Html;\n?>\n\n<table class=\"table\">\n    <tr>\n        <td>User</td>\n        <?php foreach($rolesAvailable as $r) { ?>\n            <td><?php echo $r->description ?></td>\n        <?php } ?>\n    </tr>\n\n    <?php foreach($users as $u) { ?>\n        <tr>\n            <td><?php echo $u->username ?></td>\n\n            <?php foreach($rolesAvailable as $r) { ?>\n                <td align=\"center\">\n                <?php if(in_array($r->name, $rolesNamesByUser[$u->id])) { ?>\n                  <?php echo Html::a('Yes', ['remove-role', 'userId' => $u->id, 'roleName' => $r->name]); ?>\n                <?php } else { ?>\n                    <?php echo Html::a('No', ['add-role', 'userId' => $u->id, 'roleName' => $r->name]); ?>\n                <?php } ?>\n                </td>\n            <?php } ?>\n        </tr>\n    <?php } ?>\n\n</table>\n```", "```php\n    public function actionAddRole($userId, $roleName)\n    {\n        $auth = Yii::$app->authManager;\n\n        $auth->assign($auth->getRole($roleName), $userId);\n\n        return $this->redirect(['index']);\n    }\n\n    public function actionRemoveRole($userId, $roleName)\n    {\n        $auth = Yii::$app->authManager;\n\n        $auth->revoke($auth->getRole($roleName), $userId);\n\n        return $this->redirect(['index']);\n    }\n```", "```php\nUse yii\\filters\\AccessControl;\n\n    public function behaviors()\n    {\n        return [\n            'access' => [\n                'class' => AccessControl::className(),\n                'rules' => [\n                    [\n                        'allow' => true,\n                        'actions' => ['create'],\n                        'roles' => ['operator'],\n                    ],\n                    [\n                        'allow' => true,\n                        'actions' => ['index'],\n                    ],                    \n                ],\n\n            ],\n        ];\n    }\n```"]