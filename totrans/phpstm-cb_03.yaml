- en: Chapter 3. Refactoring and Building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Renaming elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving a method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving a variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching code in a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restoring elements using comparison
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the run configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Grandma''s advice: stick to software engineering.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Software engineering advice: emphasize on code reusability. Any code base engineered
    according to the software engineering paradigm will be reusable. That is to say,
    you can use your code forever having written it once. They say "Write once, use
    forever".'
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting the pizza baking use case, you will observe that in order to cook
    whatever dish, you just had to use the `add` function since you stuck to the mentioned
    paradigm. Suppose there are 50 different types of dishes that you are about to
    cook. Each dish is different in itself, but each will require the `add` method.
    If you convert this into technology, you will, in most cases, inherit the `Dish`
    class. That is your `PizzaDish`. The methods of the `Dish` class are reused in
    all the classes such as `PizzaDish`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to change the business logic, you can happily and comfortably change
    the logic inside the method body, and the changes will be reflected in all of
    the classes that inherit (or use) this class.
  prefs: []
  type: TYPE_NORMAL
- en: So far, so good...but if you were to change the signature of the method inside
    the base class itself, what will you do? Yes, this can arise in the initial phase
    of development when the plans change a bit and thus lead to change in the use
    case.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the saying goes, change is inevitable; you must be ready for change, whatever
    the timeline might be. Engineers are negligent enough to commit mistakes while
    renaming—typographical errors, forgetting where to change, and so on. Don''t worry,
    you can at least rest assured with PhpStorm at your disposal. What PhpStorm does
    is that it provides a refactoring system, in which you can make your change penetrate
    throughout the project, visible in one single step: **The Refactoring Step**.
    If you opt for refactoring, you have the freedom to do a number of refactoring
    tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: So, an `addIngredient` method can be easily written as `addingredient` at some
    point in code; `toolTip` can be written as `tootLip`, and so on. There might be
    five places in your code where you used the method `addSalt`, but when you changed
    the method signature of `add`, somehow you forgot and changed it in only four
    locations in your code base. Such petty mistakes can be safely termed as silly
    mistakes but might cause more damage than you can imagine. They eat up the most
    valuable resource—time. You will end up realizing that it was just a typographical
    error or a slip but only to realize that you crossed over the deadline.
  prefs: []
  type: TYPE_NORMAL
- en: With refactoring, you can safely rename a method signature and tell PhpStorm
    to penetrate this change by finding and making the same change across all the
    occurrences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refactoring applies to all the elements of code: class names, method names,
    method signatures, variable names, and so on. PhpStorm treats them alike! Justice
    PhpStorm!'
  prefs: []
  type: TYPE_NORMAL
- en: A directory in a PHP project is much like the package in Java—if you ever had
    a previous encounter with the Java programming language. In simple words, a directory
    in a PHP project is a grouping for classes. You can group similar classes in directories.
    Thus, your controller classes might be under your controller directory, model
    classes under model directory, configuration files under the `config` directory,
    and so on. Directories are important. Consider this, if you wish to change the
    name of a particular directory, you need to refactor it. You need to rename it.
    Thus, all those lines of code that refer to a class (`include`, `include once`
    or `require`, `require_once`) will be automatically updated once you rename a
    particular directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The elements that we are going to rename are directories and classes; let's
    have a look at them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming a directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To rename a directory, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to rename a directory, you need to access the right-click on the context
    menu and select the **Rename** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On providing the new name, you can choose whether to let this change penetrate
    throughout the project wherever this directory has been referenced.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also choose whether you want to replace the occurrence in comments and
    strings as well. This is shown in the following screenshot:![Renaming a directory](img/3878OT_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wish to see which occurrences are there corresponding to this directory,
    you can select the **Preview** button, or else, you can directly **Refactor**
    the changes. Once you have refactored the changes, you can sit back and concentrate
    on further development plans.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming a class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, even the best plan cannot be guaranteed to be foolproof. You might
    have started to go east, but due to the wind current, you felt that going southeast
    was a better and feasible option. Plan destroyed? Not at all—some amendments are
    required, and then you are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: Here's a use case—you planned to cook some `Dish` and went to the kitchen, but
    you found out that the essential ingredients were missing. What will you do? Remain
    hungry? Not at all... You will proceed to cook some other dish that is a `Dish`.
    In order to proceed, you will try to reuse some of the logic that you used in
    `PizzaDish`. In technical terms, you will need to rename (refactor) your class.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to do that (refactor your class), you need to place your cursor over
    the class name. access the right-click context menu, and select **Rename**. You
    can do **Preview** to check for which occurrences will be changed, and once you
    are convinced, you can do **Refactor**.
  prefs: []
  type: TYPE_NORMAL
- en: Simple, isn't it? Indeed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The refactoring in this case will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3878OT_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, we were familiar with renaming elements. Now, it is time to see how
    a method can be renamed.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming a method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refactoring in the case of methods in PhpStorm provides you with a fine-grained
    control to make changes in either the name of the method or the method signature.
    To change the method name is easy. Similar to renaming a directory and renaming
    a class, you need to place your cursor over the target method name, access the
    right-click context menu and proceed to **Rename**. You can apply the changes
    in the box specified. If you want to preview, you can **Preview**, or else you
    can **Refactor**, and PhpStorm will happily propagate the changes across the occurrences.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming member variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of all the renaming criteria and explanations provided, renaming a member variable
    is the most typical, and it requires the most amount of maturity in handling.
    In short, this one is a "handle with care" situation. Variables can be local or
    global or scope-based. You require a variable name, `$salt`, for the ingredient
    salt to be added to `PizzaDish` and another `$salt` for algorithmic purposes—say
    to add random characters to your password to make the container for the cooked
    dish more safe. Thus, you want some salt to cook your dish as well as to prevent
    others from eating it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to rename a variable carefully, the steps are the same as those described
    in the previous cases—the addition is the warning *CAREFUL*. You need to place
    your cursor over the variable name, access the right-click on the context menu,
    and select **Rename**, and PhpStorm will display all of the occurrences. You can
    select from the available list and selectively rename the required occurrences.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also refer to the renaming method and renaming directory in previous
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the method signature is not difficult either. In plural cases, you
    might realize that passing an extra argument will do the trick for you. So, you
    have the magic wand PhpStorm with which you can very easily do the magic to make
    this happen.
  prefs: []
  type: TYPE_NORMAL
- en: You can start by placing the cursor over the method name, accessing the right-click
    context menu, and selecting **Change the Method Signature**. The magic begins.
  prefs: []
  type: TYPE_NORMAL
- en: PhpStorm provides you with many options to change the signature of the target
    method. You can refer to the previous chapter, where changing the method signature
    has been described in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid the need to change a method signature just for the sake of adding or
    deleting parameters, you can use PHP `func_get_args()`, by which you can make
    your method independent from the hassles of parameters. Thus, you just need to
    create a method with no parameters and use `func_get_args()` to get all the arguments,
    1, 5, or even 35 easily. You might ask "why in the world would we use parameters
    then?" The answer to this is rather short. You should have mercy on the PHP interpreter;
    it has to do more processing in that case.
  prefs: []
  type: TYPE_NORMAL
- en: Copying elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A directory contains classes, classes contain methods and variables, methods
    contain variables, and methods use variables.
  prefs: []
  type: TYPE_NORMAL
- en: The point to prove is that everything is related in one way or another. You
    can equally want to copy a directory, as you want to copy a class safely to some
    location other than the current location or declaration.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copying a directory means that somewhere, some concept has changed, which led
    to a regrouping of the classes. So, it will be better to think again. If you are
    still determined, you need to perform the following step:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Project View**, (*Alt* + *1*), highlight the target directory, access
    the right-click context menu, go to **Refactor**, and then choose the **Copy**
    option. PhpStorm will ask you for the details. The details will be the new name,
    and the target directory under which you wish to copy the directory to. PhpStorm
    will copy that for you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is one more way to achieve the same effect for a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: You can also directly copy a directory from one location to another by the same
    old *Ctrl* + *C* and *Ctrl* + *V* combination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a directory, it creates the same effect the difference lies in the way they
    work. Refactor is a more PhpStorm way to copy; it does not save anything to the
    clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copying is more an operating system approach. It copies the name as a string
    value in the clipboard. So, you can paste the name as-is inside the editor and
    paste the directory as-is in the project view. Interesting, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: 'The copy directory looks as it does in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3878OT_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Which one should you choose then? It's your call. Do either, but make sure you
    follow the **Don't Repeat Yourself** (**DRY**) principle.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of now, you are familiar with copying the elements, and now it is time to
    move to copying a class.
  prefs: []
  type: TYPE_NORMAL
- en: Copying a class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Copying a class means copying the business logic in most scenarios. In software
    engineering, a sophisticated name given to this process is **Off-The-Shelf** development.
    You can cheat everyone but not yourself, you copycat! A class is copied in order
    to reuse most of the existing business logic that exists in it. More logic is,
    however, pumped into the class to inflate it. To copy a class and start your Off-The-Shelf
    development, you need to copy a class by accessing the right-click context menu
    and selecting the **Copy** option. The dialog box is similar. The questions are
    similar. The effect is similar. The outcome is different. Here, a single class
    is copied from one location to another.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like you can do a copy-paste for a directory, you could do exactly the same
    for a class of your choice. Following the operating system way of copying, the
    name of the class to be copied is placed on the clipboard as well. If you paste
    it in an editor, the name of the class will be pasted, and if you paste the name
    of the class in the Project view, the class as a whole will be pasted inside the
    Project view at the selected location.
  prefs: []
  type: TYPE_NORMAL
- en: Moving elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any keen software engineer knows the importance of cut or copy and paste. The
    information associated with this important statement is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: Cutting and pasting is faster than copying and pasting. However, cutting and
    pasting changes the location of the selected element. Also, copying keeps the
    original in place, whereas cutting removes it from where it was.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any dedicated software engineer will already have this knowledge through past
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have talked about renaming elements, copying elements, and now, it's time
    to move a directory.
  prefs: []
  type: TYPE_NORMAL
- en: Moving a directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are sure that somewhere, your architecture has changed in such a way
    that your grouping has changed, you should be prepared to move an entire directory
    (your grouping) to some other grouping (some other directory or location). In
    order to move a directory, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to go to the Project view, select the desired directory (also known
    as grouping), access the right-click context menu, and select the **Move** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PhpStorm will ask you a single question as to where you want to move this selected
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you answer, PhpStorm will take care of the rest of the things, and your
    task will be accomplished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Moving a class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You want to move your class to some other directory (or namespace, folder, or
    grouping in the most layman terminology) ideally in some case where you started
    off your development in haste without a proper plan and now you realize that what
    you thought your entity will be like was not the best solution possible. OK, don't
    blame yourself. Instead, use PhpStorm to help you refactor your class by moving
    it to a more appropriate place. The command to do this is the same.
  prefs: []
  type: TYPE_NORMAL
- en: Use the right-click context menu, refactor, and move. Specify the location of
    the target directory where you want to relocate this class to. PhpStorm will prompt
    you on completion.
  prefs: []
  type: TYPE_NORMAL
- en: Moving a method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two prerequisites to moving a method to some other class. One is
    the most common prerequisite: you should be clear about what you are doing. The
    other is that the method to be moved must be static. If it is not, PhpStorm will
    alert you by saying **Move non-static method is not supported**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To move the method, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Just place the cursor over the method name, and access the **Refactor** option
    from the right-click context menu and move.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to provide the name of the target class where you wish to move this
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have the option to preview which occurrences will be affected by this change
    (movement).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are happy with the proposed results, you can refactor the method. The
    target class will now contain the method you just moved, as shown in the following
    screenshot:![How to do it...](img/3878OT_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Moving a variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving a member variable to some other class is simple but quite important from
    an architectural point of view. A variable usually denotes an attribute from the
    real world. So, if you planned sugar for `PizzaDish`, you will definitely and
    very quickly need to move the sugar from `PizzaDish` to some other dish, say `Cookie`.
    Just like methods, you can only move the static members to some other class.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Select **Refactor** from the right-click context menu, and then select **Move**.
  prefs: []
  type: TYPE_NORMAL
- en: If the current member variable to be moved was private in the current class,
    the **Move** operation will convert the member to public.
  prefs: []
  type: TYPE_NORMAL
- en: 'PhpStorm warns you before performing the move, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wherever you put the sugar, you should always try to use the syntactic sugar
    because it eases a bit of the documentation load.
  prefs: []
  type: TYPE_NORMAL
- en: PhpStorm said "Your knowledge level has been increased to 200 percent". You
    must say "Great!"... 200 percent... how? You already knew how to copy or cut and
    paste under the operating system you were comfortable with. 100 percent knowledge...
    Now you know a PhpStorm way to do the same plus 100 percent knowledge. So, applying
    simple mathematics, your knowledge level is now 200 percent"
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besides this refactoring by moving, you can also play around with your code
    by moving any program construct or identifier across the code. This is not refactoring
    but simple moving. PhpStorm can be configured to respect your `if-else` or other
    blocks of code. To move a line of code, you just need to place your cursor over
    the desired line and use the magical shortcut *Alt* + *Shift* + *Up* or *Down*.
    Your line will be moved up or down. This action works well for a selection of
    code as well.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The deletion of code from the code base is itself a very daring task. Asking
    a programmer to delete business logic in the code is like asking for one of the
    kidneys!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PhpStorm attempts to ease this by providing a **Safe Delete** option. You can
    delete an element in your code by refactoring it. This refactoring will find the
    occurrences of the selected element, and as soon as you ask it to proceed, PhpStorm
    happily deletes the selected occurrences of the element in your project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete a file, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the right-click context menu after placing the cursor over the target
    filename.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Safe Delete** option. PhpStorm then asks you whether you want to
    look into the comments and strings inside your code, as shown in the following
    screenshot:![How to do it...](img/3878OT_03_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you continue, PhpStorm will let you know of any potential problems in deleting
    the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can then have a look at the list of files that are under the radar by selecting
    the **View usages** options or pressing *Alt* + *F7*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PhpStorm will provide you with a list of the files that have references to what
    you are deleting. If you change your mind, you can rerun safe delete. If you are
    determined enough, you can proceed to delete. If you choose not to delete, you
    can cancel this process altogether, as shown in the following screenshot:![How
    to do it...](img/3878OT_03_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are happy with the consequences of the delete process, you can choose
    the **Delete Anyway** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once finalized, PhpStorm will proceed to delete the files by performing the
    following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding the elements in the file to be deleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the occurrence(s) of the elements in the other files in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing the occurrence from the other files in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting the file that was selected initially
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching code in a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is highly unlikely that anyone will remember each and every line of code.
    If your manager scolds you for not having remembered the last line where you made
    a certain change, all you need to do is to smile and continue working with PhpStorm.
    When you forget while typing where you kept your wireless keyboard or when you
    can forget where you kept your car keys while driving the same car, you can forget
    anything. Humans can forget anything. The human brain acts in unexplained ways.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having PhpStorm by your side means that you can afford to forget about your
    code. Even if you have some memory of keywords such as Pizza or Dish, there are
    facilities available in PhpStorm where you can find all mentions of these keywords.
    Are you still not convinced about the success of this power of PhpStorm? Stay
    tuned for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within PhpStorm, there is a **Find in path** tool. It is one of the best features
    provided by PhpStorm from the technical and usage perspectives. Technically, it
    is programmed to be smart while at the same time being fast. If you somehow happen
    to search something that PhpStorm thinks could become an issue, it warns you by
    showing you an alert, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3878OT_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The journey to search for an item in the project begins with a simple and easy-to-remember
    keyboard shortcut, *Ctrl* + *Shift* + *F*. As soon as you initiate the command,
    you will be asked to provide your search parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The first option you are provided is the string you want to search for. This
    is the most basic and the most important requirement needed for the search to
    proceed.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't provide any text, the **Find** button cannot perform a search.
    The text that you enter here should be provided strategically to save your and
    PhpStorm's time. The following example with multiple perspectives is the best.
    Assume that you are very hungry and need to know how to cook pizza. Your search
    string will be `pizza`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can narrow down the search criteria, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is a **Directory** radio button in the pop up. You can select that in
    order to let PhpStorm know that it has to select inside a particular directory
    only. When you specify the path to the target directory, PhpStorm will perform
    the same task of searching, but this time it will do so with narrowed-down search
    criteria. The point worth noting here is that a project is just a collection of
    directories, so when you search in a project, you actually search in a set of
    directories and/or certain files. When you select a directory, you thus make the
    search faster because PhpStorm has to search less. Lazy PhpStorm!
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are directories inside the target directory, you can tell PhpStorm
    to actually descend into the directories by selecting the **Recursively** option,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, you might still need to work through many results to find the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to tell PhpStorm to search in certain files, you can do that by
    selecting one of the following values from the drop-down box next to the **Custom**
    scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project Files**: The search will be limited to the project files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Projects and Libraries**: The search will include the project directory and
    the libraries that are used in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project Test Files**: The search will look into the test files for the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Files**: The search will look into the files that are currently open
    in the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Files in previous search results**: The search will look into the files that
    were used in the previous searches. This means PhpStorm remembers what you searched
    for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to have your own custom search criteria, you can do that as well.
    PhpStorm will record your preferences and allow you to switch to them whenever
    you want to search. To do that, there is the button next to the custom dropdown.
    When you press that, you will be asked to save your preferences, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As soon as you hit the **Save** button, your preferences will start appearing
    in the same dropdown under the division, **Custom** scopes. If, at some point
    in the future, you need to change the custom search scope you just created, you
    need to follow the same steps. The same form will appear, and you can edit your
    preferences from there.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You still have a lot to search. The human mind is very lazy, and it always
    looks for better alternatives that consume less energy. Searching inside the project
    was a bit too much. You still have to look into the search results manually and
    then decide which one your desired version of pizza is, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3878OT_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your `pizza` could have been a `Pizza`. In that case, you need to select the
    **Case Sensitive** option. PhpStorm will differentiate between `Pizza` and `pizza`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are sure that you just want to search for a pizza, you should check the
    **Whole words only** option. Thus, PhpStorm will know that it has to search pizza
    only and not the likes of `pizzadish`, `pizzacooking`, or `pizzacooked`.
  prefs: []
  type: TYPE_NORMAL
- en: If you just want to search for the occurrence of `pizza` inside comments (PHPDoc
    included), you need to select the **Comments only** option.
  prefs: []
  type: TYPE_NORMAL
- en: If you just want to find out how many strings contain the word `pizza`, you
    should select the **String literals only** option. PhpStorm will look at the string
    constants only.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most important part of searching appears when you decide that you are going
    to search for all those cases in which there is `pizza` at the end or in the middle
    or at the beginning. By now, regular expressions may start to ring a bell. Your
    search string can probably be like `^pizza` if you are interested in all words
    that start with pizza. You then need to select the **Regular expression** option.
    You will obviously want to create more and more use cases in order to master the
    art of **RegEx**. For help with regard to the usage of RegEx, you can head to
    the help section in PhpStorm. For ease, the same table has been copied here. People
    familiar with Java will feel at home!
  prefs: []
  type: TYPE_NORMAL
- en: Comparing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Changed code is a nightmare. This is unanimously agreed by the community of
    developers across the world. To control change, there are versioning systems available.
    These can show you in detail that a file has changed whenever you upload your
    changed file to the versioning server. However, who is responsible for the changes
    you make to your local working copy? How are you going to track which change caused
    your code to break down?
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use file comparisons. Since PhpStorm records each and every activity
    that you perform on the editor, you can find out the actual nonworking code by
    comparing your troublesome file across different timelines. If you feel *timelines*
    is an alien here, you might feel easy to know that PhpStorm actually saves your
    local copy versions according to timestamps. If at some point in time, your code
    stops working and undo will not help, you can use file comparison to review the
    timeline and compare the historical file with your current file. You will then
    be able to identify which change was the culprit in preventing your code from
    executing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to view the local history and compare the current file with the historical
    file, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to access the right-click context menu, select the **local history**
    option, and select the **Show history** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be given details of the differences according to the timestamp of the
    file's history, as shown in the following screenshot:![How to do it...](img/3878OT_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, you can compare two files with each other. You need to go to the
    project view, select the two files of interest, access the right-click context
    menu, and select the **Compare 2 files** option. You will be presented with a
    similar comparison window that shows any differences between the two files you
    selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The blue lines show changed content, the green line shows new content, and the
    red line shows conflicted content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are directional arrows(**>>** and **<<**), which indicate which change
    should be passed on to which file, as shown in the following screenshot:![How
    to do it...](img/3878OT_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t like the colors, you can change them as well by navigating to
    **File** | **Settings** | **Editor** | **Colors & Fonts** | **Diff** in your destination,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3878OT_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sometimes, you have to live with someone else's noncompliance with software
    engineering practices. Such cases appear when you work in a team. A team member
    has, by mistake, made some changes to the code and pushed it to the code base.
    Being the senior programmer, you are asked to swing into action and fix that.
    But you don't have a clue as to how to proceed. You can use the same difference
    (or file comparison system) to compare the files in the repository itself. Once
    you compare it with the last few revisions, you will, in no time at all, discover
    the error and will be able to fix it. Thus, you will prove your worth as a programmer!
    Thanks PhpStorm.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whatever comparison you do and whichever files you compare, the keyboard shortcut
    is *Ctrl* + *D* by default. It is expected that you will remember this. Remembering
    this shortcut is applicable to compare only when the change history window is
    open.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring elements using comparison
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides file comparison, this difference system can be a great deal of help
    if you wish to recover deleted files or folders. You just need to remember the
    name of the directory in which the deleted file was initially located. Will that
    relate to the problem? Yes, it will. If you view the local history of the folder,
    you will be able to see which actions have been performed on the directory.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The actions could be anything: new files or folders, a change in some of the
    files or folders, deletion of files or folders, and so on. You can now safely
    thank PhpStorm for monitoring each and every action you perform.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you find out the resource you were missing the most, you can revert to
    a timestamp that was just prior to the disastrous change.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest way to restore changes is to use the keyboard shortcut *Ctrl* +
    *Z* to undo. You will be able to undo your previous edit in the file until you
    close it. The same is true for projects as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can undo deletions, renames, or any changes that your project has. These
    are safe and PhpStorm keeps a record of all the history.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Restoring the file is based on timestamps, or it can be restored using SVN or
    other versioning tools. We have discussed that undo is useful in software engineering,
    but the working of that is based on your operating system, which is beyond the
    scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recovery process is already described in *Restoring Deleted Resources*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The only prerequisite is that the deletion process should be carried out inside
    PhpStorm only. If the resource was deleted outside it, PhpStorm will not be able
    to help.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the run configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having learned how to code within the PhpStorm editing system, you should be
    able to execute your code now. No, no! It is not being assumed that you don't
    know how to run code—the perspective being discussed here is PhpStorm. You can
    now read the mentioned statement again.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run configuration can be set for the project-wide files. To make the configurations,
    you need to go to **Run** | **Edit Configurations** from the main menu. A dialog
    will appear that asks you a number of questions. The answers will assist you by
    providing a quicker way to execute your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you open the settings area, you need to broadly concentrate on the methods
    that are of interest to you. If you do not specify any settings, PhpStorm will
    determine the type of the scripts that you have written. The PHP script settings
    are an emulation of the scenario when you used to execute a PHP script via the
    command line by providing command-line arguments, specifying interpreter options
    or environment variables in case you wished to do something wild.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The arguments you specify are the command-line arguments to your PHP script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The interpreter options are the options that you used to provide to your PHP
    interpreter. Some commonly used switches will make you recall those painful days:
    `-a`, `-v`, `--info`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Options | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-a` | Run as interactive shell. |'
  prefs: []
  type: TYPE_TB
- en: '| `-c<path>&#124;<file>` | Look for `php.ini` file in this directory. |'
  prefs: []
  type: TYPE_TB
- en: '| `-n` | No `php.ini` file will be used. |'
  prefs: []
  type: TYPE_TB
- en: '| `-d foo[=bar]` | Define INI entry `foo` with value `bar`. |'
  prefs: []
  type: TYPE_TB
- en: '| `-e` | Generate extended information for debugger/profiler. |'
  prefs: []
  type: TYPE_TB
- en: '| `-f<file>` | Parse and execute `<file>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `-h` | This is help. |'
  prefs: []
  type: TYPE_TB
- en: '| `-i` | This gives PHP information. |'
  prefs: []
  type: TYPE_TB
- en: '| `-l` | Syntax check only (lint). |'
  prefs: []
  type: TYPE_TB
- en: '| `-m` | Show code compiled in modules. |'
  prefs: []
  type: TYPE_TB
- en: '| `-r<code>` | Run PHP `<code>` without using script tags `<?...?>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `-B<begin_code>` | Run PHP `<begin_code>` before processing input lines.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-R<code>` | Run PHP `<code>` for every input line. |'
  prefs: []
  type: TYPE_TB
- en: '| `-F<file>` | Parse and execute `<file>` for every input line. |'
  prefs: []
  type: TYPE_TB
- en: '| `-E<end_code>` | Run PHP `<end_code>` after processing all input lines. |'
  prefs: []
  type: TYPE_TB
- en: '| `-H` | Hide any passed arguments from external tools. |'
  prefs: []
  type: TYPE_TB
- en: '| `-S<addr>:<port>` | Run with built-in web server. |'
  prefs: []
  type: TYPE_TB
- en: '| `-t<docroot>` | Specify document root `<docroot>` for built-in web server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-s` | Output HTML syntax highlighted source. |'
  prefs: []
  type: TYPE_TB
- en: '| `-v` | This gives the version number. |'
  prefs: []
  type: TYPE_TB
- en: '| `-w` | Output source with stripped comments and whitespace. |'
  prefs: []
  type: TYPE_TB
- en: '| `-z<file>` | Load Zend extension `<file>.` |'
  prefs: []
  type: TYPE_TB
- en: '| `args...` | Arguments passed to script. Use `-- args` when first argument
    starts with `-` or the script is read from `stdin`. |'
  prefs: []
  type: TYPE_TB
- en: '| `--ini` | Show configuration file names. |'
  prefs: []
  type: TYPE_TB
- en: '| `--rf<name>` | Show information about function `<name>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `--rc<name>` | Show information about class `<name>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `--re<name>` | Show information about extension `<name>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `--rz<name>` | Show information about Zend extension `<name>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `--ri<name>` | Show configuration for extension `<name>`. |'
  prefs: []
  type: TYPE_TB
- en: On saving the settings, your PHP script will be ready to be run.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is worth noting here that this is just a PhpStorm way of executing the command-line
    PHP scripts. If you remember that there is a terminal view available in PhpStorm,
    you will easily relate that you can do the same tasks in the terminal as well.
  prefs: []
  type: TYPE_NORMAL
- en: The other configuration worth your interest is the PHP Web Application settings.
    It appears to lay people or nonprogrammers that web programming is an easy cake.
  prefs: []
  type: TYPE_NORMAL
- en: Happy are those who reject the advice of evil men and who do not follow the
    example of sinners.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Thinking that web programming is easy, is like thinking that everyone can bake
    tasty pizza. Bear in mind that tasty is the word. To handle the challenge of executing
    a web-based application, you need to tell PhpStorm some facts that are basically
    settings. The settings you need to specify here are:'
  prefs: []
  type: TYPE_NORMAL
- en: A valid web server needs to be specified where your application will be launched.
    To configure a new server, there is a small square button to the right-hand side
    of the dropdown provided. Clicking on that, you are taken to an all-new settings
    area where you need to set up a web server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complications! Go find those who say web programming is easy. You are free to
    do what you want with them, but here, with PhpStorm, you need to specify the configurations
    to set up a web server. To set up a new web server, you need to specify the name
    that you will use to address this web server in the future (near or far). You
    need to set the hostname (you'll probably be using localhost or `127.0.0.1`) and
    the port number (the most common case will lead you to keep `80` as the value
    here). You can also specify a debugger here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, PhpStorm supports **Xdebug** and **zend-debugger**. Don't scratch
    your head as to what a debugger is. It will be taken up later in this book. Some
    developers prefer keeping their web server document root clean by only putting
    symbolic links inside it. The symbolic links point to some other location on the
    local disk. The reason for this is that the document root might not provide sufficient
    permissions that are required to write into a directory. You can obviously control
    your own directory more easily than the server's document root. If you have some
    symbolic links inside the document root, you can tell PhpStorm about it too. The
    left-hand side of the table is the actual path under which your project is saved,
    and to the right-hand side is the symbolic link under your document root.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can specify the start URL (base URL in spoken language). This is simple.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The browser in which you need to view the web application needs to be specified
    too. You can select the browser from a list of predefined browsers. If you think
    you need to be specifically targeting certain browsers to view your code in, you
    need to go to the **Web Browsers** settings. This can be reached via two ways:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The square button onto the right-hand side of the browser dropdown. The options
    that you get to fill in are the browser-related configurations. You can tell PhpStorm
    to follow the operating system underlying the selected default browser. You can
    select from either Firefox, Internet Explorer, Safari, Chrome, or Opera by selecting
    the path where the executable lies. You can also set a web browser as active or
    inactive and make a browser the default. You can use the browser settings with
    PhpStorm.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The other one is via **File** | **Settings** | **Web Browsers**. Both the paths
    take you to the same destination, which is as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How it works...](img/3878OT_03_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: There are lots of web browsers available across the world. You can select a
    web browser of your choice and set it here for use in PhpStorm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also set a pre-run configuration by setting some command that is executed
    just before your application gets executed. There are certain options available
    for configuration. You can even create your own new PhpStorm tool based on this
    configuration and use it here, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3878OT_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's all there is to set your web application to be executed on a web server
    and viewed on a web browser. To execute web application code that you created,
    you need to right-click on the file in the editor and select **Open in browser**.
    Bingo!
  prefs: []
  type: TYPE_NORMAL
- en: Running your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having entered the world of PHP knowingly, you also stepped into the world of
    web programming as PHP is a popular web programming language too. An application
    written in PHP will have to be executed in either of the two mediums.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a web server such as Apache with the PHP module installed. If you need
    a web server, you are probably creating a web-based application that will run
    on a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To run PHP code, you need to learn just a shortcut *Ctrl* + *Shift* + *F10*.
    The rest is taken care of by PhpStorm.
  prefs: []
  type: TYPE_NORMAL
- en: The code will be executed according to the configuration you set. For more details
    about executing PHP code, you can refer to the previous chapter as well.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you have no prior experience in executing PHP code in PhpStorm and
    you are not in the mood to try out something new, you can resort to old-school
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use PhpStorm as the development system and the file transfer system
    to upload your code onto the web server where you can test the code there and
    then. The precondition is that the webserver should be a development server and
    that you just need to make changes to the PHP code only.
  prefs: []
  type: TYPE_NORMAL
- en: Does it not sound too old fashioned? Maybe. Read on.
  prefs: []
  type: TYPE_NORMAL
- en: If the development server is your local machine, this will be an inefficient
    way of doing things. In the case of your development server not being on your
    local machine, even if it is on the local network, there is a time lag involved
    in transferring files over the network. Being a developer, obviously you cannot
    afford to have this time lag unless the business requirements are such that you
    cannot have the entire system set up on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In all other cases, it is recommended that you have a local replica of the development
    server set up on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in pace with the new fashion. PhpStorm rocks!
  prefs: []
  type: TYPE_NORMAL
