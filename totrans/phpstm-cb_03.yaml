- en: Chapter 3. Refactoring and Building
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。重构和构建
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Renaming elements
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名元素
- en: Copying elements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制元素
- en: Moving elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动元素
- en: Moving a method
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动一个方法
- en: Moving a variable
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动一个变量
- en: Deleting elements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除元素
- en: Searching code in a project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中搜索代码
- en: Comparing files
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较文件
- en: Restoring elements using comparison
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用比较来恢复元素
- en: Setting the run configuration
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置运行配置
- en: Running your code
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行你的代码
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Grandma''s advice: stick to software engineering.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 奶奶的建议：坚持软件工程。
- en: 'Software engineering advice: emphasize on code reusability. Any code base engineered
    according to the software engineering paradigm will be reusable. That is to say,
    you can use your code forever having written it once. They say "Write once, use
    forever".'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程建议：强调代码的可重用性。任何根据软件工程范式构建的代码库都将可重用。也就是说，你一旦编写了代码，就可以永远使用它。他们常说“一次编写，永远使用”。
- en: Revisiting the pizza baking use case, you will observe that in order to cook
    whatever dish, you just had to use the `add` function since you stuck to the mentioned
    paradigm. Suppose there are 50 different types of dishes that you are about to
    cook. Each dish is different in itself, but each will require the `add` method.
    If you convert this into technology, you will, in most cases, inherit the `Dish`
    class. That is your `PizzaDish`. The methods of the `Dish` class are reused in
    all the classes such as `PizzaDish`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾披萨烘焙用例，你会观察到为了烹饪任何菜肴，你只需使用`add`函数，因为你坚持了上述范式。假设你将要烹饪50种不同的菜肴。每种菜肴本身都不同，但每种都需要`add`方法。如果你将这转化为技术，你将在大多数情况下继承`Dish`类。那就是你的`PizzaDish`。`Dish`类的所有方法都在`PizzaDish`等所有类中重用。
- en: If you want to change the business logic, you can happily and comfortably change
    the logic inside the method body, and the changes will be reflected in all of
    the classes that inherit (or use) this class.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更改业务逻辑，你可以愉快地舒适地更改方法体内的逻辑，并且这些更改将在继承（或使用）此类的所有类中反映出来。
- en: So far, so good...but if you were to change the signature of the method inside
    the base class itself, what will you do? Yes, this can arise in the initial phase
    of development when the plans change a bit and thus lead to change in the use
    case.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利...但是，如果你要更改基类内部方法的签名，你会怎么做？是的，这可能在开发初期，当计划略有变化，从而导致用例变化时出现。
- en: Renaming elements
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名元素
- en: 'As the saying goes, change is inevitable; you must be ready for change, whatever
    the timeline might be. Engineers are negligent enough to commit mistakes while
    renaming—typographical errors, forgetting where to change, and so on. Don''t worry,
    you can at least rest assured with PhpStorm at your disposal. What PhpStorm does
    is that it provides a refactoring system, in which you can make your change penetrate
    throughout the project, visible in one single step: **The Refactoring Step**.
    If you opt for refactoring, you have the freedom to do a number of refactoring
    tasks.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如俗话所说，变化是不可避免的；你必须为变化做好准备，无论时间表如何。工程师在重命名时可能会犯错误——打字错误、忘记在哪里更改等等。别担心，至少你可以放心，因为你有PhpStorm。PhpStorm所做的是提供一个重构系统，在这个系统中，你可以让你的更改在整个项目中渗透，一步到位：**重构步骤**。如果你选择重构，你将拥有进行多项重构任务的自由。
- en: So, an `addIngredient` method can be easily written as `addingredient` at some
    point in code; `toolTip` can be written as `tootLip`, and so on. There might be
    five places in your code where you used the method `addSalt`, but when you changed
    the method signature of `add`, somehow you forgot and changed it in only four
    locations in your code base. Such petty mistakes can be safely termed as silly
    mistakes but might cause more damage than you can imagine. They eat up the most
    valuable resource—time. You will end up realizing that it was just a typographical
    error or a slip but only to realize that you crossed over the deadline.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`addIngredient`方法可以在代码的某个地方轻松地写成`addingredient`；`toolTip`可以写成`tootLip`等等。在你的代码中可能有五个地方使用了`addSalt`方法；但是，当你更改`add`的方法签名时，不知何故你忘记了，只在你代码库中的四个地方进行了更改。这样的小错误可以安全地称为愚蠢的错误，但可能会造成比你想象的更大的损害。它们消耗了最宝贵的资源——时间。你最终会意识到这只是一个打字错误或失误，但只是意识到你已经错过了截止日期。
- en: With refactoring, you can safely rename a method signature and tell PhpStorm
    to penetrate this change by finding and making the same change across all the
    occurrences.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重构，你可以安全地重命名方法签名，并告诉PhpStorm通过查找并跨所有出现进行相同的更改来渗透这个更改。
- en: 'Refactoring applies to all the elements of code: class names, method names,
    method signatures, variable names, and so on. PhpStorm treats them alike! Justice
    PhpStorm!'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重构适用于代码的所有元素：类名、方法名、方法签名、变量名等等。PhpStorm将它们视为一样！正义的PhpStorm！
- en: A directory in a PHP project is much like the package in Java—if you ever had
    a previous encounter with the Java programming language. In simple words, a directory
    in a PHP project is a grouping for classes. You can group similar classes in directories.
    Thus, your controller classes might be under your controller directory, model
    classes under model directory, configuration files under the `config` directory,
    and so on. Directories are important. Consider this, if you wish to change the
    name of a particular directory, you need to refactor it. You need to rename it.
    Thus, all those lines of code that refer to a class (`include`, `include once`
    or `require`, `require_once`) will be automatically updated once you rename a
    particular directory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP项目中，目录与Java中的包非常相似——如果你之前接触过Java编程语言。简单来说，PHP项目中的目录是类的分组。你可以在目录中分组相似的类。因此，你的控制器类可能位于控制器目录下，模型类位于模型目录下，配置文件位于`config`目录下，等等。目录很重要。考虑一下，如果你想要更改特定目录的名称，你需要重构它。你需要重命名它。因此，所有引用类的代码行（`include`、`include
    once`或`require`、`require_once`）在你重命名特定目录后都将自动更新。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The elements that we are going to rename are directories and classes; let's
    have a look at them one by one.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要重命名的元素是目录和类；让我们逐一看看它们。
- en: Renaming a directory
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重命名一个目录
- en: 'To rename a directory, perform the following steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要重命名一个目录，请执行以下步骤：
- en: In order to rename a directory, you need to access the right-click on the context
    menu and select the **Rename** option.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了重命名一个目录，你需要右键点击上下文菜单并选择**重命名**选项。
- en: On providing the new name, you can choose whether to let this change penetrate
    throughout the project wherever this directory has been referenced.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提供新名称时，你可以选择是否让这个更改渗透到整个项目中，无论这个目录在哪里被引用。
- en: You can also choose whether you want to replace the occurrence in comments and
    strings as well. This is shown in the following screenshot:![Renaming a directory](img/3878OT_03_01.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以选择是否要替换注释和字符串中的出现。这在上面的屏幕截图中有展示：![重命名目录](img/3878OT_03_01.jpg)
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you wish to see which occurrences are there corresponding to this directory,
    you can select the **Preview** button, or else, you can directly **Refactor**
    the changes. Once you have refactored the changes, you can sit back and concentrate
    on further development plans.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要查看与这个目录对应的哪些出现，你可以选择**预览**按钮，或者直接**重构**更改。一旦你重构了更改，你就可以坐下来专注于进一步的开发计划。
- en: Renaming a class
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重命名一个类
- en: Sometimes, even the best plan cannot be guaranteed to be foolproof. You might
    have started to go east, but due to the wind current, you felt that going southeast
    was a better and feasible option. Plan destroyed? Not at all—some amendments are
    required, and then you are good to go.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，即使最好的计划也不能保证万无一失。你可能已经开始向东走，但由于风向，你感觉向东南走是一个更好且可行的选择。计划被破坏了吗？当然不是——需要一些修正，然后你就可以继续前行了。
- en: Here's a use case—you planned to cook some `Dish` and went to the kitchen, but
    you found out that the essential ingredients were missing. What will you do? Remain
    hungry? Not at all... You will proceed to cook some other dish that is a `Dish`.
    In order to proceed, you will try to reuse some of the logic that you used in
    `PizzaDish`. In technical terms, you will need to rename (refactor) your class.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个用例——你计划做一些`Dish`（菜肴），然后去了厨房，但发现关键的食材缺失。你会怎么做？继续饿着？当然不是...你会继续做一些其他的`Dish`。为了继续，你会尝试重用你在`PizzaDish`中使用的某些逻辑。从技术角度来说，你需要重命名（重构）你的类。
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to do that (refactor your class), you need to place your cursor over
    the class name. access the right-click context menu, and select **Rename**. You
    can do **Preview** to check for which occurrences will be changed, and once you
    are convinced, you can do **Refactor**.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点（重构你的类），你需要将光标放在类名上，访问右键上下文菜单，并选择**重命名**。你可以进行**预览**来检查哪些出现将被更改，一旦你确信，你可以进行**重构**。
- en: Simple, isn't it? Indeed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 简单，不是吗？确实如此。
- en: 'The refactoring in this case will look as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，重构将看起来如下面的截图所示：
- en: '![How it works...](img/3878OT_03_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3878OT_03_02.jpg)'
- en: There's more...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Until now, we were familiar with renaming elements. Now, it is time to see how
    a method can be renamed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经熟悉了重命名元素。现在，是时候看看如何重命名一个方法了。
- en: Renaming a method
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重命名方法
- en: Refactoring in the case of methods in PhpStorm provides you with a fine-grained
    control to make changes in either the name of the method or the method signature.
    To change the method name is easy. Similar to renaming a directory and renaming
    a class, you need to place your cursor over the target method name, access the
    right-click context menu and proceed to **Rename**. You can apply the changes
    in the box specified. If you want to preview, you can **Preview**, or else you
    can **Refactor**, and PhpStorm will happily propagate the changes across the occurrences.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在PhpStorm中，对于方法的重构，你可以精细控制对方法名称或方法签名的更改。要更改方法名称很容易。类似于重命名目录和重命名类，你需要将光标放在目标方法名称上，访问右键上下文菜单，然后进行**重命名**。你可以在指定的框中应用更改。如果你想预览，你可以**预览**，或者你可以**重构**，PhpStorm会愉快地将更改传播到所有出现的地方。
- en: Renaming member variables
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重命名成员变量
- en: Of all the renaming criteria and explanations provided, renaming a member variable
    is the most typical, and it requires the most amount of maturity in handling.
    In short, this one is a "handle with care" situation. Variables can be local or
    global or scope-based. You require a variable name, `$salt`, for the ingredient
    salt to be added to `PizzaDish` and another `$salt` for algorithmic purposes—say
    to add random characters to your password to make the container for the cooked
    dish more safe. Thus, you want some salt to cook your dish as well as to prevent
    others from eating it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有提供的重命名标准和解释中，重命名成员变量是最典型的，并且需要处理上最多的成熟度。简而言之，这是一个“小心处理”的情况。变量可以是局部的、全局的或基于范围的。你可能需要一个变量名`$salt`，用于将盐这种成分添加到`PizzaDish`中，另一个`$salt`用于算法目的——比如说为了向你的密码中添加随机字符，使烹饪菜肴的容器更加安全。因此，你希望有一些盐来烹饪你的菜肴，同时也防止别人吃掉它。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In order to rename a variable carefully, the steps are the same as those described
    in the previous cases—the addition is the warning *CAREFUL*. You need to place
    your cursor over the variable name, access the right-click on the context menu,
    and select **Rename**, and PhpStorm will display all of the occurrences. You can
    select from the available list and selectively rename the required occurrences.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了谨慎地重命名变量，步骤与前面描述的相同——增加的是警告**小心**。你需要将光标放在变量名称上，访问右键上下文菜单，并选择**重命名**，PhpStorm将显示所有出现。你可以从可用列表中选择，并选择性地重命名所需的出现的变量。
- en: See also...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见...
- en: You can also refer to the renaming method and renaming directory in previous
    sections.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以参考前几节中关于重命名方法和重命名目录的内容。
- en: Changing the method signature is not difficult either. In plural cases, you
    might realize that passing an extra argument will do the trick for you. So, you
    have the magic wand PhpStorm with which you can very easily do the magic to make
    this happen.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 改变方法签名也不困难。在复数情况下，你可能会意识到传递一个额外的参数就能达到目的。所以，你有了PhpStorm的魔法棒，可以非常容易地施展魔法来实现这一点。
- en: You can start by placing the cursor over the method name, accessing the right-click
    context menu, and selecting **Change the Method Signature**. The magic begins.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从将光标放在方法名称上，访问右键上下文菜单，并选择**更改方法签名**开始。魔法开始了。
- en: PhpStorm provides you with many options to change the signature of the target
    method. You can refer to the previous chapter, where changing the method signature
    has been described in detail.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: PhpStorm为你提供了许多选项来更改目标方法的签名。你可以参考前面的章节，其中详细描述了如何更改方法签名。
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To avoid the need to change a method signature just for the sake of adding or
    deleting parameters, you can use PHP `func_get_args()`, by which you can make
    your method independent from the hassles of parameters. Thus, you just need to
    create a method with no parameters and use `func_get_args()` to get all the arguments,
    1, 5, or even 35 easily. You might ask "why in the world would we use parameters
    then?" The answer to this is rather short. You should have mercy on the PHP interpreter;
    it has to do more processing in that case.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免仅仅为了添加或删除参数而更改方法签名，您可以使用 PHP 的 `func_get_args()`，这样可以使您的方法独立于参数的麻烦。因此，您只需要创建一个不带参数的方法，并使用
    `func_get_args()` 来获取所有参数，1、5 或甚至 35 个参数都很容易。您可能会问“为什么我们一定要用参数呢？”这个答案相当简短。您应该对
    PHP 解释器表示同情；在这种情况下，它需要进行更多的处理。
- en: Copying elements
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制元素
- en: A directory contains classes, classes contain methods and variables, methods
    contain variables, and methods use variables.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 目录包含类，类包含方法和变量，方法包含变量，并且方法使用变量。
- en: The point to prove is that everything is related in one way or another. You
    can equally want to copy a directory, as you want to copy a class safely to some
    location other than the current location or declaration.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 需要证明的观点是，一切都在某种程度上相互关联。您同样可能想要复制一个目录，就像您想要安全地将一个类复制到当前位置或声明之外的其他位置一样。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Copying a directory means that somewhere, some concept has changed, which led
    to a regrouping of the classes. So, it will be better to think again. If you are
    still determined, you need to perform the following step:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 复制一个目录意味着在某个地方，某个概念发生了变化，这导致了类的重新分组。因此，最好再思考一下。如果您仍然决定这样做，您需要执行以下步骤：
- en: Go to **Project View**, (*Alt* + *1*), highlight the target directory, access
    the right-click context menu, go to **Refactor**, and then choose the **Copy**
    option. PhpStorm will ask you for the details. The details will be the new name,
    and the target directory under which you wish to copy the directory to. PhpStorm
    will copy that for you.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前往 **项目视图**（*Alt* + *1*），突出显示目标目录，访问右键单击上下文菜单，转到 **重构**，然后选择 **复制** 选项。PhpStorm
    将要求您提供详细信息。这些详细信息将是新名称，以及您希望将目录复制到的目标目录。PhpStorm 将为您复制。
- en: 'There is one more way to achieve the same effect for a directory:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种方法可以达到相同的效果，针对目录：
- en: You can also directly copy a directory from one location to another by the same
    old *Ctrl* + *C* and *Ctrl* + *V* combination.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您也可以通过传统的 *Ctrl* + *C* 和 *Ctrl* + *V* 组合直接将一个目录从一个位置复制到另一个位置。
- en: For a directory, it creates the same effect the difference lies in the way they
    work. Refactor is a more PhpStorm way to copy; it does not save anything to the
    clipboard.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于目录，它创建相同的效果，区别在于它们工作的方式。重构是 PhpStorm 复制的一种更优雅的方式；它不会将任何内容保存到剪贴板中。
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Copying is more an operating system approach. It copies the name as a string
    value in the clipboard. So, you can paste the name as-is inside the editor and
    paste the directory as-is in the project view. Interesting, isn't it?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 复制更像是一种操作系统方法。它将名称作为字符串值复制到剪贴板中。因此，您可以在编辑器中直接粘贴名称，在项目视图中直接粘贴目录。有趣，不是吗？
- en: 'The copy directory looks as it does in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 复制目录的外观如下所示：
- en: '![How it works...](img/3878OT_03_03.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3878OT_03_03.jpg)'
- en: Which one should you choose then? It's your call. Do either, but make sure you
    follow the **Don't Repeat Yourself** (**DRY**) principle.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，您应该选择哪一个呢？这取决于您。做任何一项，但请确保您遵循 **不要重复自己**（**DRY**）的原则。
- en: There's more...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As of now, you are familiar with copying the elements, and now it is time to
    move to copying a class.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经熟悉了复制元素，现在是时候转向复制一个类了。
- en: Copying a class
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复制一个类
- en: Copying a class means copying the business logic in most scenarios. In software
    engineering, a sophisticated name given to this process is **Off-The-Shelf** development.
    You can cheat everyone but not yourself, you copycat! A class is copied in order
    to reuse most of the existing business logic that exists in it. More logic is,
    however, pumped into the class to inflate it. To copy a class and start your Off-The-Shelf
    development, you need to copy a class by accessing the right-click context menu
    and selecting the **Copy** option. The dialog box is similar. The questions are
    similar. The effect is similar. The outcome is different. Here, a single class
    is copied from one location to another.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 复制一个类在大多数情况下意味着复制其中的业务逻辑。在软件工程中，这个过程被赋予了一个复杂的名称，即**现成**开发。你可以欺骗所有人，但不要欺骗自己，你只是一个模仿者！复制类的目的是为了重用其中大部分现有的业务逻辑。然而，更多的逻辑被注入到类中以膨胀它。要复制一个类并开始你的现成开发，你需要通过访问右键单击上下文菜单并选择**复制**选项来复制一个类。对话框是相似的。问题也是相似的。效果是相似的。结果却不同。在这里，一个类从一处复制到另一处。
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Like you can do a copy-paste for a directory, you could do exactly the same
    for a class of your choice. Following the operating system way of copying, the
    name of the class to be copied is placed on the clipboard as well. If you paste
    it in an editor, the name of the class will be pasted, and if you paste the name
    of the class in the Project view, the class as a whole will be pasted inside the
    Project view at the selected location.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以对目录进行复制粘贴一样，你也可以对你选择的类执行完全相同的操作。遵循操作系统的复制方式，要复制的类的名称也被放在了剪贴板上。如果你在编辑器中粘贴它，类的名称将被粘贴，如果你在项目视图中粘贴类的名称，整个类将在项目视图中被粘贴到所选位置。
- en: Moving elements
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动元素
- en: 'Any keen software engineer knows the importance of cut or copy and paste. The
    information associated with this important statement is given here:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 任何敏锐的软件工程师都知道剪切或复制和粘贴的重要性。与这个重要声明相关的信息如下：
- en: Cutting and pasting is faster than copying and pasting. However, cutting and
    pasting changes the location of the selected element. Also, copying keeps the
    original in place, whereas cutting removes it from where it was.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪切和粘贴比复制和粘贴更快。然而，剪切和粘贴会改变所选元素的位置。而复制则保持原始位置不变，剪切则将其从原始位置移除。
- en: Any dedicated software engineer will already have this knowledge through past
    experience.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 任何有经验的软件工程师都会通过过去的经验拥有这种知识。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We have talked about renaming elements, copying elements, and now, it's time
    to move a directory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了重命名元素、复制元素，现在，是时候移动一个目录了。
- en: Moving a directory
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动目录
- en: 'If you are sure that somewhere, your architecture has changed in such a way
    that your grouping has changed, you should be prepared to move an entire directory
    (your grouping) to some other grouping (some other directory or location). In
    order to move a directory, you need to perform the following steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确定你的架构在某处发生了变化，以至于你的分组发生了变化，你应该准备好将整个目录（你的分组）移动到另一个分组（另一个目录或位置）。为了移动一个目录，你需要执行以下步骤：
- en: You need to go to the Project view, select the desired directory (also known
    as grouping), access the right-click context menu, and select the **Move** option.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要转到项目视图，选择所需的目录（也称为分组），访问右键单击上下文菜单，并选择**移动**选项。
- en: PhpStorm will ask you a single question as to where you want to move this selected
    directory.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PhpStorm将询问你一个问题，即你希望将所选目录移动到何处。
- en: Once you answer, PhpStorm will take care of the rest of the things, and your
    task will be accomplished.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你回答，PhpStorm将处理其余的事情，你的任务将完成。
- en: Moving a class
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动类
- en: You want to move your class to some other directory (or namespace, folder, or
    grouping in the most layman terminology) ideally in some case where you started
    off your development in haste without a proper plan and now you realize that what
    you thought your entity will be like was not the best solution possible. OK, don't
    blame yourself. Instead, use PhpStorm to help you refactor your class by moving
    it to a more appropriate place. The command to do this is the same.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你想把你的类移动到另一个目录（或命名空间、文件夹或分组，用最通俗的话说），理想情况下是在你匆忙开始开发而没有适当计划的情况下，现在你意识到你想象中的实体不是最佳解决方案。好吧，不要责怪自己。相反，使用PhpStorm帮助你通过将其移动到更合适的位置来重构你的类。执行此操作的命令是相同的。
- en: Use the right-click context menu, refactor, and move. Specify the location of
    the target directory where you want to relocate this class to. PhpStorm will prompt
    you on completion.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用右键单击上下文菜单，进行重构，然后移动。指定目标目录的位置，您希望将此类移动到该位置。PhpStorm将在操作完成后提示您。
- en: Moving a method
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动方法
- en: 'There are two prerequisites to moving a method to some other class. One is
    the most common prerequisite: you should be clear about what you are doing. The
    other is that the method to be moved must be static. If it is not, PhpStorm will
    alert you by saying **Move non-static method is not supported**.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将方法移动到其他类的前提有两个。一个是最常见的：您应该清楚自己在做什么。另一个是要移动的方法必须是静态的。如果不是，PhpStorm将通过提示“不支持移动非静态方法”来警告您。
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To move the method, perform the following steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要移动方法，请执行以下步骤：
- en: Just place the cursor over the method name, and access the **Refactor** option
    from the right-click context menu and move.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需将光标放在方法名称上，从右键单击上下文菜单中访问**重构**选项并移动。
- en: You need to provide the name of the target class where you wish to move this
    method.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要提供目标类的名称，您希望将此方法移动到该类。
- en: You have the option to preview which occurrences will be affected by this change
    (movement).
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择预览此更改（移动）将影响哪些出现。
- en: Once you are happy with the proposed results, you can refactor the method. The
    target class will now contain the method you just moved, as shown in the following
    screenshot:![How to do it...](img/3878OT_03_04.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您对建议的结果感到满意，您就可以重构方法。目标类现在将包含您刚刚移动的方法，如下截图所示：![如何操作...](img/3878OT_03_04.jpg)
- en: Moving a variable
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动变量
- en: Moving a member variable to some other class is simple but quite important from
    an architectural point of view. A variable usually denotes an attribute from the
    real world. So, if you planned sugar for `PizzaDish`, you will definitely and
    very quickly need to move the sugar from `PizzaDish` to some other dish, say `Cookie`.
    Just like methods, you can only move the static members to some other class.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将成员变量移动到其他类既简单又非常重要，从架构角度来看。变量通常表示现实世界中的属性。因此，如果您为`PizzaDish`计划了糖，您肯定会非常快速地将糖从`PizzaDish`移动到其他菜肴，比如`Cookie`。就像方法一样，您只能将静态成员移动到其他类。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Select **Refactor** from the right-click context menu, and then select **Move**.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从右键单击上下文菜单中选择**重构**，然后选择**移动**。
- en: If the current member variable to be moved was private in the current class,
    the **Move** operation will convert the member to public.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要移动的当前成员变量在当前类中是私有的，则**移动**操作将成员转换为公共。
- en: 'PhpStorm warns you before performing the move, as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行移动操作之前，PhpStorm会警告您，如下截图所示：
- en: '![How to do it...](img/3878OT_03_05.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3878OT_03_05.jpg)'
- en: Tip
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Wherever you put the sugar, you should always try to use the syntactic sugar
    because it eases a bit of the documentation load.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您在哪里放糖，您都应该始终尝试使用语法糖，因为它可以稍微减轻一些文档负担。
- en: PhpStorm said "Your knowledge level has been increased to 200 percent". You
    must say "Great!"... 200 percent... how? You already knew how to copy or cut and
    paste under the operating system you were comfortable with. 100 percent knowledge...
    Now you know a PhpStorm way to do the same plus 100 percent knowledge. So, applying
    simple mathematics, your knowledge level is now 200 percent"
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: PhpStorm说“您的知识水平已提升至200%”。您必须说“太棒了”！...200%...如何？您已经知道如何在您熟悉的操作系统下复制或剪切粘贴。100%的知识...现在您知道了使用PhpStorm进行相同操作的方法，并且增加了100%的知识。所以，应用简单的数学，您的知识水平现在是200%”
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Besides this refactoring by moving, you can also play around with your code
    by moving any program construct or identifier across the code. This is not refactoring
    but simple moving. PhpStorm can be configured to respect your `if-else` or other
    blocks of code. To move a line of code, you just need to place your cursor over
    the desired line and use the magical shortcut *Alt* + *Shift* + *Up* or *Down*.
    Your line will be moved up or down. This action works well for a selection of
    code as well.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过移动进行重构之外，您还可以通过将任何程序结构或标识符在代码中移动来玩转您的代码。这不仅仅是重构，而是简单的移动。PhpStorm可以配置为尊重您的`if-else`或其他代码块。要移动一行代码，只需将光标放在所需的行上，并使用神奇的快捷键*Alt*
    + *Shift* + *向上*或*向下*。您的行将向上或向下移动。此操作对代码选择也有效。
- en: Deleting elements
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除元素
- en: The deletion of code from the code base is itself a very daring task. Asking
    a programmer to delete business logic in the code is like asking for one of the
    kidneys!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码库中删除代码本身是一项非常大胆的任务。要求程序员删除代码中的业务逻辑就像要求他捐出一个肾脏一样！
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: PhpStorm attempts to ease this by providing a **Safe Delete** option. You can
    delete an element in your code by refactoring it. This refactoring will find the
    occurrences of the selected element, and as soon as you ask it to proceed, PhpStorm
    happily deletes the selected occurrences of the element in your project.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: PhpStorm通过提供**安全删除**选项来简化这个过程。您可以通过重构来删除代码中的元素。这个重构会找到所选元素的所有出现，一旦您要求它继续，PhpStorm就会愉快地删除项目中该元素的所有选定出现。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To delete a file, you need to follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除文件，您需要遵循以下步骤：
- en: Access the right-click context menu after placing the cursor over the target
    filename.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标文件名上放置光标后，访问右键单击上下文菜单。
- en: Choose the **Safe Delete** option. PhpStorm then asks you whether you want to
    look into the comments and strings inside your code, as shown in the following
    screenshot:![How to do it...](img/3878OT_03_16.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**安全删除**选项。然后，PhpStorm会询问您是否想查看代码中的注释和字符串，如下面的截图所示：![如何操作...](img/3878OT_03_16.jpg)
- en: If you continue, PhpStorm will let you know of any potential problems in deleting
    the file.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您继续，PhpStorm会通知您删除文件时可能出现的任何潜在问题。
- en: You can then have a look at the list of files that are under the radar by selecting
    the **View usages** options or pressing *Alt* + *F7*.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过选择**查看用法**选项或按*Alt* + *F7*来查看那些处于雷达之下的文件列表。
- en: PhpStorm will provide you with a list of the files that have references to what
    you are deleting. If you change your mind, you can rerun safe delete. If you are
    determined enough, you can proceed to delete. If you choose not to delete, you
    can cancel this process altogether, as shown in the following screenshot:![How
    to do it...](img/3878OT_03_17.jpg)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PhpStorm会提供一个列表，列出所有引用您要删除内容的文件。如果您改变主意，可以重新运行安全删除。如果您决心已定，可以继续删除。如果您选择不删除，可以取消整个过程，如下面的截图所示：![如何操作...](img/3878OT_03_17.jpg)
- en: If you are happy with the consequences of the delete process, you can choose
    the **Delete Anyway** option.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您对删除过程的结果感到满意，可以选择**无论如何删除**选项。
- en: How it works…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Once finalized, PhpStorm will proceed to delete the files by performing the
    following actions:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定，PhpStorm将执行以下操作来删除文件：
- en: Finding the elements in the file to be deleted
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在要删除的文件中找到元素
- en: Finding the occurrence(s) of the elements in the other files in the project
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中的其他文件中找到元素的出现
- en: Removing the occurrence from the other files in the project
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从项目中的其他文件中删除出现
- en: Deleting the file that was selected initially
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除最初选定的文件
- en: Searching code in a project
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中搜索代码
- en: It is highly unlikely that anyone will remember each and every line of code.
    If your manager scolds you for not having remembered the last line where you made
    a certain change, all you need to do is to smile and continue working with PhpStorm.
    When you forget while typing where you kept your wireless keyboard or when you
    can forget where you kept your car keys while driving the same car, you can forget
    anything. Humans can forget anything. The human brain acts in unexplained ways.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有人会记住每一行代码。如果您的经理因为您没有记住最后修改的那一行而责备您，您只需微笑并继续使用PhpStorm工作。当您在输入时忘记无线键盘放在哪里，或者在驾驶同一辆车时忘记车钥匙放在哪里，您可能会忘记任何事情。人类可以忘记任何事情。人脑以无法解释的方式行事。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Having PhpStorm by your side means that you can afford to forget about your
    code. Even if you have some memory of keywords such as Pizza or Dish, there are
    facilities available in PhpStorm where you can find all mentions of these keywords.
    Are you still not convinced about the success of this power of PhpStorm? Stay
    tuned for more information.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有PhpStorm在身边意味着您可以忘记您的代码。即使您对像Pizza或Dish这样的关键字有一些记忆，在PhpStorm中也有可以找到所有这些关键字引用的设施。您还没有被PhpStorm的这种强大功能所说服吗？请继续关注更多信息。
- en: 'Within PhpStorm, there is a **Find in path** tool. It is one of the best features
    provided by PhpStorm from the technical and usage perspectives. Technically, it
    is programmed to be smart while at the same time being fast. If you somehow happen
    to search something that PhpStorm thinks could become an issue, it warns you by
    showing you an alert, as shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在PhpStorm中，有一个**在路径中查找**工具。从技术和使用角度来看，这是PhpStorm提供的一项最佳功能。从技术角度来看，它被编程为既智能又快速。如果你搜索到PhpStorm认为可能成为问题的内容，它会通过显示警告来提醒你，如下面的截图所示：
- en: '![Getting ready](img/3878OT_03_06.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/3878OT_03_06.jpg)'
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The journey to search for an item in the project begins with a simple and easy-to-remember
    keyboard shortcut, *Ctrl* + *Shift* + *F*. As soon as you initiate the command,
    you will be asked to provide your search parameters.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中搜索一个项目的旅程从简单且易于记忆的键盘快捷键开始，*Ctrl* + *Shift* + *F*。一旦你启动了命令，你将被要求提供你的搜索参数。
- en: The first option you are provided is the string you want to search for. This
    is the most basic and the most important requirement needed for the search to
    proceed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你提供的第一个选项是你想要搜索的字符串。这是搜索能够继续的最基本和最重要的要求。
- en: If you don't provide any text, the **Find** button cannot perform a search.
    The text that you enter here should be provided strategically to save your and
    PhpStorm's time. The following example with multiple perspectives is the best.
    Assume that you are very hungry and need to know how to cook pizza. Your search
    string will be `pizza`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有提供任何文本，**查找**按钮无法执行搜索。你在这里输入的文本应该有策略地提供，以节省你和PhpStorm的时间。以下具有多个视角的示例是最好的。假设你非常饿，需要知道如何烤披萨。你的搜索字符串将是`pizza`。
- en: 'You can narrow down the search criteria, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以缩小搜索条件，如下面的截图所示：
- en: '![How to do it...](img/3878OT_03_07.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3878OT_03_07.jpg)'
- en: There is a **Directory** radio button in the pop up. You can select that in
    order to let PhpStorm know that it has to select inside a particular directory
    only. When you specify the path to the target directory, PhpStorm will perform
    the same task of searching, but this time it will do so with narrowed-down search
    criteria. The point worth noting here is that a project is just a collection of
    directories, so when you search in a project, you actually search in a set of
    directories and/or certain files. When you select a directory, you thus make the
    search faster because PhpStorm has to search less. Lazy PhpStorm!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在弹出窗口中有一个**目录**单选按钮。你可以选择它来让PhpStorm知道它必须只选择特定目录内。当你指定目标目录的路径时，PhpStorm将执行相同的搜索任务，但这次它将使用缩小后的搜索条件。这里值得注意的一点是，项目只是一个目录的集合，所以当你在一个项目中搜索时，你实际上是在一组目录和/或某些文件中搜索。当你选择一个目录时，因此使搜索更快，因为PhpStorm需要搜索的更少。懒惰的PhpStorm！
- en: 'If there are directories inside the target directory, you can tell PhpStorm
    to actually descend into the directories by selecting the **Recursively** option,
    as shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标目录内有子目录，你可以通过选择**递归**选项来告诉PhpStorm实际进入这些目录，如下面的截图所示：
- en: '![How to do it...](img/3878OT_03_08.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3878OT_03_08.jpg)'
- en: However, you might still need to work through many results to find the target.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能仍然需要浏览许多结果来找到目标。
- en: 'If you want to tell PhpStorm to search in certain files, you can do that by
    selecting one of the following values from the drop-down box next to the **Custom**
    scope:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要告诉PhpStorm在特定文件中搜索，你可以通过从**自定义**范围旁边的下拉框中选择以下值之一来实现：
- en: '**Project Files**: The search will be limited to the project files.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目文件**：搜索将限制在项目文件中。'
- en: '**Projects and Libraries**: The search will include the project directory and
    the libraries that are used in the project.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目和库**：搜索将包括项目目录和项目中使用的库。'
- en: '**Project Test Files**: The search will look into the test files for the project.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目测试文件**：搜索将查看项目的测试文件。'
- en: '**Open Files**: The search will look into the files that are currently open
    in the editor.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开的文件**：搜索将查看当前在编辑器中打开的文件。'
- en: '**Files in previous search results**: The search will look into the files that
    were used in the previous searches. This means PhpStorm remembers what you searched
    for.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**之前搜索结果中的文件**：搜索将查看之前搜索中使用的文件。这意味着PhpStorm会记住你搜索了什么。'
- en: 'If you want to have your own custom search criteria, you can do that as well.
    PhpStorm will record your preferences and allow you to switch to them whenever
    you want to search. To do that, there is the button next to the custom dropdown.
    When you press that, you will be asked to save your preferences, as shown in the
    following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要自己的自定义搜索标准，你也可以做到。PhpStorm将记录你的首选项，并允许你随时切换到它们进行搜索。为此，有一个在自定义下拉菜单旁边的按钮。当你按下它时，你将被要求保存你的首选项，如下面的截图所示：
- en: '![How to do it...](img/3878OT_03_09.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3878OT_03_09.jpg)'
- en: As soon as you hit the **Save** button, your preferences will start appearing
    in the same dropdown under the division, **Custom** scopes. If, at some point
    in the future, you need to change the custom search scope you just created, you
    need to follow the same steps. The same form will appear, and you can edit your
    preferences from there.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击**保存**按钮，你的首选项将开始出现在同一下拉菜单下的**自定义**范围内。如果在未来的某个时刻，你需要更改你刚刚创建的自定义搜索范围，你需要遵循相同的步骤。将出现相同的表单，你可以从那里编辑你的首选项。
- en: How it works…
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'You still have a lot to search. The human mind is very lazy, and it always
    looks for better alternatives that consume less energy. Searching inside the project
    was a bit too much. You still have to look into the search results manually and
    then decide which one your desired version of pizza is, as shown in the following
    screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你还有许多要搜索的内容。人的大脑非常懒惰，它总是寻找消耗更少能量的更好的替代方案。在项目内部搜索有点太多。你仍然需要手动查看搜索结果，然后决定你想要的披萨版本，如下面的截图所示：
- en: '![How it works…](img/3878OT_03_10.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/3878OT_03_10.jpg)'
- en: Your `pizza` could have been a `Pizza`. In that case, you need to select the
    **Case Sensitive** option. PhpStorm will differentiate between `Pizza` and `pizza`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`pizza`可能是一个`Pizza`。在这种情况下，你需要选择**区分大小写**选项。PhpStorm将区分`Pizza`和`pizza`。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are sure that you just want to search for a pizza, you should check the
    **Whole words only** option. Thus, PhpStorm will know that it has to search pizza
    only and not the likes of `pizzadish`, `pizzacooking`, or `pizzacooked`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确定你只想搜索披萨，你应该选择**仅全词**选项。这样，PhpStorm就会知道它只能搜索披萨，而不是像`pizzadish`、`pizzacooking`或`pizzacooked`这样的类似词。
- en: If you just want to search for the occurrence of `pizza` inside comments (PHPDoc
    included), you need to select the **Comments only** option.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想搜索注释中（包括PHPDoc）`pizza`的出现，你需要选择**仅注释**选项。
- en: If you just want to find out how many strings contain the word `pizza`, you
    should select the **String literals only** option. PhpStorm will look at the string
    constants only.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想找出包含单词`pizza`的字符串数量，你应该选择**仅字符串字面量**选项。PhpStorm将只查看字符串常量。
- en: There's more...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: The most important part of searching appears when you decide that you are going
    to search for all those cases in which there is `pizza` at the end or in the middle
    or at the beginning. By now, regular expressions may start to ring a bell. Your
    search string can probably be like `^pizza` if you are interested in all words
    that start with pizza. You then need to select the **Regular expression** option.
    You will obviously want to create more and more use cases in order to master the
    art of **RegEx**. For help with regard to the usage of RegEx, you can head to
    the help section in PhpStorm. For ease, the same table has been copied here. People
    familiar with Java will feel at home!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索最重要的部分出现在你决定要搜索所有以`pizza`结尾、在中间或开头的案例时。到目前为止，正则表达式可能已经开始响起铃声。如果你对以披萨开头的所有单词感兴趣，你的搜索字符串可能类似于`^pizza`。然后你需要选择**正则表达式**选项。显然，你将想要创建更多和更多的用例，以便掌握**正则表达式（RegEx）**的艺术。有关正则表达式使用的帮助，你可以前往PhpStorm的帮助部分。为了方便，相同的表格已经复制在这里。熟悉Java的人会感到宾至如归！
- en: Comparing files
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较文件
- en: Changed code is a nightmare. This is unanimously agreed by the community of
    developers across the world. To control change, there are versioning systems available.
    These can show you in detail that a file has changed whenever you upload your
    changed file to the versioning server. However, who is responsible for the changes
    you make to your local working copy? How are you going to track which change caused
    your code to break down?
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的更改是一个噩梦。全世界开发者的社区都一致认为这一点。为了控制更改，有版本控制系统可用。这些系统可以在你将更改的文件上传到版本控制系统时详细显示文件何时发生变化。然而，谁对你的本地工作副本所做的更改负责？你将如何跟踪哪个更改导致你的代码崩溃？
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can use file comparisons. Since PhpStorm records each and every activity
    that you perform on the editor, you can find out the actual nonworking code by
    comparing your troublesome file across different timelines. If you feel *timelines*
    is an alien here, you might feel easy to know that PhpStorm actually saves your
    local copy versions according to timestamps. If at some point in time, your code
    stops working and undo will not help, you can use file comparison to review the
    timeline and compare the historical file with your current file. You will then
    be able to identify which change was the culprit in preventing your code from
    executing.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用文件比较功能。由于PhpStorm记录了您在编辑器上执行的每一个活动，您可以通过比较不同时间线上的问题文件来找出实际的非工作代码。如果您觉得*时间线*在这里很陌生，您可能会更容易知道PhpStorm实际上是根据时间戳保存您的本地副本版本。如果在某个时间点，您的代码停止工作，撤销操作也无法帮助，您可以使用文件比较来查看时间线，并将历史文件与当前文件进行比较。这样，您就能识别出是哪个更改阻止了您的代码执行。
- en: How to do it...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to view the local history and compare the current file with the historical
    file, perform the following steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看本地历史记录并将当前文件与历史文件进行比较，请执行以下步骤：
- en: You need to access the right-click context menu, select the **local history**
    option, and select the **Show history** option.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要访问右键点击上下文菜单，选择**本地历史**选项，并选择**显示历史**选项。
- en: You will be given details of the differences according to the timestamp of the
    file's history, as shown in the following screenshot:![How to do it...](img/3878OT_03_11.jpg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据文件历史的时间戳，您将获得差异的详细信息，如下截图所示：![如何操作...](img/3878OT_03_11.jpg)
- en: Similarly, you can compare two files with each other. You need to go to the
    project view, select the two files of interest, access the right-click context
    menu, and select the **Compare 2 files** option. You will be presented with a
    similar comparison window that shows any differences between the two files you
    selected.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，您也可以比较两个文件。您需要转到项目视图，选择感兴趣的文件，点击右键访问上下文菜单，并选择**比较2个文件**选项。您将看到一个类似的比较窗口，显示您所选两个文件之间的任何差异。
- en: The blue lines show changed content, the green line shows new content, and the
    red line shows conflicted content.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 蓝色线条显示的是更改的内容，绿色线条显示的是新内容，红色线条显示的是冲突内容。
- en: There are directional arrows(**>>** and **<<**), which indicate which change
    should be passed on to which file, as shown in the following screenshot:![How
    to do it...](img/3878OT_03_12.jpg)
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有方向箭头（**>>** 和 **<<**），它们指示哪些更改应该传递到哪个文件，如下截图所示：![如何操作...](img/3878OT_03_12.jpg)
- en: How it works...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you don''t like the colors, you can change them as well by navigating to
    **File** | **Settings** | **Editor** | **Colors & Fonts** | **Diff** in your destination,
    as shown in the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不喜欢颜色，您也可以通过导航到**文件** | **设置** | **编辑器** | **颜色与字体** | **差异**来更改它们，如下截图所示：
- en: '![How it works...](img/3878OT_03_13.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/3878OT_03_13.jpg)'
- en: Sometimes, you have to live with someone else's noncompliance with software
    engineering practices. Such cases appear when you work in a team. A team member
    has, by mistake, made some changes to the code and pushed it to the code base.
    Being the senior programmer, you are asked to swing into action and fix that.
    But you don't have a clue as to how to proceed. You can use the same difference
    (or file comparison system) to compare the files in the repository itself. Once
    you compare it with the last few revisions, you will, in no time at all, discover
    the error and will be able to fix it. Thus, you will prove your worth as a programmer!
    Thanks PhpStorm.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，您必须忍受他人对软件工程实践的违规行为。当您在团队工作时，这种情况就会出现。团队成员不小心对代码进行了更改并将其推送到代码库。作为高级程序员，您被要求采取行动并修复它。但您对如何进行操作毫无头绪。您可以使用相同的差异（或文件比较系统）来比较存储库中的文件。一旦您将其与最后几项修订进行比较，您将立即发现错误，并能够修复它。这样，您将证明您作为程序员的实力！感谢PhpStorm。
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Whatever comparison you do and whichever files you compare, the keyboard shortcut
    is *Ctrl* + *D* by default. It is expected that you will remember this. Remembering
    this shortcut is applicable to compare only when the change history window is
    open.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您进行何种比较，无论您比较哪些文件，默认的键盘快捷键是*Ctrl* + *D*。希望您能记住这个快捷键。记住这个快捷键仅适用于更改历史窗口打开时进行比较。
- en: Restoring elements using comparison
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用比较恢复元素
- en: Besides file comparison, this difference system can be a great deal of help
    if you wish to recover deleted files or folders. You just need to remember the
    name of the directory in which the deleted file was initially located. Will that
    relate to the problem? Yes, it will. If you view the local history of the folder,
    you will be able to see which actions have been performed on the directory.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文件比较，如果您希望恢复已删除的文件或文件夹，这个差异系统可以提供极大的帮助。您只需记住已删除文件最初所在的目录名称。这会与问题相关吗？是的，会的。如果您查看文件夹的本地历史记录，您将能够看到对目录执行了哪些操作。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The actions could be anything: new files or folders, a change in some of the
    files or folders, deletion of files or folders, and so on. You can now safely
    thank PhpStorm for monitoring each and every action you perform.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 操作可以是任何东西：新文件或文件夹，某些文件或文件夹的更改，文件或文件夹的删除，等等。现在您可以安全地感谢PhpStorm监控您所执行的每一个操作。
- en: Once you find out the resource you were missing the most, you can revert to
    a timestamp that was just prior to the disastrous change.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您找到您最缺少的资源，您可以将时间戳回滚到灾难性更改之前。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The simplest way to restore changes is to use the keyboard shortcut *Ctrl* +
    *Z* to undo. You will be able to undo your previous edit in the file until you
    close it. The same is true for projects as well.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复更改的最简单方法是使用键盘快捷键*Ctrl* + *Z*撤销。您将能够撤销文件中的上一个编辑，直到您关闭它。对于项目也是如此。
- en: You can undo deletions, renames, or any changes that your project has. These
    are safe and PhpStorm keeps a record of all the history.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以撤销删除、重命名或项目中的任何更改。这些都是安全的，PhpStorm会记录所有历史记录。
- en: How it works...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Restoring the file is based on timestamps, or it can be restored using SVN or
    other versioning tools. We have discussed that undo is useful in software engineering,
    but the working of that is based on your operating system, which is beyond the
    scope of this book.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的恢复基于时间戳，或者可以使用SVN或其他版本控制工具进行恢复。我们已经讨论过撤销在软件工程中的有用性，但其工作原理基于您的操作系统，这超出了本书的范围。
- en: See also
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recovery process is already described in *Restoring Deleted Resources*.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此恢复过程已在*恢复已删除资源*中描述。
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The only prerequisite is that the deletion process should be carried out inside
    PhpStorm only. If the resource was deleted outside it, PhpStorm will not be able
    to help.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的前提是删除过程应在PhpStorm内部执行。如果资源是在外部删除的，PhpStorm将无法提供帮助。
- en: Setting the run configuration
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置运行配置
- en: Having learned how to code within the PhpStorm editing system, you should be
    able to execute your code now. No, no! It is not being assumed that you don't
    know how to run code—the perspective being discussed here is PhpStorm. You can
    now read the mentioned statement again.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何在PhpStorm编辑系统中编码后，您现在应该能够执行您的代码了。不，不是！这里并没有假设您不知道如何运行代码——这里讨论的视角是PhpStorm。现在您可以再次阅读提到的声明。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Run configuration can be set for the project-wide files. To make the configurations,
    you need to go to **Run** | **Edit Configurations** from the main menu. A dialog
    will appear that asks you a number of questions. The answers will assist you by
    providing a quicker way to execute your code.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以为项目范围内的文件设置运行配置。要配置这些设置，您需要从主菜单中选择**运行** | **编辑配置**。将出现一个对话框，它会向您提出许多问题。这些答案将通过提供更快执行代码的方式帮助您。
- en: Once you open the settings area, you need to broadly concentrate on the methods
    that are of interest to you. If you do not specify any settings, PhpStorm will
    determine the type of the scripts that you have written. The PHP script settings
    are an emulation of the scenario when you used to execute a PHP script via the
    command line by providing command-line arguments, specifying interpreter options
    or environment variables in case you wished to do something wild.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您打开设置区域，您需要广泛关注您感兴趣的方法。如果您没有指定任何设置，PhpStorm将确定您所编写的脚本的类型。PHP脚本设置是对您曾经通过命令行执行PHP脚本并通过提供命令行参数、指定解释器选项或环境变量（如果您想做一些疯狂的事情）进行操作的情景的模拟。
- en: The arguments you specify are the command-line arguments to your PHP script.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您指定的参数是您的PHP脚本的命令行参数。
- en: 'The interpreter options are the options that you used to provide to your PHP
    interpreter. Some commonly used switches will make you recall those painful days:
    `-a`, `-v`, `--info`, and so on.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器选项是你用来提供给你的PHP解释器的选项。一些常用的开关会让你回想起那些痛苦的日子：`-a`、`-v`、`--info`等等。
- en: 'The following is a list of options available:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个可用选项列表：
- en: '| Options | Description |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-a` | Run as interactive shell. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `-a` | 作为交互式shell运行。 |'
- en: '| `-c<path>&#124;<file>` | Look for `php.ini` file in this directory. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `-c<path>&#124;<file>` | 在此目录中查找 `php.ini` 文件。 |'
- en: '| `-n` | No `php.ini` file will be used. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `-n` | 不会使用 `php.ini` 文件。 |'
- en: '| `-d foo[=bar]` | Define INI entry `foo` with value `bar`. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `-d foo[=bar]` | 定义INI条目 `foo` 的值为 `bar`。 |'
- en: '| `-e` | Generate extended information for debugger/profiler. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `-e` | 为调试器/分析器生成扩展信息。 |'
- en: '| `-f<file>` | Parse and execute `<file>`. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `-f<file>` | 解析并执行 `<file>`。 |'
- en: '| `-h` | This is help. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `-h` | 这是帮助信息。 |'
- en: '| `-i` | This gives PHP information. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `-i` | 这将给出PHP信息。 |'
- en: '| `-l` | Syntax check only (lint). |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `-l` | 仅进行语法检查（lint）。 |'
- en: '| `-m` | Show code compiled in modules. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `-m` | 显示编译在模块中的代码。 |'
- en: '| `-r<code>` | Run PHP `<code>` without using script tags `<?...?>`. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `-r<code>` | 运行PHP `<code>`而不使用脚本标签`<?...?>`。 |'
- en: '| `-B<begin_code>` | Run PHP `<begin_code>` before processing input lines.
    |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `-B<begin_code>` | 在处理输入行之前运行PHP `<begin_code>`。 |'
- en: '| `-R<code>` | Run PHP `<code>` for every input line. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `-R<code>` | 对每一行输入运行PHP `<code>`。 |'
- en: '| `-F<file>` | Parse and execute `<file>` for every input line. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `-F<file>` | 对每一行输入解析并执行 `<file>`。 |'
- en: '| `-E<end_code>` | Run PHP `<end_code>` after processing all input lines. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `-E<end_code>` | 在处理所有输入行之后运行PHP `<end_code>`。 |'
- en: '| `-H` | Hide any passed arguments from external tools. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `-H` | 隐藏传递给外部工具的任何参数。 |'
- en: '| `-S<addr>:<port>` | Run with built-in web server. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `-S<addr>:<port>` | 使用内置Web服务器运行。 |'
- en: '| `-t<docroot>` | Specify document root `<docroot>` for built-in web server.
    |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `-t<docroot>` | 为内置Web服务器指定文档根 `<docroot>`。 |'
- en: '| `-s` | Output HTML syntax highlighted source. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `-s` | 输出HTML语法高亮源代码。 |'
- en: '| `-v` | This gives the version number. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `-v` | 这将给出版本号。 |'
- en: '| `-w` | Output source with stripped comments and whitespace. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `-w` | 输出去除注释和空白符的源代码。 |'
- en: '| `-z<file>` | Load Zend extension `<file>.` |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `-z<file>` | 加载Zend扩展 `<file>.` |'
- en: '| `args...` | Arguments passed to script. Use `-- args` when first argument
    starts with `-` or the script is read from `stdin`. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `args...` | 脚本传递的参数。当第一个参数以“-”开头或脚本从`stdin`读取时，使用`-- args`。 |'
- en: '| `--ini` | Show configuration file names. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `--ini` | 显示配置文件名称。 |'
- en: '| `--rf<name>` | Show information about function `<name>`. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `--rf<name>` | 显示关于函数 `<name>` 的信息。 |'
- en: '| `--rc<name>` | Show information about class `<name>`. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `--rc<name>` | 显示关于类 `<name>` 的信息。 |'
- en: '| `--re<name>` | Show information about extension `<name>`. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `--re<name>` | 显示关于扩展 `<name>` 的信息。 |'
- en: '| `--rz<name>` | Show information about Zend extension `<name>`. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `--rz<name>` | 显示关于Zend扩展 `<name>` 的信息。 |'
- en: '| `--ri<name>` | Show configuration for extension `<name>`. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `--ri<name>` | 显示关于扩展 `<name>` 的配置。 |'
- en: On saving the settings, your PHP script will be ready to be run.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 保存设置后，你的PHP脚本将准备好运行。
- en: Note
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is worth noting here that this is just a PhpStorm way of executing the command-line
    PHP scripts. If you remember that there is a terminal view available in PhpStorm,
    you will easily relate that you can do the same tasks in the terminal as well.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这仅仅是PhpStorm执行命令行PHP脚本的一种方式。如果你记得PhpStorm中有一个终端视图可用，你将很容易联想到你同样可以在终端中完成相同的任务。
- en: The other configuration worth your interest is the PHP Web Application settings.
    It appears to lay people or nonprogrammers that web programming is an easy cake.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得你关注的配置是PHP Web应用程序设置。对于普通人或非程序员来说，它似乎表明Web编程是一件轻而易举的事情。
- en: Happy are those who reject the advice of evil men and who do not follow the
    example of sinners.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 拒绝邪恶之人的建议，不效仿罪人的榜样，是幸福的。
- en: How it works...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Thinking that web programming is easy, is like thinking that everyone can bake
    tasty pizza. Bear in mind that tasty is the word. To handle the challenge of executing
    a web-based application, you need to tell PhpStorm some facts that are basically
    settings. The settings you need to specify here are:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 认为Web编程很容易，就像认为每个人都能烤出美味的披萨一样。记住，美味是关键词。要处理执行基于Web的应用程序的挑战，你需要告诉PhpStorm一些基本设置的事实。你需要在此处指定的设置是：
- en: A valid web server needs to be specified where your application will be launched.
    To configure a new server, there is a small square button to the right-hand side
    of the dropdown provided. Clicking on that, you are taken to an all-new settings
    area where you need to set up a web server.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要指定一个有效的网络服务器，您的应用程序将在该服务器上启动。要配置新的服务器，在提供的下拉菜单右侧有一个小方块按钮。点击该按钮，您将被带到全新的设置区域，在那里您需要设置网络服务器。
- en: Complications! Go find those who say web programming is easy. You are free to
    do what you want with them, but here, with PhpStorm, you need to specify the configurations
    to set up a web server. To set up a new web server, you need to specify the name
    that you will use to address this web server in the future (near or far). You
    need to set the hostname (you'll probably be using localhost or `127.0.0.1`) and
    the port number (the most common case will lead you to keep `80` as the value
    here). You can also specify a debugger here.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复杂！去找那些说网络编程很简单的人。您对他们可以随意行事，但在这里，使用PhpStorm，您需要指定设置网络服务器的配置。要设置新的网络服务器，您需要指定将来（无论远近）将用于访问此网络服务器的名称。您需要设置主机名（您可能使用localhost或`127.0.0.1`）和端口号（最常见的情况将导致您将`80`作为这里的值）。您还可以在这里指定调试器。
- en: By default, PhpStorm supports **Xdebug** and **zend-debugger**. Don't scratch
    your head as to what a debugger is. It will be taken up later in this book. Some
    developers prefer keeping their web server document root clean by only putting
    symbolic links inside it. The symbolic links point to some other location on the
    local disk. The reason for this is that the document root might not provide sufficient
    permissions that are required to write into a directory. You can obviously control
    your own directory more easily than the server's document root. If you have some
    symbolic links inside the document root, you can tell PhpStorm about it too. The
    left-hand side of the table is the actual path under which your project is saved,
    and to the right-hand side is the symbolic link under your document root.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，PhpStorm支持**Xdebug**和**zend-debugger**。不要因为不知道调试器是什么而挠头。它将在本书的后面讨论。一些开发者更喜欢通过只在其中放置符号链接来保持网络服务器文档根的清洁。这些符号链接指向本地磁盘上的其他位置。这样做的原因是文档根可能不提供写入目录所需的足够权限。您显然比服务器文档根更容易控制自己的目录。如果您在文档根内部有符号链接，您也可以告诉PhpStorm。表格的左侧是您的项目实际保存的路径，右侧是文档根下的符号链接。
- en: You can specify the start URL (base URL in spoken language). This is simple.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以指定起始URL（口语中的基本URL）。这很简单。
- en: 'The browser in which you need to view the web application needs to be specified
    too. You can select the browser from a list of predefined browsers. If you think
    you need to be specifically targeting certain browsers to view your code in, you
    need to go to the **Web Browsers** settings. This can be reached via two ways:'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要指定用于查看网络应用程序的浏览器。您可以从预定义的浏览器列表中选择浏览器。如果您认为需要专门针对某些浏览器来查看您的代码，您需要转到**Web Browsers**设置。这可以通过两种方式实现：
- en: The square button onto the right-hand side of the browser dropdown. The options
    that you get to fill in are the browser-related configurations. You can tell PhpStorm
    to follow the operating system underlying the selected default browser. You can
    select from either Firefox, Internet Explorer, Safari, Chrome, or Opera by selecting
    the path where the executable lies. You can also set a web browser as active or
    inactive and make a browser the default. You can use the browser settings with
    PhpStorm.
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器下拉菜单右侧的方块按钮。您需要填写的是与浏览器相关的配置。您可以告诉PhpStorm跟随所选默认浏览器背后的操作系统。您可以通过选择可执行文件所在的路径从Firefox、Internet
    Explorer、Safari、Chrome或Opera中选择。您还可以设置一个浏览器为活动或非活动状态，并使其成为默认浏览器。您可以使用浏览器设置与PhpStorm一起使用。
- en: 'The other one is via **File** | **Settings** | **Web Browsers**. Both the paths
    take you to the same destination, which is as follows:'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种方式是通过**文件** | **设置** | **Web Browsers**。这两个路径都将您带到同一个目的地，如下所示：
- en: '![How it works...](img/3878OT_03_14.jpg)'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![工作原理...](img/3878OT_03_14.jpg)'
- en: There are lots of web browsers available across the world. You can select a
    web browser of your choice and set it here for use in PhpStorm.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全球有众多可用的网络浏览器。您可以选择您喜欢的网络浏览器，并将其设置在这里以便在PhpStorm中使用。
- en: There's more...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can also set a pre-run configuration by setting some command that is executed
    just before your application gets executed. There are certain options available
    for configuration. You can even create your own new PhpStorm tool based on this
    configuration and use it here, as shown in the following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以设置一个预运行配置，通过设置一些在应用程序执行之前执行的命令。有一些配置选项可用。你甚至可以根据这个配置创建自己的新的PhpStorm工具，并在此处使用它，如下面的截图所示：
- en: '![There''s more...](img/3878OT_03_15.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/3878OT_03_15.jpg)'
- en: That's all there is to set your web application to be executed on a web server
    and viewed on a web browser. To execute web application code that you created,
    you need to right-click on the file in the editor and select **Open in browser**.
    Bingo!
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是将你的网络应用程序设置为在Web服务器上执行并在Web浏览器中查看的全部内容。要执行你创建的网络应用程序代码，你需要在编辑器中的文件上右键单击并选择**在浏览器中打开**。搞定！
- en: Running your code
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行你的代码
- en: Having entered the world of PHP knowingly, you also stepped into the world of
    web programming as PHP is a popular web programming language too. An application
    written in PHP will have to be executed in either of the two mediums.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 有意进入PHP的世界，你也步入了网络编程的世界，因为PHP也是一种流行的网络编程语言。用PHP编写的应用程序必须在两种介质之一中执行。
- en: Getting ready
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need a web server such as Apache with the PHP module installed. If you need
    a web server, you are probably creating a web-based application that will run
    on a web browser.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个安装了PHP模块的Web服务器，如Apache。如果你需要一个Web服务器，你很可能正在创建一个将在Web浏览器上运行的网络应用程序。
- en: How to do it...
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: To run PHP code, you need to learn just a shortcut *Ctrl* + *Shift* + *F10*.
    The rest is taken care of by PhpStorm.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行PHP代码，你只需要学习一个快捷键 *Ctrl* + *Shift* + *F10*。其余的由PhpStorm来处理。
- en: The code will be executed according to the configuration you set. For more details
    about executing PHP code, you can refer to the previous chapter as well.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将根据你设置的配置来执行。有关执行PHP代码的更多详细信息，你也可以参考上一章。
- en: However, if you have no prior experience in executing PHP code in PhpStorm and
    you are not in the mood to try out something new, you can resort to old-school
    methods.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你没有在PhpStorm中执行PHP代码的先验经验，你也不愿意尝试新事物，你可以求助于老式方法。
- en: How it works…
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: You can use PhpStorm as the development system and the file transfer system
    to upload your code onto the web server where you can test the code there and
    then. The precondition is that the webserver should be a development server and
    that you just need to make changes to the PHP code only.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用PhpStorm作为开发系统和文件传输系统，将你的代码上传到Web服务器，在那里你可以立即测试代码。前提是Web服务器应该是一个开发服务器，你只需要修改PHP代码。
- en: Does it not sound too old fashioned? Maybe. Read on.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来是不是太老式了？也许吧。继续阅读。
- en: If the development server is your local machine, this will be an inefficient
    way of doing things. In the case of your development server not being on your
    local machine, even if it is on the local network, there is a time lag involved
    in transferring files over the network. Being a developer, obviously you cannot
    afford to have this time lag unless the business requirements are such that you
    cannot have the entire system set up on your local machine.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发服务器是你的本地机器，这将是一种低效的工作方式。如果你的开发服务器不在你的本地机器上，即使它在本地网络中，通过网络传输文件也会存在延迟。显然，作为一个开发者，你无法承担这种延迟，除非业务需求是这样的，你不能在本地机器上设置整个系统。
- en: Tip
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In all other cases, it is recommended that you have a local replica of the development
    server set up on your machine.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有其他情况下，建议你在你的机器上设置一个开发服务器的本地副本。
- en: Keep in pace with the new fashion. PhpStorm rocks!
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 跟上新的潮流。PhpStorm很棒！
