["```php\n    <?php\n    namespace app\\components;\n    use yii\\validators\\Validator;\n    class WordsValidator extends Validator\n    {\n        public $size = 50;\n        public function validateValue($value){\n            if (str_word_count($value) > $this->size) {\n                return ['The number of words must be less than {size}', ['size' => $this->size]];\n            }\n            return false;\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\models;\n    use app\\components\\WordsValidator;\n    use yii\\base\\Model;\n    class Article extends Model\n    {\n        public $title;\n        public function rules()\n        {\n            return [\n                ['title', 'string'],\n                ['title', WordsValidator::className(), 'size' => 10],\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use app\\models\\Article;\n    use yii\\helpers\\Html;\n    use yii\\web\\Controller;\n    class ModelValidationController extends Controller\n    {\n        private function getLongTitle()\n        {\n            return 'There is a very long content for current article, '.'it should be less then ten words';\n        }\n        private function getShortTitle()\n        {\n            return 'There is a shot title';\n        }\n        private function renderContentByModel($title)\n        {\n            $model = new Article();\n            $model->title = $title;\n            if ($model->validate()) {\n                $content = Html::tag('div', 'Model is valid.',[\n                    'class' => 'alert alert-success',\n                ]);\n            } else {\n                $content = Html::errorSummary($model, [\n                    'class' => 'alert alert-danger',\n                ]);\n            }\n            return $this->renderContent($content);\n        }\n        public function actionSuccess()\n        {\n            $title = $this->getShortTitle();\n            return $this->renderContentByModel($title);\n        }\n        public function actionFailure()\n        {\n            $title = $this->getLongTitle();\n            return $this->renderContentByModel($title);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use app\\components\\WordsValidator;\n    use app\\models\\Article;\n    use yii\\helpers\\Html;\n    use yii\\web\\Controller;\n    class AdhocValidationController extends Controller\n    {\n        private function getLongTitle()\n        {\n            return 'There is a very long content for current article, '.'it should be less then ten words';\n        }\n        private function getShortTitle()\n        {\n            return 'There is a shot title';\n        }\n        private function renderContentByTitle($title)\n        {\n            $validator = new WordsValidator([\n                'size' => 10,\n            ]);\n            if ($validator->validate($title, $error)) {\n                $content = Html::tag('div', 'Value is valid.',[\n                    'class' => 'alert alert-success',\n                ]);\n            } else {\n                $content = Html::tag('div', $error, [\n                    'class' => 'alert alert-danger',\n                ]);\n            }\n            return $this->renderContent($content);\n        }\n        public function actionSuccess()\n        {\n            $title = $this->getShortTitle();\n            return $this->renderContentByTitle($title);\n        }\n        public function actionFailure()\n        {\n            $title = $this->getLongTitle();\n            return $this->renderContentByTitle($title);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\models;\n    use yii\\base\\Model;\n    use yii\\web\\UploadedFile;\n    class UploadForm extends Model\n    {\n        /**\n        * @var UploadedFile\n        */\n        public $file;\n        public function rules()\n        {\n            return [\n                ['file', 'file', 'skipOnEmpty' => false, 'extensions' => 'zip'],\n            ];\n        }\n        public function upload()\n        {\n            if ($this->validate()) {\n                $this->file->saveAs('uploads/' . $this->file->baseName . '.' . $this->file->extension);\n               return true;\n            } else {\n                return false;\n            }\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use Yii;\n    use yii\\web\\Controller;\n    use app\\models\\UploadForm;\n    use yii\\web\\UploadedFile;\n    class UploadController extends Controller\n    {\n        public function actionUpload()\n        {\n            $model = new UploadForm();\n            if (Yii::$app->request->isPost) {\n                $model->file = UploadedFile::getInstance($model, 'file');\n                if ($model->upload()) {\n                    return $this->renderContent(\"File {$model->file->name} is uploaded successfully\");\n                }\n            }\n            return $this->render('index', ['model' => $model]);\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\widgets\\ActiveForm;\n    use yii\\helpers\\Html;\n    ?>\n    <?php $form = ActiveForm::begin(['options' => ['enctype' => 'multipart/form-data']]) ?>\n        <?= $form->field($model, 'file')->fileInput() ?>\n        <?= Html::submitButton('Upload', ['class' => 'btn-success'])?>\n    <?php ActiveForm::end() ?>\n    ```", "```php\n$model->file = UploadedFile::getInstance($model, 'file');\nif ($model->upload()) {\n    return $this->renderContent(\"File {$model->file->name} is uploaded successfully\");\n}\n```", "```php\n<?= Html::beginForm('', 'post', ['enctype'=>'multipart/form-data'])?>\n```", "```php\n..\n<?= $form->field($model, 'imageFiles[]')->fileInput(['multiple' => true, 'accept' => 'image/*']) ?>\n..\n```", "```php\n..\n$model->imageFiles = UploadedFile::getInstances($model, 'imageFiles');\n..\n```", "```php\nforeach ($this->imageFiles as $file) {\n    $file->saveAs('uploads/' . $file->baseName . '.' . $file->extension);\n}\n```", "```php\n    <?php\n    namespace app\\models;\n    use yii\\base\\Model;\n    class EmailForm extends Model\n    {\n        public $email;\n        public function rules()\n        {\n            return [\n                ['email', 'email']\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use Yii;\n    use yii\\web\\Controller;\n    use app\\models\\EmailForm;\n    class EmailController extends Controller\n    {\n        public function actionIndex(){\n            $success = false;\n            $model = new EmailForm();\n            if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n                Yii::$app->session->setFlash('success', 'Success!');\n            }\n            return $this->render('index', [\n                'model' => $model,\n                'success' => $success,\n            ]);\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n    use yii\\captcha\\Captcha;\n    use yii\\widgets\\ActiveForm;\n    ?>\n    <?php if (Yii::$app->session->hasFlash('success')): ?>\n        <div class=\"alert alert-success\"><?=Yii::$app->session->getFlash('success')?></div>\n    <?php else: ?>\n        <?php $form = ActiveForm::begin()?>\n            <div class=\"control-group\">\n                <div class=\"controls\">\n                    <?= $form->field($model, 'email')->textInput(['class' => 'form-control']); ?>\n                    <?php echo Html::error($model, 'email', ['class' => 'help-block'])?>\n                </div>\n            </div>\n            <?php if (Captcha::checkRequirements() && Yii::$app->user->isGuest): ?>\n                <div class=\"control-group\">\n                    <?= $form->field($model, 'verifyCode')->widget(\\yii\\captcha\\Captcha::classname(), [\n                    'captchaAction' => 'email/captcha'\n                    ]) ?>\n                </div>\n            <?php endif; ?>\n            <div class=\"control-group\">\n                <label class=\"control-label\" for=\"\"></label>\n                <div class=\"controls\">\n                    <?=Html::submitButton('Submit', ['class' => 'btn btn-success'])?>\n                </div>\n            </div>\n        <?php ActiveForm::end()?>\n    <?php endif;?>\n    ```", "```php\n    <?php\n    namespace app\\models;\n    use yii\\base\\Model;\n    use yii\\captcha\\Captcha;\n    class EmailForm extends Model\n    {\n        public $email;\n        public $verifyCode;\n        public function rules()\n        {\n            return [\n                ['email', 'email'],\n                ['verifyCode', 'captcha', 'skipOnEmpty' => !Captcha::checkRequirements(), 'captchaAction' => 'email/captcha']\n            ];\n        }\n    }\n    ```", "```php\n    public function actions()\n    {\n        return [\n            'captcha' => [\n                'class' => 'yii\\captcha\\CaptchaAction',\n            ],\n        ];\n    }\n    ```", "```php\n    ...\n    <?php if (Captcha::checkRequirements() && Yii::$app->user->isGuest): ?>\n        <div class=\"control-group\">\n            <?=Captcha::widget([\n                'model' => $model,\n                'attribute' => 'verifyCode',\n            ]);?>\n            <?php echo Html::error($model, 'verifyCode')?>\n        </div>\n    <?php endif; ?>\n    ...\n    ```", "```php\n    <?php\n        use yii\\helpers\\Html;\n        use yii\\captcha\\Captcha;\n    ?>\n    â€¦.\n    ```", "```php\npublic function behaviors()\n{\n    return [\n        'access' => [\n            'class' => AccessControl::className(),\n            'rules' => [\n                [\n                    'actions' => ['index', 'captcha'],\n                    'allow' => true,\n                ]\n            ],\n        ],\n    ];\n}\n```", "```php\n    <?php\n    namespace app\\components;\n    use \\Yii;\n    use yii\\captcha\\CaptchaAction;\n    class MathCaptchaAction extends CaptchaAction\n    {\n        protected function renderImage($code)\n        {\n            return parent::renderImage($this->getText($code));\n        }\n        protected function generateVerifyCode()\n        {\n            return mt_rand((int)$this->minLength,\n            (int)$this->maxLength);\n        }\n        protected function getText($code)\n        {\n            $code = (int) $code;\n            $rand = mt_rand(1, $code-1);\n            $op = mt_rand(0, 1);\n            if ($op) {\n                return $code - $rand . \" + \"  . $rand;\n            }\n            else {\n                return $code + $rand . \" - \" . \" \" . $rand;\n            }\n        }\n    }\n    ```", "```php\n    public function actions()\n    {\n        return [\n            'captcha' => [\n                'class' => 'app\\components\\MathCaptchaAction',\n                'minLength' => 1,\n                'maxLength' => 10,\n            ],\n        ];\n    }\n    ```", "```php\n    <?php\n    namespace app\\components;\n    use yii\\base\\Exception;\n    use yii\\base\\Model;\n    use yii\\base\\Widget;\n    use yii\\helpers\\Html;\n    class RangeInputWidget extends Widget\n    {\n        public $model;\n        public $attributeFrom;\n        public $attributeTo;\n        public $htmlOptions = [];\n        protected function hasModel()\n        {\n            return $this->model instanceof Model&& $this->attributeFrom !== null&& $this->attributeTo !== null;}\n        public function run()\n        {\n            if (!$this->hasModel()) {\n                throw new Exception('Model must be set');\n            }\n            return Html::activeTextInput($this->model, $this->attributeFrom, $this->htmlOptions)\n                .' &rarr; '\n                .Html::activeTextInput($this->model, $this->attributeTo, $this->htmlOptions);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use Yii;\n    use yii\\web\\Controller;\n    use app\\models\\RangeForm;\n    class RangeController extends Controller\n    {\n        public function actionIndex()\n        {\n            $model = new RangeForm();\n            if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n                Yii::$app->session->setFlash('rangeFormSubmitted',\n                    'The form was successfully processed!'\n                );\n            }\n            return $this->render('index', array(\n                'model' => $model,\n            ));\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\models;\n    use yii\\base\\Model;\n    class RangeForm extends Model\n    {\n        public $from;\n        public $to;\n        public function rules()\n        {\n            return [\n                [['from', 'to'], 'number', 'integerOnly' => true],\n                ['from', 'compare', 'compareAttribute' => 'to', 'operator' => '<='],\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n    use yii\\bootstrap\\ActiveForm;\n    use app\\components\\RangeInputWidget;\n    ?>\n    <h1>Range form</h1>\n    <?php if (Yii::$app->session->hasFlash('rangeFormSubmitted')): ?>\n        <div class=\"alert alert-success\">\n            <?= Yii::$app->session->getFlash('rangeFormSubmitted'); ?>\n        </div>\n    <?php endif?>\n    <?= Html::errorSummary($model, ['class'=>'alert alert-danger'])?>\n    <?php $form = ActiveForm::begin([\n        'options' => [\n            'class' => 'form-inline'\n        ]\n    ]); ?>\n        <div class=\"form-group\">\n            <?= RangeInputWidget::widget([\n                'model' => $model,\n                'attributeFrom' => 'from',\n                'attributeTo' => 'to',\n                'htmlOptions' => [\n                    'class' =>'form-control'\n                ]\n            ]) ?>\n        </div>\n        <?= Html::submitButton('Submit', ['class' => 'btn btn-primary', 'name' => 'contact-button']) ?>\n    <?php ActiveForm::end(); ?>\n    ```", "```php\n    ./yii migrate/create create_table_contest_and_prize_table\n    Update just created migration's methods up() and down() by following code\n    public function up()\n    {\n        $tableOptions = null;\n        if ($this->db->driverName === 'mysql') {\n            $tableOptions = 'CHARACTER SET utf8 COLLATE utf8_general_ci ENGINE=InnoDB';\n        }\n        $this->createTable('{{%contest}}', [\n            'id' => Schema::TYPE_PK,\n            'name' => Schema::TYPE_STRING . ' NOT NULL',\n        ], $tableOptions);\n        $this->createTable('{{%prize}}', [\n            'id' => Schema::TYPE_PK,\n            'name' => Schema::TYPE_STRING,\n            'amount' => Schema::TYPE_INTEGER,\n        ], $tableOptions);\n        $this->createTable('{{%contest_prize_assn}}', [\n            'contest_id' => Schema::TYPE_INTEGER,\n            'prize_id' => Schema::TYPE_INTEGER,\n        ], $tableOptions);\n        $this-addForeignKey('fk_contest_prize_assn_contest_id', '{{%contest_prize_assn}}', 'contest_id', {{%contest}}', 'id');\n        $this->addForeignKey('fk_contest_prize_assn_prize_id', '{{%contest_prize_assn}}', 'prize_id', '{{%prize}}', 'id');\n    }\n    public function down()\n    {\n        $this-dropForeignKey('fk_contest_prize_assn_contest_id', '{{%contest_prize_assn}}');\n        $this->dropForeignKey('fk_contest_prize_assn_prize_id', '{{%contest_prize_assn}}');\n        $this->dropTable('{{%contest_prize_assn}}');\n        $this->dropTable('{{%prize}}');\n        $this->dropTable('{{%contest}}');\n    }\n    ```", "```php\n    ./yii migrate/up\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use app\\models\\Contest;\n    use app\\models\\ContestPrizeAssn;\n    use app\\models\\Prize;\n    use Yii;\n    use yii\\base\\Model;\n    use yii\\helpers\\VarDumper;\n    use yii\\web\\Controller;\n    class ContestController extends Controller\n    {\n        public function actionCreate()\n        {\n            $contestName = 'Happy New Year';\n            $firstPrize = new Prize();\n            $firstPrize->name = 'Iphone 6s';\n            $firstPrize->amount = 4;\n            $secondPrize = new Prize();\n            $secondPrize->name = 'Sony Playstation 4';\n            $secondPrize->amount = 2;\n            $contest = new Contest();\n            $contest->name = $contestName;\n            $prizes = [$firstPrize, $secondPrize];\n            if ($contest->validate() && Model::validateMultiple($prizes)) {\n                $contest->save(false);\n                foreach ($prizes as $prize) {\n                    $prize->save(false);\n                    $contestPrizeAssn = new ContestPrizeAssn();\n                    $contestPrizeAssn->prize_id = $prize->id;\n                    $contestPrizeAssn->contest_id = $contest>id;\n                    $contestPrizeAssn->save(false);\n                }\n                return $this->renderContent(\n                    'All prizes have been successfully saved!'\n                );\n            } else {\n                return $this->renderContent(\n                    VarDumper::dumpAsString($contest->getErrors())\n                );\n            }\n        }\n        public function actionUpdate()\n        {\n            $prizes = Prize::find()->all();\n            if (Model::loadMultiple($prizes, Yii::$app->request->post()) && Model::validateMultiple($prizes)) {\n                foreach ($prizes as $prize) {\n                    $prize->save(false);\n                }\n                return $this->renderContent(\n                    'All prizes have been successfully saved!'\n                );\n            }\n            return $this->render('update', ['prizes' => $prizes]);\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n    use yii\\widgets\\ActiveForm;\n    $form = ActiveForm::begin();\n    foreach ($prizes as $i => $prize) {\n        echo $form->field($prize, \"[$i]amount\")->label($prize->name);\n    }\n    echo Html::submitButton('submit' , ['class' => 'btn btn-success']);\n    ActiveForm::end();\n    ```", "```php\nif ($contest->validate() && Model::validateMultiple($prizes)) { ...}\n```", "```php\n    <?php\n    namespace app\\models;\n    use app\\components\\WordsValidator;\n    use yii\\base\\Model;\n    class DeliveryForm extends Model\n    {\n        const TYPE_PICKUP = 1;\n        const TYPE_COURIER = 2;\n        public $type;\n        public $address;\n        public function rules()\n        {\n            return [\n                ['type', 'required'],\n                ['type', 'in', 'range'=>[self::TYPE_PICKUP, self::TYPE_COURIER]],\n                ['address', 'required', 'when' => function ($model) {\n                    return $model->type == self::TYPE_COURIER;\n                }, 'whenClient' => \"function (attribute, value) {\n                    return $('#deliveryform-type').val() == '\".self::TYPE_COURIER.\"';\n                }\"]\n            ];\n        }\n        public function typeList()\n        {\n            return [\n                self::TYPE_PICKUP => 'Pickup',\n                self::TYPE_COURIER => 'Courier delivery',\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use Yii;\n    use yii\\web\\Controller;\n    use app\\models\\DeliveryForm;\n    class ValidationController extends Controller\n    {\n        public function actionIndex()\n        {\n            $model = new DeliveryForm();\n            if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n                Yii::$app->session->setFlash('success',\n                    'The form was successfully processed!'\n                );\n            }\n            return $this->render('index', array(\n                'model' => $model,\n            ));\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\bootstrap\\ActiveForm;\n    use yii\\helpers\\Html;\n    ?>\n        <h1>Delivery form</h1>\n        <?php if (Yii::$app->session->hasFlash('success')): ?>\n        <div class=\"alert alert-success\"><?= Yii::$app->session->getFlash('success'); ?></div>\n        <?php endif; ?>\n        <?php $form = ActiveForm::begin(); ?>\n        <?= $form->field($model, 'type')->dropDownList($model->typeList(), [\n            'prompt'=>'Select delivery type']\n        ) ?>\n        <?= $form->field($model, 'address') ?>\n        <div class=\"form-group\">\n            <?= Html::submitButton('Submit', ['class' => 'btn btn-primary']) ?>\n        </div>\n    <?php ActiveForm::end(); ?>\n    ```", "```php\n    ./yii migrate/create create_order_tables\n    ```", "```php\n    <?php\n    use yii\\db\\Schema;\n    use yii\\db\\Migration;\n    use app\\models\\Product;\n    class m150813_161817_create_order_form_tables extends Migration\n    {\n        public function up()\n        {\n            $tableOptions = null;\n            if ($this->db->driverName === 'mysql') {\n                $tableOptions = 'CHARACTER SET utf8 COLLATE utf8_general_ci ENGINE=InnoDB';\n            }\n            $this->createTable('user', [\n                'id' => Schema::TYPE_PK,\n                'first_name' => Schema::TYPE_STRING . ' NOT NULL',\n                'last_name' => Schema::TYPE_STRING . ' NOT NULL',\n                'phone' => Schema::TYPE_STRING . ' NOT NULL',\n            ], $tableOptions);\n            $this->createTable('product', [\n                'id' => Schema::TYPE_PK,\n                'title' => Schema::TYPE_STRING . ' NOT NULL',\n                'price' => Schema::TYPE_FLOAT . '(6,2) ',\n            ], $tableOptions);\n            $this->createTable('order', [\n                'id' => Schema::TYPE_PK,\n                'user_id' => Schema::TYPE_INTEGER . ' NULL',\n                'address' => Schema::TYPE_STRING . ' NOT NULL',\n                'product_id' => Schema::TYPE_INTEGER . ' NOT NULL',\n            ], $tableOptions);\n            $product1 = new Product();\n            $product1->title = 'Iphone 6';\n            $product1->price = 400.5;\n            $product1->save();\n            $product3 = new Product();\n            $product3->title = 'Samsung Galaxy Note 5';\n            $product3->price = 900;\n            $product3->save();\n            $this->addForeignKey('fk_order_product_id', 'order', 'product_id', 'product', 'id');\n        }\n        public function down()\n        {\n            $this->dropTable('order');\n            $this->dropTable('user');\n            $this->dropTable('product');\n        }\n    }\n    ```", "```php\n    ./yii migrate/up\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use app\\models\\Order;\n    use app\\models\\User;\n    use Yii;\n    use yii\\web\\Controller;\n    class TestController extends Controller\n    {\n        public function actionOrder()\n        {\n            $user = new User();\n            $order = new Order();\n            if ($user->load(Yii::$app->request->post()) && $order->load(Yii::$app->request->post())) {\n            if ($user->validate() && $order->validate()) {\n                $user->save(false);\n                $order->user_id = $user->id;\n                $order->save(false);\n                $this->redirect(['/test/result', 'id' => $order->id]);\n                }\n            }\n            return $this->render('order', ['user' => $user, 'order' => $order]);\n        }\n        public function actionResult($id)\n        {\n            $order = Order::find($id)->with('product', 'user')->one();\n            return $this->renderContent(\n                'Product: ' . $order->product->title . '</br>' .\n                'Price: ' . $order->product->price . '</br>' .\n                'Customer: ' . $order->user->first_name . ' ' . $order->user->last_name . '</br>' .\n                'Address: ' . $order->address\n            );\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n    use yii\\widgets\\ActiveForm;\n    use app\\models\\Product;\n    use yii\\helpers\\ArrayHelper;\n    /**\n    * @var $user \\app\\models\\User\n    * @var $order \\app\\models\\Order\n    */\n    $form = ActiveForm::begin([\n        'id' => 'order-form',\n        'options' => ['class' => 'form-horizontal'],\n    ]) ?>\n    <?= $form->field($user, 'first_name')->textInput(); ?>\n    <?= $form->field($user, 'last_name')->textInput(); ?>\n    <?= $form->field($user, 'phone')->textInput(); ?>\n    <?= $form->field($order, 'product_id')->dropDownList(ArrayHelper::map(Product::find()->all(), 'id', 'title')); ?>\n    <?= $form->field($order, 'address')->textInput(); ?>\n    <?= Html::submitButton('Save', ['class' => 'btn btn-primary']) ?>\n    <?php ActiveForm::end() ?>\n    ```", "```php\n    <?php\n    namespace app\\models;\n    use yii\\db\\ActiveRecord;\n    class Product extends ActiveRecord\n    {\n        public function rules()\n        {\n            return [\n                ['title', 'string'],\n                [['title', 'category_id', 'sub_category_id'], 'required'],\n                ['category_id', 'exist', 'targetAttribute' => 'id', 'targetClass' => 'app\\models\\Category'],\n                ['sub_category_id', 'exist', 'targetAttribute' => 'id', 'targetClass' => 'app\\models\\Category'],\n            ];\n        }\n        public function attributeLabels()\n        {\n            return [\n                'category_id' => 'Category',\n                'sub_category_id' => 'Sub category',\n            ];â€©   }\n    }\n    ```", "```php\n    <?php\n    namespace app\\models;\n    use yii\\db\\ActiveRecord;\n    class Category extends ActiveRecord\n    {\n        public function rules()\n        {\n            return [\n                ['title', 'string'],\n            ];\n        }\n        /**\n        * @return array\n        */\n        public static function getSubCategories($categoryId)\n        {\n            $subCategories = [];\n            if ($categoryId) {\n                $subCategories = self::find()\n                    ->where(['category_id' => $categoryId])\n                    ->asArray()\n                    ->all();\n            }\n            return $subCategories;\n        }\n    }\n    ```", "```php\n    ./yii migrate/create create_category_and_product_tables\n    ```", "```php\n    <?php\n    use yii\\db\\Schema;\n    use yii\\db\\Migration;\n    class m150813_005030_create_categories extends Migration\n    {\n        public function up()\n        {\n            $tableOptions = null;\n            $this->createTable('{{%product}}', [\n                'id' => Schema::TYPE_PK,\n                'category_id' => Schema::TYPE_INTEGER . ' NOT NULL',\n                'sub_category_id' => Schema::TYPE_INTEGER . ' NOT NULL',\n                'title' => Schema::TYPE_STRING . ' NOT NULL',\n            ], $tableOptions);\n            $this->createTable('{{%category}}', [\n                'id' => Schema::TYPE_PK,\n                'category_id' => Schema::TYPE_INTEGER,\n                'title' => Schema::TYPE_STRING . ' NOT NULL',\n            ], $tableOptions);\n            $this->addForeignKey('fk_product_category_id', '{{%product}}', 'category_id', '{{%category}}', 'id');\n            $this->addForeignKey('fk_product_sub_category_id', '{{%product}}', 'category_id', '{{%category}}', 'id');\n            $this->batchInsert('{{%category}}', ['id', 'title'], [\n                [1, 'TV, Audio/Video'],\n                [2, 'Photo'],\n                [3, 'Video']\n            ]);\n            $this->batchInsert('{{%category}}', ['category_id', 'title'], [\n                [1, 'TV'],\n                [1, 'Acoustic System'],\n                [2, 'Cameras'],\n                [2, 'Flashes and Lenses '],\n                [3, 'Video Cams'],\n                [3, 'Action Cams'],\n                [3, 'Accessories']\n            ]);\n        }\n        public function down()\n        {\n            $this->dropTable('{{%product}}');\n            $this->dropTable('{{%category}}');\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use app\\models\\Product;\n    use app\\models\\Category;\n    use app\\models\\SubCategory;\n    use Yii;\n    use yii\\helpers\\ArrayHelper;\n    use yii\\helpers\\Json;\n    use yii\\web\\Controller;\n    use yii\\web\\HttpException;\n    class DropdownController extends Controller\n    {\n        public function actionGetSubCategories($id)\n        {\n            if (!Yii::$app->request->isAjax) {\n                throw new HttpException(400, 'Only ajax request is allowed.');\n            }\n            return Json::encode(Category::getSubCategories($id));\n        }\n        public function actionIndex()\n        {\n            $model = new Product();\n            if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n                Yii::$app->session->setFlash('success',\n                'Model was successfully saved'\n                );\n            }\n            return $this->render('index', [\n                'model' => $model,\n            ]);\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\bootstrap\\ActiveForm;\n    use yii\\helpers\\Html;\n    use yii\\helpers\\Url;\n    use app\\models\\Category;\n    use yii\\helpers\\ArrayHelper;\n    use yii\\web\\View;\n    $url = Url::toRoute(['dropdown/get-sub-categories']);\n    $this->registerJs(\"\n    (function(){\n        var select = $('#product-sub_category_id');\n        var buildOptions = function(options) {\n            if (typeof options === 'object') {\n                select.children('option').remove();\n                $('<option />')\n                    .appendTo(select)\n                    .html('Select a sub category')\n                $.each(options, function(index, option) {\n                    $('<option />', {value:option.id})\n                    .appendTo(select)\n                    .html(option.title);\n                });\n            }\n        };\n        var categoryOnChange = function(category_id){\n            $.ajax({\n                dataType: 'json',\n                url: '\" . $url . \"&id=' + category_id ,\n                success: buildOptions\n            });\n        };\n        window.buildOptions = buildOptions;\n        window.categoryOnChange = categoryOnChange;\n    })();\n    \", View::POS_READY);\n    ?>\n    <h1>Product</h1>\n    <?php if (Yii::$app->session->hasFlash('success')): ?>\n        <div class=\"alert alert-success\"><?= Yii::$app->session->getFlash('success'); ?></div>\n    <?php endif; ?>\n    <?php $form = ActiveForm::begin(); ?>\n        <?= $form->field($model, 'title')->textInput() ?>\n        <?= $form->field($model, 'category_id')->dropDownList(ArrayHelper::map(\n            Category::find()->where('category_id IS NULL')->asArray()->all(),'id', 'title'), [\n            'prompt' => 'Select a category',\n            'onChange' => 'categoryOnChange($(this).val());',\n        ]) ?>\n        <?= $form->field($model, 'sub_category_id')->dropDownList(\n            ArrayHelper::map(Category::getSubCategories($model->sub_category_id), 'id' ,'title'), [\n            'prompt' => 'Select a sub category',\n        ]) ?>\n        <div class=\"form-group\">\n            <?= Html::submitButton('Submit', ['class' => 'btn btn-primary']) ?>\n        </div>\n    <?php ActiveForm::end(); ?>\n    ```", "```php\n    $form = ActiveForm::begin([\n        'id' => 'contact-form',\n        'enableAjaxValidation' => true,\n    ]);\n    ```", "```php\n    if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {\n        Yii::$app->response->format = Response::FORMAT_JSON;\n        return ActiveForm::validate($model);\n    }\n    ```", "```php\n    public function actionContact()\n    {\n        $model = new ContactForm();\n        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {\n            Yii::$app->response->format = Response::FORMAT_JSON;\n            return ActiveForm::validate($model);\n        }\n        if ($model->load(Yii::$app->request->post()) && $model->contact(Yii::$app->params['adminEmail'])) {\n            Yii::$app->session->setFlash('contactFormSubmitted');\n            return $this->refresh();\n        } else {\n            return $this->render('contact', [\n                'model' => $model,\n            ]);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\components;\n    use yii\\validators\\Validator;\n    class WordsValidator extends Validator\n    {\n        public $size = 50;\n        public $message = 'The number of words must be less than {size}';\n        public function validateValue($value)\n        {\n            preg_match_all('/(\\w+)/i', $value, $matches);\n            if (count($matches[0]) > $this->size) {\n                return [$this->message, ['size' => $this->size]];\n            }\n        }\n        public function clientValidateAttribute($model, $attribute, $view)\n        {\n            $message = strtr($this->message, ['{size}' => $this->size]);\n            return <<<JS\n            if (value.split(/\\w+/gi).length > $this->size ) {\n                messages.push(\"$message\");\n            }\n            JS;\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\models;\n    use app\\components\\WordsValidator;\n    use yii\\base\\Model;\n    class Article extends Model\n    {\n        public $title;\n        public function rules()\n        {\n            return [\n                ['title', 'string'],\n                ['title', WordsValidator::className(), 'size' => 10],\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n    use app\\models\\Article;\n    use Yii;\n    use yii\\web\\Controller;\n    class ValidationController extends Controller\n    {\n        public function actionIndex()\n        {\n            $model = new Article();\n            if ($model->load(Yii::$app->request->post()) && $model->validate()) {\n                Yii::$app->session->setFlash('success', 'Model is valid');\n            }\n            return $this->render('index', [\n                'model' => $model,\n            ]);\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\bootstrap\\ActiveForm;\n    use yii\\helpers\\Html;\n    ?>\n    <h1>Article form</h1>\n    <?php if (Yii::$app->session->hasFlash('success')): ?>\n        <div class=\"alert alert-success\"><?= Yii::$app->session->getFlash('success'); ?></div>\n    <?php endif; ?>\n    <?php $form = ActiveForm::begin(); ?>\n        <?= $form->field($model, 'title') ?>\n        <div class=\"form-group\">\n            <?= Html::submitButton('Submit', ['class' => 'btn btn-primary']) ?>\n        </div>\n    <?php ActiveForm::end(); ?>\n    ```", "```php\n..\n['title', WordsValidator::className(), 'size' => 10],\n..\n```", "```php\n<?php\nnamespace app\\components;\nuse yii\\validators\\Validator;\nuse yii\\helpers\\Url;\nclass WordsValidator extends Validator\n{\n    public $size = 50;\n    public $message = 'The number of words must be less than {size}';\n    public function validateValue($value)\n    {\n        if (str_word_count($value) > $this->size) {\n            return ['The number of words must be less than {size}', ['size' => $this->size]];\n        }\n        return false;\n    }\n    public function clientValidateAttribute($model, $attribute, $view)\n    {\n        $url = Url::toRoute(['validation/check-words']);\n        return <<<JS\n        deferred.push($.get(\"$url\", {words: value}).done(function(data) {\n            if (!data.result) {\n                messages.push(data.error);\n            }\n        }));\n        JS;\n    }\n}\n```", "```php\npublic function actionCheckWords()\n{\n    \\Yii::$app->response->format = \\yii\\web\\Response::FORMAT_JSON;\n    $value = Yii::$app->getRequest()->get('words');\n    $validator = new WordsValidator([\n    'size' => 10,\n    ]);\n    $result = $validator->validate($value, $error);\n    return ['result' => $result,'error' => $error\n    ];\n}\n```"]