["```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Block; \n\nuse Drupal\\Core\\Block\\BlockBase; \n\nclass Copyright extends BlockBase { \n\n} \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Block; \n\nuse Drupal\\Core\\Block\\BlockBase; \n\n/** \n * @Block( \n *   id = \"copyright_block\", \n *   admin_label = @Translation(\"Copyright\"), \n *   category = @Translation(\"Custom\") \n * ) \n */ \nclass Copyright extends BlockBase { \n\n} \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Block; \n\nuse Drupal\\Core\\Block\\BlockBase; \n\n/** \n * @Block( \n *   id = \"copyright_block\", \n *   admin_label = @Translation(\"Copyright\"), \n *   category = @Translation(\"Custom\") \n * ) \n */ \nclass Copyright extends BlockBase { \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function build() { \n    $date = new \\DateTime(); \n    return [ \n      '#markup' => t('Copyright @year&copy; My Company', [ \n          '@year' => $date->format('Y'), \n      ]), \n    ]; \n  } \n} \n```", "```php\n/** \n * Implements hook_block_alter(). \n */ \nfunction mymodule_block_alter(&$definitions) { \n  $definitions['user_login_block']['admin_label'] = t('Login'); \n} \n```", "```php\n/** \n * Implements hook_block_build_alter(). \n */ \nfunction hook_block_build_alter(array &$build, \\Drupal\\Core\\Block\\BlockPluginInterface $block) { \n  // Add the 'url' cache the block per URL. \n  if ($block->getBaseId() == 'myblock') { \n    $build['#contexts'][] = 'url'; \n  } \n} \n```", "```php\n/** \n * Implements hook_block_view_alter(). \n */ \nfunction hook_block_view_alter(array &$build, \\Drupal\\Core\\Block\\BlockPluginInterface $block) { \n  // Remove the contextual links on all blocks that provide them. \n  if (isset($build['#contextual_links'])) { \n    unset($build['#contextual_links']); \n  } \n} \n```", "```php\n  /** \n   * {@inheritdoc} \n   */ \n  public function defaultConfiguration() { \n    return [ \n      'company_name' => '', \n    ]; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function blockForm($form, \\Drupal\\Core\\Form\\FormStateInterface $form_state) { \n    $form['company_name'] = [ \n      '#type' => 'textfield', \n      '#title' => t('Company name'), \n      '#default_value' => $this->configuration['company_name'], \n    ]; \n    return $form; \n  } \n```", "```php\n  /** \n   * {@inheritdoc} \n   */ \n  public function blockSubmit($form, \\Drupal\\Core\\Form\\FormStateInterface $form_state) { \n    $this->configuration['company_name'] = $form_state->getValue('company_name'); \n  } \n```", "```php\n  /** \n   * {@inheritdoc} \n   */ \n  public function build() { \n    $date = new \\DateTime(); \n    return [ \n      '#markup' => t('Copyright @year&copy; @company', [ \n        '@year' => $date->format('Y'), \n        '@company' => $this->configuration['company_name'], \n      ]), \n    ]; \n  } \n```", "```php\n  /** \n   * {@inheritdoc} \n   */ \n  protected function blockAccess(AccountInterface $account) { \n    $route_name = $this->routeMatch->getRouteName(); \n    if ($account->isAnonymous() && !in_array($route_name, \n       array('user.login', 'user.logout'))) { \n      return AccessResult::allowed() \n        ->addCacheContexts(['route.name', \n           'user.roles:anonymous']); \n    } \n    return AccessResult::forbidden(); \n  } \n```", "```php\n/** \n * Implements hook_block_access(). \n */ \nfunction mymodule_block_access(\\Drupal\\block\\Entity\\Block $block, $operation, \\Drupal\\Core\\Session\\AccountInterface $account) { \n  // Example code that would prevent displaying the Copyright' block in \n  // a region different than the footer. \n  if ($operation == 'view' && $block->getPluginId() == 'copyright') { \n    return \\Drupal\\Core\\Access\\AccessResult::forbiddenIf($block->getRegion() != 'footer'); \n  } \n\n  // No opinion. \n  return \\Drupal\\Core\\Access\\AccessResult::neutral(); \n} \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Field\\FieldType; \n\nuse Drupal\\Core\\Field\\FieldItemBase; \nuse Drupal\\Core\\Field\\FieldStorageDefinitionInterface; \nuse Drupal\\Core\\TypedData\\DataDefinition; \n\nclass RealName extends FieldItemBase { \n\n} \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Field\\FieldType; \n\nuse Drupal\\Core\\Field\\FieldItemBase; \nuse Drupal\\Core\\Field\\FieldStorageDefinitionInterface; \nuse Drupal\\Core\\TypedData\\DataDefinition; \n\n/** \n * Plugin implementation of the 'realname' field type. \n * \n * @FieldType( \n *   id = \"realname\", \n *   label = @Translation(\"Real name\"), \n *   description = @Translation(\"This field stores a first and last name.\"), \n *   category = @Translation(\"General\"), \n *   default_widget = \"string_textfield\", \n *   default_formatter = \"string\" \n * ) \n */ \n\nclass RealName extends FieldItemBase { \n\n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic static function schema(\\Drupal\\Core\\Field\\FieldStorageDefinitionInterface $field_definition) { \n  return [ \n    'columns' => [ \n      'first_name' => [ \n        'description' => 'First name.', \n        'type' => 'varchar', \n        'length' => '255', \n        'not null' => TRUE, \n        'default' => '', \n      ], \n      'last_name' => [ \n        'description' => 'Last name.', \n        'type' => 'varchar', \n        'length' => '255', \n        'not null' => TRUE, \n        'default' => '', \n      ], \n    ], \n    'indexes' => [ \n       'first_name' => ['first_name'], \n       'last_name' => ['last_name'], \n    ], \n  ]; \n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic static function propertyDefinitions(\\Drupal\\Core\\Field\\FieldStorageDefinitionInterface $field_definition) { \n  $properties['first_name'] = \\Drupal\\Core\\TypedData\\DataDefinition::create('string') \n->setLabel(t('First name')); \n  $properties['last_name'] = \\Drupal\\Core\\TypedData\\DataDefinition::create('string') \n->setLabel(t('Last name')); \n  return $properties; \n} \n```", "```php\n/** \n * Implements hook_field_info_alter(). \n */ \nfunction mymodule_field_info_alter(&$info) { \n  $info['email']['label'] = t('E-mail address'); \n} \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Field\\FieldWidget; \n\nuse Drupal\\Core\\Field\\WidgetBase; \n\nclass RealNameDefaultWidget extends WidgetBase { \n\n} \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Field\\FieldWidget; \n\nuse Drupal\\Core\\Field\\WidgetBase; \nuse Drupal\\Core\\Field\\FieldItemListInterface; \nuse Drupal\\Core\\Form\\FormStateInterface; \n\n/** \n * Plugin implementation of the 'realname_default' widget. \n * \n * @FieldWidget( \n *   id = \"realname_default\", \n *   label = @Translation(\"Real name\"), \n *   field_types = { \n *     \"realname\" \n *   } \n * ) \n */ \nclass RealNameDefaultWidget extends WidgetBase { \n\n} \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) { \n  $element['first_name'] = [ \n    '#type' => 'textfield', \n    '#title' => t('First name'), \n    '#default_value' => '', \n    '#size' => 25, \n    '#required' => $element['#required'], \n  ]; \n  $element['last_name'] = [ \n    '#type' => 'textfield', \n    '#title' => t('Last name'), \n    '#default_value' => '', \n    '#size' => 25, \n    '#required' => $element['#required'], \n  ]; \nreturn $element; \n} \n```", "```php\n/** \n * Plugin implementation of the 'realname' field type. \n * \n * @FieldType( \n *   id = \"realname\", \n *   label = @Translation(\"Real name\"), \n *   description = @Translation(\"This field stores a first and last name.\"), \n *   category = @Translation(\"General\"), \n *   default_widget = \"realname_default\", \n *   default_formatter = \"string\" \n * ) \n */ \nclass RealName extends FieldItemBase { \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Field\\FieldFormatter; \n\nuse Drupal\\Core\\Field\\FormatterBase; \nuse Drupal\\Core\\Field\\FieldItemListInterface; \n\nclass RealNameFormatter extends FormatterBase { \n\n} \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Field\\FieldFormatter; \n\nuse Drupal\\Core\\Field\\FormatterBase; \nuse Drupal\\Core\\Field\\FieldItemListInterface; \n\n/** \n * Plugin implementation of the 'realname_one_line' formatter. \n * \n * @FieldFormatter( \n *   id = \"realname_one_line\", \n *   label = @Translation(\"Real name (one line)\"), \n *   field_types = { \n *     \"realname\" \n *   } \n * ) \n */ \nclass RealNameFormatter extends FormatterBase { \n\n} \n```", "```php\n/** \n{@inheritdoc} \n*/ \npublic function viewElements(FieldItemListInterface $items, $langcode) { \n  $element = []; \n\n  foreach ($items as $delta => $item) { \n    $element[$delta] = [ \n      '#markup' => $this->t('@first @last', [ \n        '@first' => $item->first_name, \n        '@last' => $item->last_name, \n      ]), \n    ]; \n  } \n  return $element; \n} \n```", "```php\n/** \n * Plugin implementation of the 'realname' field type. \n * \n * @FieldType( \n *   id = \"realname\", \n *   label = @Translation(\"Real name\"), \n *   description = @Translation(\"This field stores a first and last name.\"), \n *   category = @Translation(\"General\"), \n *   default_widget = \" string_textfield \", \n *   default_formatter = \"realname_one_line\" \n * ) \n */ \n```", "```php\n<?php \n\nnamespace Drupal\\geoip; \n\nuse Drupal\\Core\\Plugin\\DefaultPluginManager; \nuse Drupal\\Core\\Cache\\CacheBackendInterface; \nuse Drupal\\Core\\Extension\\ModuleHandlerInterface; \n\nclass GeoLocatorManager extends DefaultPluginManager { \n\n}\n```", "```php\n<?php \n\nnamespace Drupal\\geoip; \n\nuse Drupal\\Core\\Plugin\\DefaultPluginManager; \nuse Drupal\\Core\\Cache\\CacheBackendInterface; \nuse Drupal\\Core\\Extension\\ModuleHandlerInterface; \n\nclass GeoLocatorManager extends DefaultPluginManager { \n\n  /** \n   * Default values for each plugin. \n   * \n   * @var array \n   */ \n  protected $defaults = [ \n    'label' => '', \n    'description' => '', \n    'weight' => 0, \n  ]; \n\n} \n```", "```php\n<?php \n\nnamespace Drupal\\geoip; \n\nuse Drupal\\Core\\Plugin\\DefaultPluginManager; \nuse Drupal\\Core\\Cache\\CacheBackendInterface; \nuse Drupal\\Core\\Extension\\ModuleHandlerInterface; \n\nclass GeoLocatorManager extends DefaultPluginManager { \n\n  /** \n   * Default values for each plugin. \n   * \n   * @var array \n   * / \n  protected $defaults = [ \n    'label' => '', \n    'description' => '', \n    'weight' => 0, \n  ]; \n\n  /** \n   * Constructs a new GeoLocatorManager object. \n   * \n   * @param \\Traversable $namespaces \n   *   An object that implements \\Traversable which contains the root paths \n   *   keyed by the corresponding namespace to look for plugin implementations. \n   * @param \\Drupal\\Core\\Cache\\CacheBackendInterface $cache_backend \n   *   Cache backend instance to use. \n   * @param \\Drupal\\Core\\Extension\\ModuleHandlerInterface $module_handler \n   *   The module handler. \n   */ \n  public function __construct(\\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) { \n    parent::__construct( \n      'Plugin/GeoLocator',  \n      $namespaces,  \n      $module_handler,  \n      'Drupal\\geoip\\Plugin\\GeoLocator\\GeoLocatorInterface',  \n      'Drupal\\geoip\\Annotation\\GeoLocator' \n    ); \n    $this->setCacheBackend($cache_backend, 'geolocator_plugins'); \n  } \n\n} \n```", "```php\nservices: \n  plugin.manager.geolocator: \n    class: Drupal\\geoip\\GeoLocatorManager \n    parent: default_plugin_manager \n```", "```php\n<?php \n\nnamespace Drupal\\geoip\\Annotation; \n\nuse Drupal\\Component\\Annotation\\Plugin; \n\n/** \n * Defines a GeoLocator annotation object. \n * \n * @Annotation \n */ \nclass GeoLocator extends Plugin { \n\n  /** \n   * The human-readable name. \n   * \n   * @var \\Drupal\\Core\\Annotation\\Translation \n   * \n   * @ingroup plugin_translatable \n   */ \n  public $label; \n\n  /** \n   * A description of the plugin. \n   * \n   * @var \\Drupal\\Core\\Annotation\\Translation \n   * \n   * @ingroup plugin_translatable \n   */ \n  public $description; \n\n} \n```", "```php\n<?php \n\nnamespace Drupal\\geoip\\Plugin\\GeoLocator; \n\n/** \n * Interface GeoLocatorInterface. \n */ \ninterface GeoLocatorInterface { \n\n  /** \n   * Get the plugin's label. \n   * \n   * @return string \n   *   The geolocator label \n   */ \n  public function label(); \n\n  /** \n   * Get the plugin's description. \n   * \n   * @return string \n   *   The geolocator description \n   */ \n  public function description(); \n\n  /** \n   * Performs geolocation on an address. \n   * \n   * @param string $ip_address \n   *   The IP address to geolocate. \n   * \n   * @return string|NULL \n   *   The geolocated country code, or NULL if not found. \n   */ \n  public function geolocate($ip_address); \n\n} \n```", "```php\n<?php \n\nnamespace Drupal\\geoip\\Plugin\\GeoLocator; \n\nuse Drupal\\Core\\Plugin\\PluginBase; \n\n/** \n * CDN geolocation provider. \n * \n * @GeoLocator( \n *   id = \"cdn\", \n *   label = \"CDN\", \n *   description = \"Checks for geolocation headers sent by CDN services\", \n *   weight = -10 \n * ) \n */ \nclass Cdn extends PluginBase implements GeoLocatorInterface { \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function label() { \n    return $this->pluginDefinition['label']; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function description() { \n    return $this->pluginDefinition['description']; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function geolocate($ip_address) { \n    // Check if CloudFlare headers present. \n    if (!empty($_SERVER['HTTP_CF_IPCOUNTRY'])) { \n      $country_code = $_SERVER['HTTP_CF_IPCOUNTRY']; \n    } \n    // Check if CloudFront headers present. \n    elseif (!empty($_SERVER['HTTP_CLOUDFRONT_VIEWER_COUNTRY'])) { \n      $country_code = $_SERVER['HTTP_CLOUDFRONT_VIEWER_COUNTRY']; \n    } \n    else { \n      $country_code = NULL; \n    } \n\n    return $country_code; \n  } \n\n} \n\n```", "```php\n// Load the manager service. \n$geolocator_manager = \\Drupal::service('plugin.manager.geolocator'); \n\n// Create a class instance through the manager. \n$cdn_instance = $unit_manager->createInstance('cdn'); \n\n// Get country code. \n$country_code = $cdn_instance->geolocate('127.0.0.1'); \n```", "```php\n/**\n * Constructs a new GeoLocatorManager object.\n *\n * @param \\Traversable $namespaces\n * An object that implements \\Traversable which contains the root paths\n * keyed by the corresponding namespace to look for plugin implementations.\n * @param \\Drupal\\Core\\Cache\\CacheBackendInterface $cache_backend\n * Cache backend instance to use.\n * @param \\Drupal\\Core\\Extension\\ModuleHandlerInterface $module_handler\n * The module handler.\n */\npublic function __construct(\\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {\n  parent::__construct(\n    'Plugin/GeoLocator',\n    $namespaces,\n    $module_handler,\n    'Drupal\\geoip\\Plugin\\GeoLocator\\GeoLocatorInterface',\n    'Drupal\\geoip\\Annotation\\GeoLocator'\n  );\n  $this->alterInfo('geolocator_info');\n  $this->setCacheBackend($cache_backend, 'geolocator_plugins');\n}\n```", "```php\n$geolocator_manager = \\Drupal::service('plugin.manager.geolocator');\n```"]