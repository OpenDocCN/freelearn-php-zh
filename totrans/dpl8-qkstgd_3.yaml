- en: Managing Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](54597f65-23c0-4749-a7e6-aa5086ca1d47.xhtml), *Structuring Content
    Types*, we learned how content is stored as a type, about content types, the fields
    that comprise them, and how to create a custom content type.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter is all about the reason for having a Drupal site, or any website
    for that matter: users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If no one were accessing the site''s content, there would be little reason
    for having the site, right? However, not all access is alike. You''re going to
    learn about user types and how Drupal provides a way for you to ensure that no
    one has more access than they require. More specifically, this chapter covers
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: User types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the context of a **Content Management System** (**CMS**), a user is simply
    someone who uses the site. If that were all there is to it, if everyone were always
    the same in the *eyes* of Drupal, we could stop right here. So, you won't be surprised
    to read that all users are not necessarily the same. Of course, I'm not referring
    to the personal aspects of the users when I write that; I mean that users are
    not necessarily all the same in terms of their reason for accessing the site and
    what ability they are given to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at USERS as a top-level classification with the thought of further
    classifying them, doing so depends on a choice: are we classifying them in a real-world
    sort of way, or as Drupal does? In the following table we see them compared:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **USERS** |'
  prefs: []
  type: TYPE_TB
- en: '| **Administrative** | **Creative** | **Consumer** |'
  prefs: []
  type: TYPE_TB
- en: '| Focus on the configuration and settings of the site rather than site content.
    | Focus on site content | Availers of site content |'
  prefs: []
  type: TYPE_TB
- en: 'From the real-world point of view, we tend to categorize users based on their
    functional relationship with the site. If you think of these relationships in
    the context of a home, some might simply live there and consume food (think teenagers),
    some will contribute to the look and contents of the home, and others will be
    responsible for maintaining it. Yes, a user can appear in more than one category,
    as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **USERS** |'
  prefs: []
  type: TYPE_TB
- en: '| **Administrative** | **Authenticated** | **Anonymous** |'
  prefs: []
  type: TYPE_TB
- en: '| Authenticated + permission to perform higher level activities. | Anonymous
    + a login to access privileged functionality or content. | Some access to the
    account as an unknown site visitor. |'
  prefs: []
  type: TYPE_TB
- en: From the Drupal point of view, it pretty much comes down to what you will be
    allowed to do on the site and whether you require an account to do so. For example,
    some sites allow unknown site visitors to read the content and comment on it.
    Others only allow access to the content for them without commenting, and others
    do not allow anonymous access at all. Returning to the analogy of a home, those
    who can do whatever they like to it have administrative access; those who are
    allowed to enter have authenticated access, albeit with different "roles", such
    as friends versus residents; and those who come to the front door (if there is
    no gatekeeper or doorman preventing that) who are unknown are anonymous.
  prefs: []
  type: TYPE_NORMAL
- en: For the most part, *Consumer* users are *Anonymous*, with some premium or secure
    content requiring them to be *Authenticated*. *Creative* users are typically *Authenticated*.
    And *Administrators* are usually always, *Administrative*. The takeaway is this: sites
    vary, and so does the segregation, if any, of user types.
  prefs: []
  type: TYPE_NORMAL
- en: User roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To Drupal, a *role* has the same meaning as it does outside of Drupal: the
    functional aspect of the user, sometimes considered a *persona*. It''s worth mentioning
    that Drupal does blur the line a bit between a role and a user type, because it
    comes with three roles predefined, and they are the user types mentioned earlier.
    While *administrator* makes sense as a role, *authenticated* and *anonymous* are
    not really roles, but appear there to simplify things, for administrators, at
    least.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s take a look at the default user roles inside of Drupal before we
    move on to discussing why you would want additional ones. If you are using the
    menus, click *People* in the Admin menu (`admin/people`), and then click the tab
    labeled *Roles*, as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7487d629-2b0f-42e8-8300-24d1211518a6.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the roles that are predefined in Drupal. I disagree
    with the given description of a role, because it is unclear. The order of operation
    in Drupal is that privileges are assigned to roles, and roles are assigned to
    users. We'll discuss that more when we add a user and when we assign some permissions,
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let's focus on the default Drupal roles themselves. As I mentioned
    earlier, *anonymous* and *authenticated* are actually more user types than roles,
    but in Drupal they are referred to as roles. When would these three roles, alone,
    be sufficient? One example would be a site where all users with logins can create
    content, and all users that have no login can only view that content. If those
    are the limits to your organizational and site complexity, you can jump ahead
    to the section on *User Creation* if you'd like.
  prefs: []
  type: TYPE_NORMAL
- en: Let us consider. The anonymous role stands on its own. Why? Because it is defined
    as a user with no account or login, which is to say, a user that is not identified.
    We would not assign the role of *Anonymous* to a user account, because if there
    is an account, the user of it is no longer anonymous. There would be no sense
    in creating different roles for anonymous users, because there would be no user
    accounts to assign those roles. So, that leaves us with the other two roles, and
    we can use those to derive examples.
  prefs: []
  type: TYPE_NORMAL
- en: On our site, we will have four types of non-administrative authenticated users.
    The first will be authenticated users in general. That is, users with this role
    will be able to login, and in addition to being able to see the Article and Page
    site content that Anonymous and all users can see, they will be able to see content
    of the Appointment type we defined, as well.
  prefs: []
  type: TYPE_NORMAL
- en: This could be our use of the Authenticated role, since all users logging in
    will have those capabilities at a minimum, but we won't use that role for it.
    Why? Because we have to account for the possibility that later there might be
    the need to have some users who can log in but cannot access appointment data.
    In general, I prefer to leave the predefined roles  unchanged for that reason...use
    them as a model instead, or as is. So, we will call the new role Client.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to keep in mind when creating new roles for a logged-in user is that
    because the user is logged in, and thus also an authenticated user, the user will
    receive all the permissions assigned to the Authenticated role, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will be three additional roles for authenticated users on our site:  Client,
    who is able to view appointments; Consultant, who is able to create and edit appointments;
    and Editor, who is able to create and edit content other than appointments. The
    complete list of our user roles and their use are given in this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Role | Use |'
  prefs: []
  type: TYPE_TB
- en: '| Anonymous | Unknown users. Able to read *Article* and *Page* content. |'
  prefs: []
  type: TYPE_TB
- en: '| Authenticated | Users with accounts. Able to comment on *Article* content.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Client | Authenticated + able to view *Appointment* content |'
  prefs: []
  type: TYPE_TB
- en: '| Consultant | Authenticated + able to perform *Appointment* CRUD^* |'
  prefs: []
  type: TYPE_TB
- en: '| Editor | Authenticated + able to perform *Article* and *Page* CRUD^* |'
  prefs: []
  type: TYPE_TB
- en: '| Administrator | Authenticated + able to access Drupal admin functions and
    manage user accounts |'
  prefs: []
  type: TYPE_TB
- en: '* **CRUD** = **Create/Read/Update/Delete **'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to add the Client role:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the +Add role button, which leads to the page `admin/people/roles/add`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the *role name*, `Client`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Sav*e*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that the role list now includes Client. Follow the steps above for the
    Consultant and Editor roles as well. The role list should now appear as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d291a3dc-5060-4384-9fd0-4dc6d4370d49.png)'
  prefs: []
  type: TYPE_IMG
- en: All roles are now available for use. However, their capabilities have not yet
    been defined. Since we've covered all that we need to regarding the creation of
    roles, let's move on to the topic of permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Managing permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any page element that a user can view or hear or otherwise interact with, such
    as a menu link, is available for doing so because the user, via a role, has been
    given permission to do so. This is a very important concept, so I will give an
    example. You have no doubt seen a *Terms and Conditions* link on most sites.
  prefs: []
  type: TYPE_NORMAL
- en: On a Drupal site, if you see such a link, it is because your user role has been
    granted permission to access that content (the Terms and Conditions page). Were
    that permission not granted for your user, the link would probably not be visible.
    Were it still visible, or were you to enter the URL for the page in your browser,
    you would receive a message stating that you have not been granted access to that
    content.
  prefs: []
  type: TYPE_NORMAL
- en: Because permissions can be granular and detailed, there are a lot of them, and
    adding modules will typically add more to the list. We're going to focus on a
    subset of them to keep things simple.
  prefs: []
  type: TYPE_NORMAL
- en: With that warning, let's take a look by clicking the Permissions tab at the
    top of the page, which will take us to `admin/people/permissions`.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the permissions page is all permissions provided in a scrollable
    table. Across the top of the table are the roles defined on the site. You'll see
    that they are the same as those that were listed earlier. Down the left-most column
    of the table is the list of permissions for actions categorized by alphabetical
    topic and/or name of the module that defines them.
  prefs: []
  type: TYPE_NORMAL
- en: The manner of management is quite simple. If a box is checked, that column's
    role has the listed permission. For example, looking at the first permission,
    which is associated with the *Block* module, the ability to *Administer blocks*
    has been granted only to those users having the Administrator role.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than scroll down and up for each of the roles, we'll approach this by
    permission, so that we only have to scroll once. In the following table, I will
    provide each of the categories and permissions within it that require our attention,
    as well as what the checkboxes should look like after you have checked the appropriate
    ones to accomplish the grants we defined earlier for our roles.
  prefs: []
  type: TYPE_NORMAL
- en: We will not be changing any of the settings in the Administrator column, but
    I have included it so that the relative position of each role is as you see it
    on your screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will only provide rows for those permissions that require a setting change. For
    example, you will notice under the category of Comment that already all authenticated
    user types have the ability to post comments, while Anonymous users have the ability
    to view comments, so no changes are needed, which is why that row won''t appear
    in this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Category/Permission** | **Anonymous****User** | **Authenticated****User**
    | **Administrator** | **Client** | **Consultant** | **Editor** |'
  prefs: []
  type: TYPE_TB
- en: '| NODE |  |  |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '|     *Appointment*: Create new content |  |  | x |  | x |  |'
  prefs: []
  type: TYPE_TB
- en: '|     *Article*: Create new content |  |  | x |  |  | x |'
  prefs: []
  type: TYPE_TB
- en: '| *    Appointment*: Delete own content |  |  | x |  | x |  |'
  prefs: []
  type: TYPE_TB
- en: '| *    Article*: Delete own content |  |  | x |  |  | x |'
  prefs: []
  type: TYPE_TB
- en: '| *    Article*: Edit any content |  |  | x |  |  | x |'
  prefs: []
  type: TYPE_TB
- en: '| *    Appointment:* Edit own content |  |  | x |  | x |  |'
  prefs: []
  type: TYPE_TB
- en: '| *    Article*: Edit own content |  |  | x |  |  | x |'
  prefs: []
  type: TYPE_TB
- en: '| Access the Content overview page |  |  | x |  | x | x |'
  prefs: []
  type: TYPE_TB
- en: '|  View own unpublished content |  |  | x |  | x | x |'
  prefs: []
  type: TYPE_TB
- en: Most of the permissions in the preceding table relate to CRUD operations on
    specific content types. That is, being able to create (add), edit (update) and
    delete content of a specific type, such as the *Appointment* type that we created.
    You can see that we granted permission to perform such operations to Consultants,
    but not to Editors, whereas we granted permission to perform those same operations
    on *Article* content to Editors, but not to Consultants.
  prefs: []
  type: TYPE_NORMAL
- en: Access rights, permissions, take effect immediately. That is, even if you have
    permission to perform a certain action or access a type of content, were that
    permission to be removed from your role, your access to that action/content would
    then be gone, unless and until it is reinstated.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that some of the permission descriptions look very similar,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Appointment: Edit own content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Appointment: Edit any content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between the two is that with the second, the user is able to
    edit Appointment content regardless of who created it, whereas with the first,
    the user needs to have created it.
  prefs: []
  type: TYPE_NORMAL
- en: The final permission, *View own unpublished content*, is worth noting as well.
    Unless this permission is granted, if a new piece of content is saved as *unpublished*,
    its author can no longer access it, only being able to access content marked *published*.
    With this permission, the user can also access his unpublished content, which
    is necessary for working with drafts.
  prefs: []
  type: TYPE_NORMAL
- en: You might also notice that permissions for reading/viewing specific content
    types were not present. That is because, while there is a permission for viewing
    published content, that is as granular as the permissions get for viewing content;
    there are no permissions regarding viewing a particular content type. There is,
    however a module that provides those permissions, which we will add in [Chapter
    5](1787223e-41c7-44c4-9ab3-fc0f2cee3fa5.xhtml), *Making Drupal Even More Useful*.
    Once we have those permissions available to grant, we can ensure that only the
    roles we select can comment on a specific content type, because if you can't view
    the content, you can't comment on it!
  prefs: []
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've created the roles specific to our site and assigned to them the permissions
    that grant them the access that they need. The only thing we're missing now...are
    users. Each user needs an account. Where do they come from?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways that most users obtain a Drupal account:'
  prefs: []
  type: TYPE_NORMAL
- en: A user with permissions to create a user account does so on the user's behalf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user registers for an account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user obtains an account via **single sign-on** (**SSO**), such as through
    a Facebook account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of these, the latter method is out of scope for this book, as it is a more in-depth
    administrative topic. Let's take a look at the other two.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to learn how to create a user account. Some sites choose to allow
    users to create an account that immediately becomes active with no review, some
    choose to require the account to stay inactive until an administrative user approves
    it, which is what we will emulate here, and some create all user accounts administratively
    and do not allow users to register.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an account for an editor, one of the roles we created. If you
    still have a page up with the tabs for List, Permissions, and Roles at the top,
    click List. Otherwise, you can either click People in the Admin menu, or navigate
    to `admin/people`. Here is how we create an account:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the + Add user button, which will bring you to the Add user page, `admin/people/create`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Email address, you can enter a real one if you have it, or a fake one (`@example.com`
    is a good domain to use for fake email addresses and URLs).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Username can be anything. Our editor will be *Edie Editor*, so I'll make
    her username `Edie`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose something you'll remember for a password. The user can change the password
    once logged in. To get a green bar (strong password) try `Password123`. Enter
    your choice again in the Confirm password field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Status, leave the setting at Active. If you ever want to create a user account
    in advance but not make it immediately active, you would select Blocked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Roles, check the box for Editor to give this user that role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll notice that Roles has Authenticated selected and that it cannot be unselected.
    That is because all users with accounts are authenticated, by definition.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to leave Notify users of new account unchecked. Normally, you would
    check this so that an email would be sent to the new user, but we do not want
    an email sent in this case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Picture is nice when there will be something akin to blog articles, where
    the author has a photo, but we won't use one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Will your content editors want to be contacted via the website? If so, leave
    the next check box for Personal contact form selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Time zone selection assures that the user sees times displayed based on
    their time zone, rather than the time zone in which the web server is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having addressed all the fields, click Create new account. You will stay on
    the Add user page, with a message similar to the following screenshot at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/467c8dbe-93de-4900-a122-1d33a6546453.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When users are allowed to request an account by registering, there are typically
    two ways it can be handled, depending on your site configuration: the registration
    can result in an immediately active account, or the user account will be created
    as Blocked to Inactive, until it is approved.'
  prefs: []
  type: TYPE_NORMAL
- en: User registration is configured at Configuration | People | Account settings
    (`/admin/config/people/accounts`). Learn more at: [https://www.drupal.org/docs/user_guide/en/config-user.html](https://www.drupal.org/docs/user_guide/en/config-user.html).
  prefs: []
  type: TYPE_NORMAL
- en: To approve it, you would edit the account from the user list, change the status
    from Blocked to Active, and assign the user whichever roles are needed. The only
    role that will be preselected is Authenticated, just as when we created a user.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've looked at the major facets of managing users, including roles and permissions.
    Ensuring that users have the proper roles and that those roles give them access
    to only the functionality they should have is essential for the security of your
    content and the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a site, some content types, and an editor with the proper
    permissions for working with content, it''s time to spend some time on the topic
    most central to a Content Management System: the content, and that''s just what
    we''ll do in [Chapter 4](5dc26faf-5b24-463c-9587-e06ec89742a7.xhtml), *Creating
    and Editing Content*.'
  prefs: []
  type: TYPE_NORMAL
